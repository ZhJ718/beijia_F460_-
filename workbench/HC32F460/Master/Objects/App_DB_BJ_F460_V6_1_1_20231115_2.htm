<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\App_DB_BJ_F460_V6_1_1_20231115_2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\App_DB_BJ_F460_V6_1_1_20231115_2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Dec 06 17:31:42 2023
<BR><P>
<H3>Maximum Stack Usage =       2056 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; UserParam_Init &rArr; DrillStateRecovery &rArr; AssignStateFromBuffer &rArr; DayModeHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
 <LI><a href="#[c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SVC_Handler</a><BR>
 <LI><a href="#[d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DebugMon_Handler</a><BR>
 <LI><a href="#[e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">PendSV_Handler</a><BR>
 <LI><a href="#[f]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SysTick_Handler</a><BR>
 <LI><a href="#[2e]">IRQ030_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">IRQ030_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b8]">Beep_GpioInit</a> from gpio.o(i.Beep_GpioInit) referenced from main_task.o(.constdata)
 <LI><a href="#[ba]">Beep_GpioOff</a> from gpio.o(i.Beep_GpioOff) referenced from main_task.o(.constdata)
 <LI><a href="#[b9]">Beep_GpioOn</a> from gpio.o(i.Beep_GpioOn) referenced from main_task.o(.constdata)
 <LI><a href="#[bb]">Beep_GpioToggle</a> from gpio.o(i.Beep_GpioToggle) referenced from main_task.o(.constdata)
 <LI><a href="#[a]">BusFault_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[bf]">Fume_GpioInit</a> from gpio.o(i.Fume_GpioInit) referenced from main_task.o(.constdata)
 <LI><a href="#[c2]">Fume_GpioIsInstalled</a> from gpio.o(i.Fume_GpioIsInstalled) referenced from main_task.o(.constdata)
 <LI><a href="#[c1]">Fume_GpioOff</a> from gpio.o(i.Fume_GpioOff) referenced from main_task.o(.constdata)
 <LI><a href="#[c0]">Fume_GpioOn</a> from gpio.o(i.Fume_GpioOn) referenced from main_task.o(.constdata)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[cd]">HmiCom_ComInit</a> from hmicom_task.o(i.HmiCom_ComInit) referenced from hmicom_task.o(.constdata)
 <LI><a href="#[ce]">HmiCom_ComRead</a> from hmicom_task.o(i.HmiCom_ComRead) referenced from hmicom_task.o(.constdata)
 <LI><a href="#[cf]">HmiCom_ComWrite</a> from hmicom_task.o(i.HmiCom_ComWrite) referenced from hmicom_task.o(.constdata)
 <LI><a href="#[a9]">IR38Com_ComInit</a> from ir38com_task.o(i.IR38Com_ComInit) referenced from ir38com_task.o(i.IR38ComTask_Init)
 <LI><a href="#[aa]">IR38Com_Read</a> from ir38com_task.o(i.IR38Com_Read) referenced from ir38com_task.o(i.IR38ComTask_Init)
 <LI><a href="#[ab]">IR38Com_Write</a> from ir38com_task.o(i.IR38Com_Write) referenced from ir38com_task.o(i.IR38ComTask_Init)
 <LI><a href="#[10]">IRQ000_Handler</a> from ir.o(i.IRQ000_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[11]">IRQ001_Handler</a> from ir.o(i.IRQ001_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[12]">IRQ002_Handler</a> from ir.o(i.IRQ002_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[13]">IRQ003_Handler</a> from ir.o(i.IRQ003_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[14]">IRQ004_Handler</a> from wtn6.o(i.IRQ004_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[15]">IRQ005_Handler</a> from timer.o(i.IRQ005_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[16]">IRQ006_Handler</a> from uart.o(i.IRQ006_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[17]">IRQ007_Handler</a> from uart.o(i.IRQ007_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[18]">IRQ008_Handler</a> from uart.o(i.IRQ008_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[19]">IRQ009_Handler</a> from uart.o(i.IRQ009_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1a]">IRQ010_Handler</a> from uart.o(i.IRQ010_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1b]">IRQ011_Handler</a> from uart.o(i.IRQ011_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1c]">IRQ012_Handler</a> from uart.o(i.IRQ012_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1d]">IRQ013_Handler</a> from uart.o(i.IRQ013_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1e]">IRQ014_Handler</a> from uart.o(i.IRQ014_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1f]">IRQ015_Handler</a> from uart.o(i.IRQ015_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[20]">IRQ016_Handler</a> from uart.o(i.IRQ016_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[21]">IRQ017_Handler</a> from uart.o(i.IRQ017_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[22]">IRQ018_Handler</a> from uart.o(i.IRQ018_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[23]">IRQ019_Handler</a> from uart.o(i.IRQ019_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[24]">IRQ020_Handler</a> from uart.o(i.IRQ020_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[25]">IRQ021_Handler</a> from uart.o(i.IRQ021_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[26]">IRQ022_Handler</a> from uart.o(i.IRQ022_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[27]">IRQ023_Handler</a> from uart.o(i.IRQ023_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[28]">IRQ024_Handler</a> from uart.o(i.IRQ024_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[29]">IRQ025_Handler</a> from uart.o(i.IRQ025_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2a]">IRQ026_Handler</a> from uart.o(i.IRQ026_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2b]">IRQ027_Handler</a> from uart.o(i.IRQ027_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2c]">IRQ028_Handler</a> from uart.o(i.IRQ028_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2d]">IRQ029_Handler</a> from uart.o(i.IRQ029_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2e]">IRQ030_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2f]">IRQ031_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[30]">IRQ032_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[31]">IRQ033_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[32]">IRQ034_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[33]">IRQ035_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[34]">IRQ036_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[35]">IRQ037_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[36]">IRQ038_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[37]">IRQ039_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[38]">IRQ040_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[39]">IRQ041_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3a]">IRQ042_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3b]">IRQ043_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3c]">IRQ044_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3d]">IRQ045_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3e]">IRQ046_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3f]">IRQ047_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[40]">IRQ048_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[41]">IRQ049_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[42]">IRQ050_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[43]">IRQ051_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[44]">IRQ052_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[45]">IRQ053_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[46]">IRQ054_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[47]">IRQ055_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[48]">IRQ056_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[49]">IRQ057_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4a]">IRQ058_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4b]">IRQ059_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4c]">IRQ060_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4d]">IRQ061_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4e]">IRQ062_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4f]">IRQ063_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[50]">IRQ064_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[51]">IRQ065_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[52]">IRQ066_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[53]">IRQ067_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[54]">IRQ068_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[55]">IRQ069_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[56]">IRQ070_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[57]">IRQ071_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[58]">IRQ072_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[59]">IRQ073_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5a]">IRQ074_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5b]">IRQ075_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5c]">IRQ076_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5d]">IRQ077_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5e]">IRQ078_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5f]">IRQ079_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[60]">IRQ080_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[61]">IRQ081_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[62]">IRQ082_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[63]">IRQ083_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[64]">IRQ084_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[65]">IRQ085_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[66]">IRQ086_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[67]">IRQ087_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[68]">IRQ088_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[69]">IRQ089_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6a]">IRQ090_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6b]">IRQ091_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6c]">IRQ092_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6d]">IRQ093_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6e]">IRQ094_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6f]">IRQ095_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[70]">IRQ096_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[71]">IRQ097_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[72]">IRQ098_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[73]">IRQ099_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[74]">IRQ100_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[75]">IRQ101_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[76]">IRQ102_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[77]">IRQ103_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[78]">IRQ104_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[79]">IRQ105_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7a]">IRQ106_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7b]">IRQ107_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7c]">IRQ108_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7d]">IRQ109_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7e]">IRQ110_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7f]">IRQ111_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[80]">IRQ112_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[81]">IRQ113_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[82]">IRQ114_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[83]">IRQ115_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[84]">IRQ116_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[85]">IRQ117_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[86]">IRQ118_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[87]">IRQ119_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[88]">IRQ120_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[89]">IRQ121_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8a]">IRQ122_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8b]">IRQ123_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8c]">IRQ124_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8d]">IRQ125_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8e]">IRQ126_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8f]">IRQ127_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[90]">IRQ128_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[91]">IRQ129_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[92]">IRQ130_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[93]">IRQ131_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[94]">IRQ132_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[95]">IRQ133_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[96]">IRQ134_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[97]">IRQ135_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[98]">IRQ136_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[99]">IRQ137_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9a]">IRQ138_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9b]">IRQ139_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9c]">IRQ140_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9d]">IRQ141_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9e]">IRQ142_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9f]">IRQ143_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[c8]">LaserCom_ComInit</a> from lasercom_task.o(i.LaserCom_ComInit) referenced from lasercom_task.o(.constdata)
 <LI><a href="#[c9]">LaserCom_ComRead</a> from lasercom_task.o(i.LaserCom_ComRead) referenced from lasercom_task.o(.constdata)
 <LI><a href="#[ca]">LaserCom_ComWrite</a> from lasercom_task.o(i.LaserCom_ComWrite) referenced from lasercom_task.o(.constdata)
 <LI><a href="#[cc]">LaserCom_GpioPowerOff</a> from gpio.o(i.LaserCom_GpioPowerOff) referenced from lasercom_task.o(.constdata)
 <LI><a href="#[cb]">LaserCom_GpioPowerOn</a> from gpio.o(i.LaserCom_GpioPowerOn) referenced from lasercom_task.o(.constdata)
 <LI><a href="#[b0]">LteCom_GpioPowerOff</a> from gpio.o(i.LteCom_GpioPowerOff) referenced from rescom_task.o(i.ResComTask_Init)
 <LI><a href="#[af]">LteCom_GpioPowerOn</a> from gpio.o(i.LteCom_GpioPowerOn) referenced from rescom_task.o(i.ResComTask_Init)
 <LI><a href="#[9]">MemManage_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[bc]">Motor_GpioInit</a> from gpio.o(i.Motor_GpioInit) referenced from main_task.o(.constdata)
 <LI><a href="#[be]">Motor_GpioOff</a> from gpio.o(i.Motor_GpioOff) referenced from main_task.o(.constdata)
 <LI><a href="#[bd]">Motor_GpioOn</a> from gpio.o(i.Motor_GpioOn) referenced from main_task.o(.constdata)
 <LI><a href="#[7]">NMI_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[b4]">RLed_GpioInit</a> from gpio.o(i.RLed_GpioInit) referenced from main_task.o(i.StaLed_Init)
 <LI><a href="#[b6]">RLed_Off</a> from gpio.o(i.RLed_Off) referenced from main_task.o(i.StaLed_Init)
 <LI><a href="#[b5]">RLed_On</a> from gpio.o(i.RLed_On) referenced from main_task.o(i.StaLed_Init)
 <LI><a href="#[ac]">ResCom_ComInit</a> from rescom_task.o(i.ResCom_ComInit) referenced from rescom_task.o(i.ResComTask_Init)
 <LI><a href="#[ad]">ResCom_ComRead</a> from rescom_task.o(i.ResCom_ComRead) referenced from rescom_task.o(i.ResComTask_Init)
 <LI><a href="#[ae]">ResCom_ComWrite</a> from rescom_task.o(i.ResCom_ComWrite) referenced from rescom_task.o(i.ResComTask_Init)
 <LI><a href="#[6]">Reset_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[b1]">RunLed_GpioInit</a> from gpio.o(i.RunLed_GpioInit) referenced from main_task.o(i.RunLed_Init)
 <LI><a href="#[b3]">RunLed_Off</a> from gpio.o(i.RunLed_Off) referenced from main_task.o(i.RunLed_Init)
 <LI><a href="#[b2]">RunLed_On</a> from gpio.o(i.RunLed_On) referenced from main_task.o(i.RunLed_Init)
 <LI><a href="#[d3]">SPI2_ReadWriteByte</a> from spi.o(i.SPI2_ReadWriteByte) referenced from extflash.o(.constdata)
 <LI><a href="#[c]">SVC_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a0]">SystemInit</a> from system_hc32f46x.o(i.SystemInit) referenced from startup_hc32f46x.o(.text)
 <LI><a href="#[d4]">TIM4_Unit2_Sleep_Us</a> from wtn6.o(i.TIM4_Unit2_Sleep_Us) referenced from wtn6.o(.constdata)
 <LI><a href="#[b]">UsageFault_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[d2]">W25QXX_CS_RESET</a> from gpio.o(i.W25QXX_CS_RESET) referenced from extflash.o(.constdata)
 <LI><a href="#[d1]">W25QXX_CS_SET</a> from gpio.o(i.W25QXX_CS_SET) referenced from extflash.o(.constdata)
 <LI><a href="#[d0]">W25QXX_HardWareInit</a> from extflash.o(i.W25QXX_HardWareInit) referenced from extflash.o(.constdata)
 <LI><a href="#[d8]">Wtn6_1_GpioDataReset</a> from gpio.o(i.Wtn6_1_GpioDataReset) referenced from wtn6.o(.constdata)
 <LI><a href="#[d7]">Wtn6_1_GpioDataSet</a> from gpio.o(i.Wtn6_1_GpioDataSet) referenced from wtn6.o(.constdata)
 <LI><a href="#[d6]">Wtn6_1_HardWareInit</a> from wtn6.o(i.Wtn6_1_HardWareInit) referenced from wtn6.o(.constdata)
 <LI><a href="#[d9]">Wtn6_1_IsGpioBusySet</a> from gpio.o(i.Wtn6_1_IsGpioBusySet) referenced from wtn6.o(.constdata)
 <LI><a href="#[d5]">Wtn6_StepProcess</a> from wtn6.o(i.Wtn6_StepProcess) referenced from wtn6.o(.constdata)
 <LI><a href="#[c3]">ZigCom_ComInit</a> from zigcom_task.o(i.ZigCom_ComInit) referenced from zigcom_task.o(.constdata)
 <LI><a href="#[c4]">ZigCom_ComRead</a> from zigcom_task.o(i.ZigCom_ComRead) referenced from zigcom_task.o(.constdata)
 <LI><a href="#[c5]">ZigCom_ComWrite</a> from zigcom_task.o(i.ZigCom_ComWrite) referenced from zigcom_task.o(.constdata)
 <LI><a href="#[b7]">ZigRetSend</a> from zigcom_task.o(i.ZigRetSend) referenced from zigcom_task.o(i.ZigCom_Analysis)
 <LI><a href="#[c7]">Zigbee_GpioResetOff</a> from gpio.o(i.Zigbee_GpioResetOff) referenced from zigcom_task.o(.constdata)
 <LI><a href="#[c6]">Zigbee_GpioResetOn</a> from gpio.o(i.Zigbee_GpioResetOn) referenced from zigcom_task.o(.constdata)
 <LI><a href="#[da]">__main</a> from __main.o(!!!main) referenced from startup_hc32f46x.o(.text)
 <LI><a href="#[a5]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[a6]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[a4]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[a7]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[a3]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[a2]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[a8]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced 2 times from malloc.o(.data)
 <LI><a href="#[5]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced 2 times from malloc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[da]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[db]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[dd]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[494]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[495]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[496]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[497]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[498]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[de]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[100]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[e0]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e2]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[499]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[f0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[49a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[49b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[49c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[49d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[49e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[49f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4a0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[4a1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[4a2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[4a3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[4a4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[4a5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[4a6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[4a7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[4a8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[4a9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[4aa]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[4ab]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[4ac]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[4ad]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[f5]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[4ae]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[4af]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[4b0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[4b1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[4b2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[4b3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4b4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[4b5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[dc]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4b6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ed]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ef]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4b7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[f1]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; UserParam_Init &rArr; DrillStateRecovery &rArr; AssignStateFromBuffer &rArr; DayModeHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4b8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[122]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f4]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[4b9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f6]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[18c]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorseLevelBlood
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReliefBlood
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryBloodByExplodePart
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SlightHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SevereHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ModerateHandle
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_CriticalHandle
</UL>

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ030_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ030_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ031_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ032_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ033_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ034_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ035_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ036_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ037_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ038_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ039_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ040_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ041_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ042_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ043_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ044_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ045_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ046_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ047_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ048_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ049_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ050_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ051_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ052_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ053_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ054_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ055_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ056_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ057_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ058_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ059_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ060_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ061_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ062_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ063_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ064_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ065_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ066_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ067_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ068_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ069_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ070_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ071_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ072_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ073_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ074_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ075_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ076_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ077_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ078_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ079_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ080_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ081_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ082_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ083_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ084_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ085_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ086_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ087_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ088_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ089_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ090_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ091_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ092_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ093_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ094_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ095_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ096_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ097_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ098_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ099_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ100_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ101_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ102_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ103_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ104_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ105_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ106_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ107_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ108_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ109_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ110_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ111_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ112_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ113_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ114_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ115_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ116_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ117_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ118_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ119_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ120_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ121_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ122_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ123_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ124_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ125_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ126_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ127_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ128_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ129_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ130_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ131_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ132_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ136_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ137_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ138_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ139_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ140_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ141_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ142_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ143_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3dd]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>

<P><STRONG><a name="[4ba]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UnUpLoadEvtNum
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UctTime
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_PosPic
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Location
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ID
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Damage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_FourGParam_Set
</UL>

<P><STRONG><a name="[114]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[115]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[e1]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[fb]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[e3]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[fc]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[fd]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[fe]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[101]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GNRMC_Analysis
</UL>

<P><STRONG><a name="[103]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[105]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_FindNMEA0183String
</UL>

<P><STRONG><a name="[109]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorseLevelBlood
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SlightHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SevereHandle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ModerateHandle
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_CriticalHandle
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRand
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[e7]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[24c]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_FindNMEA0183String
</UL>

<P><STRONG><a name="[17d]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SetParam
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[26d]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UnUpLoadEvtNum
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UctTime
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_PosPic
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Location
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ID
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Damage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
</UL>

<P><STRONG><a name="[387]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GNRMC_Analysis
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_ComRead
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text1Show
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text0Show
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_ComRead
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_ComRead
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_SetSlaverParam
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_RetransmissionData
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_RetransmissionData
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetRunMode
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Process
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_Interrupt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUpload_Send
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullConditionRecovery
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUpload_Send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUpload_Send
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToManoEventUpload_Send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtUpload_Send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUpload_Send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Ir_Rcv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38Com_Read
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_SetSelfAddr
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Send
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComRead
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_SetDevMac
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLastUpdateFrame
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_SendToUpcom
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_MakeSendFrame
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_SendToHelmet
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_BroadCast
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetWMac
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizeState
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_InjuryWorseEventUpload_Send
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUpload_Send
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUpload_Send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelLayMineEventUpload_Send
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelClearMineEventUpload_Send
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonDigitIndirectLanuchEventUpload_Send
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCB_InjuryEventUpload_Send
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange_Reset
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponInfoRet
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SetParam
</UL>

<P><STRONG><a name="[10a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4bb]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_ComInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_ComInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_ComInit
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventNoRspRestore
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullConditionRecovery
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupDrillState
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSet
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNHelicopterVoiceCtrl
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComConfiguration
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemapHurtPart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetSlaverMag
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_FourGParam_Set
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ManoParam_Set
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[4bc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4bd]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_SetDefaultValue
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetRunMode
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainModeInit
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange_Reset
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponInfoRet
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Rcv_Init
</UL>

<P><STRONG><a name="[10e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[10d]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_ComInit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi268b_LowLevelInit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenSleepHandle
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenDayOrNightHandle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text1Show
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text0Show
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_CheckOnline
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_BarShow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_BUTTONShow
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_ComInit
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UnUpLoadEvtNum
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UctTime
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_PosPic
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Location
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ID
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Damage
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_LowLevelInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_ComInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetDefaultValue
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_RetransmissionData
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_MagInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaLed_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mano_Start_Judge
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventNoRspRestore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayOrNight_Judge
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_Init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuSupply
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalPowerOffHandle
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUpload_Send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUpload_Send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUpload_Send
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToManoEventUpload_Send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtUpload_Send
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSupplement
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSet
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUpload_Send
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudge
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComInit
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalProcess
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_Ret
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_LL_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_LL_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainModeInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_InjuryWorseEventUpload_Send
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUpload_Send
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUpload_Send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelLayMineEventUpload_Send
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelClearMineEventUpload_Send
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonDigitIndirectLanuchEventUpload_Send
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GNRMC_Analysis
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCB_InjuryEventUpload_Send
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBT_DamageCheck
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Send
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MedicalAidCheck
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ManoParam_Set
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_LowLevelInit
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SetParam
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Init
</UL>

<P><STRONG><a name="[4bf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[110]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mano_Start_Judge
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayOrNight_Judge
</UL>

<P><STRONG><a name="[4c1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4c2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4c3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[4c4]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[4c5]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[113]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[fa]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4c6]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f9]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[a2]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[102]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[a3]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[4c7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[11b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a8]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[11f]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[117]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ee]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f3]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[47c]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[f7]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[4c9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4cb]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[124]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[123]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[125]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[126]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[119]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11a]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[127]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[138]"></a>ADC_AddAdcChannel</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hc32f46x_adc.o(i.ADC_AddAdcChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_AddAdcChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[139]"></a>ADC_AddAvgChannel</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hc32f46x_adc.o(i.ADC_AddAvgChannel))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[136]"></a>ADC_ConfigAvg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_adc.o(i.ADC_ConfigAvg))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[12a]"></a>ADC_GetChData</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hc32f46x_adc.o(i.ADC_GetChData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_GetChData
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollingSa
</UL>

<P><STRONG><a name="[135]"></a>ADC_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hc32f46x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[128]"></a>ADC_PollingSa</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, hc32f46x_adc.o(i.ADC_PollingSa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_PollingSa &rArr; ADC_GetChData
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadAllData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSample
</UL>

<P><STRONG><a name="[12b]"></a>AccessRequest_Send</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, rescom_task.o(i.AccessRequest_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AccessRequest_Send &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[132]"></a>AdcConfig</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, adc.o(i.AdcConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AdcConfig &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPeriClkSource
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigAvg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAvgChannel
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAdcChannel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatHwInit
</UL>

<P><STRONG><a name="[13c]"></a>AgaistRuleStartEventData_Spell</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, main_task.o(i.AgaistRuleStartEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
</UL>

<P><STRONG><a name="[13a]"></a>AgaistRuleStartEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.AgaistRuleStartEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveStartUploadHandle
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatStartUploadHandle
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatStartUploadHandle
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStartUpload
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectorCheatUploadHandle
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatStartUploadHandle
</UL>

<P><STRONG><a name="[141]"></a>AgaistRuleStopEventData_Spell</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main_task.o(i.AgaistRuleStopEventData_Spell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AgaistRuleStopEventData_Spell
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
</UL>

<P><STRONG><a name="[140]"></a>AgaistRuleStopEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.AgaistRuleStopEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = AgaistRuleStopEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveEndUploadHandle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatEndUploadHandle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatEndUploadHandle
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStopUpload
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatEndUploadHandle
</UL>

<P><STRONG><a name="[142]"></a>AppPowerOffHandle</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, main_task.o(i.AppPowerOffHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AppPowerOffHandle &rArr; UserParam_Save &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Sound
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_Off
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[14a]"></a>AppPowerOnOffInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main_task.o(i.AppPowerOnOffInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AppPowerOnOffInit &rArr; PwrKey_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrKey_GpioInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>AppPowerOnOffTimedProcess</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main_task.o(i.AppPowerOnOffTimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AppPowerOnOffTimedProcess &rArr; Is_PwrKeyOn
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_PwrKeyOn
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[14f]"></a>AssignStateFromBuffer</STRONG> (Thumb, 1126 bytes, Stack size 48 bytes, main_task.o(i.AssignStateFromBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AssignStateFromBuffer &rArr; DayModeHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetTSubType
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnUpLoadEvtNumCalcu
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayModeHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_CtrlLedOn
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetKey
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetDayOrNight
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBlood
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBRChar
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetActLaserCnt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeHandle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateRecovery
</UL>

<P><STRONG><a name="[15d]"></a>BNHelicopterVoiceCtrl</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, main_task.o(i.BNHelicopterVoiceCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BNHelicopterVoiceCtrl &rArr; BNHelicopterVoiceCtrlHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNHelicopterVoiceCtrlHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordRcvBackStageProtocolTime
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[15f]"></a>BNHelicopterVoiceCtrlHandle</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main_task.o(i.BNHelicopterVoiceCtrlHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BNHelicopterVoiceCtrlHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNHelicopterVoiceCtrl
</UL>

<P><STRONG><a name="[160]"></a>BNIndirectAim</STRONG> (Thumb, 384 bytes, Stack size 104 bytes, main_task.o(i.BNIndirectAim))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = BNIndirectAim &rArr; DamageReportEventUploadHandle &rArr; DamageReportEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBulletUniID
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUploadHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_GetInjury
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryBloodByHurtDegree
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseMapHurtPart
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordRcvBackStageProtocolTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[167]"></a>BNInjuryWorseHandle</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main_task.o(i.BNInjuryWorseHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = BNInjuryWorseHandle &rArr; RSP_InjuryWorseEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_InjuryWorseEventUpload_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MedicalAidCheck
</UL>

<P><STRONG><a name="[16a]"></a>BNIntervalSet</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, main_task.o(i.BNIntervalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = BNIntervalSet &rArr; RSP_CtrlIntervalEventUploadHandle &rArr; RSP_CtrlIntervalEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIntervalSetHandle
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDrillState
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordRcvBackStageProtocolTime
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUploadHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[16b]"></a>BNIntervalSetHandle</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, main_task.o(i.BNIntervalSetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BNIntervalSetHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIntervalSet
</UL>

<P><STRONG><a name="[16e]"></a>BNJudge</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, main_task.o(i.BNJudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = BNJudge &rArr; BackStageJudgeHandle &rArr; ManoStartHandle &rArr; ChangeToManoEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUploadHandle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordRcvBackStageProtocolTime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[172]"></a>BNJudgeEventData_Spell</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main_task.o(i.BNJudgeEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUpload_Send
</UL>

<P><STRONG><a name="[170]"></a>BNJudgeEventUploadHandle</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, main_task.o(i.BNJudgeEventUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = BNJudgeEventUploadHandle &rArr; BNJudgeEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudge
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[171]"></a>BNJudgeEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.BNJudgeEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = BNJudgeEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUploadHandle
</UL>

<P><STRONG><a name="[173]"></a>BNNCBT</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, main_task.o(i.BNNCBT))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = BNNCBT &rArr; NCBTEventUpload_Handle &rArr; NCBTEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEvent_Handle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[1ab]"></a>BNResponce</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, main_task.o(i.BNResponce))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BNResponce
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[176]"></a>BNSetTerminalTypeHandle</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, main_task.o(i.BNSetTerminalTypeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BNSetTerminalTypeHandle &rArr; IDParam_Save &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetTSubType
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetRid
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetPid
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Save
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[17a]"></a>BNSoldierManoParamSet</STRONG> (Thumb, 602 bytes, Stack size 864 bytes, main_task.o(i.BNSoldierManoParamSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = BNSoldierManoParamSet &rArr; CtrlManoParamEventUploadHandle &rArr; CtrlManoParamEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUploadHandle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordRcvBackStageProtocolTime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[17b]"></a>BNSoldierManoParamSetHandle</STRONG> (Thumb, 502 bytes, Stack size 200 bytes, main_task.o(i.BNSoldierManoParamSetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = BNSoldierManoParamSetHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Save
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetTSubType
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShell
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetSlaverMag
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetKey
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBRChar
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDrillState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSet
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ManoParam_Set
</UL>

<P><STRONG><a name="[183]"></a>BNSupplement</STRONG> (Thumb, 308 bytes, Stack size 96 bytes, main_task.o(i.BNSupplement))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = BNSupplement &rArr; RSP_CtrlSupplementEventUploadHandle &rArr; RSP_CtrlSupplementEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSupplementHandle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordRcvBackStageProtocolTime
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUploadHandle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[184]"></a>BNSupplementHandle</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, main_task.o(i.BNSupplementHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = BNSupplementHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWeaponNum
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyNum
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSupplement
</UL>

<P><STRONG><a name="[188]"></a>BNTerminalParamHandle</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, main_task.o(i.BNTerminalParamHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BNTerminalParamHandle &rArr; SaveDrillState &rArr; BackupDrillState &rArr; DrillStateWriteToOutFlash &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_NightSound
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_DaySound
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDrillState
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[18b]"></a>BSN_Judge_CriticalHandle</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, main_task.o(i.BSN_Judge_CriticalHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BSN_Judge_CriticalHandle &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[18d]"></a>BSN_Judge_DeathHandle</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, main_task.o(i.BSN_Judge_DeathHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BSN_Judge_DeathHandle &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBlood
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[18f]"></a>BSN_Judge_InvalidHandle</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main_task.o(i.BSN_Judge_InvalidHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BSN_Judge_InvalidHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetTsChar1
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[192]"></a>BSN_Judge_ModerateHandle</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, main_task.o(i.BSN_Judge_ModerateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BSN_Judge_ModerateHandle &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[193]"></a>BSN_Judge_NCBHandle</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, main_task.o(i.BSN_Judge_NCBHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = BSN_Judge_NCBHandle &rArr; NCB_InjuryEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRand
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBlood
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCB_InjuryEventUpload_Send
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[196]"></a>BSN_Judge_ReliefHandle</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, main_task.o(i.BSN_Judge_ReliefHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BSN_Judge_ReliefHandle &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReliefBlood
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[198]"></a>BSN_Judge_RestartHandle</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, main_task.o(i.BSN_Judge_RestartHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BSN_Judge_RestartHandle &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[199]"></a>BSN_Judge_ReviveHandle</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, main_task.o(i.BSN_Judge_ReviveHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BSN_Judge_ReviveHandle &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBlood
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[19a]"></a>BSN_Judge_SevereHandle</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, main_task.o(i.BSN_Judge_SevereHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BSN_Judge_SevereHandle &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[19b]"></a>BSN_Judge_SlightHandle</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, main_task.o(i.BSN_Judge_SlightHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BSN_Judge_SlightHandle &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[19c]"></a>BSN_Judge_ToBlueHandle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main_task.o(i.BSN_Judge_ToBlueHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSN_Judge_ToBlueHandle &rArr; Motor_On &rArr; Motor_IsSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBRChar
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[19d]"></a>BSN_Judge_ToRedHandle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main_task.o(i.BSN_Judge_ToRedHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSN_Judge_ToRedHandle &rArr; Motor_On &rArr; Motor_IsSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBRChar
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[19e]"></a>BSN_Judge_TolastHandle</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, main_task.o(i.BSN_Judge_TolastHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSN_Judge_TolastHandle &rArr; InterConn_ProtDeal_Slaver_AmmuSupply &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupply
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[1a1]"></a>BSN_Judge_WorseHandle</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, main_task.o(i.BSN_Judge_WorseHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BSN_Judge_WorseHandle &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorseLevelBlood
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[1a5]"></a>BSN_RescureEvtData_Spell</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, main_task.o(i.BSN_RescureEvtData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtUpload_Send
</UL>

<P><STRONG><a name="[1a3]"></a>BSN_RescureEvtHandle</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, main_task.o(i.BSN_RescureEvtHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = BSN_RescureEvtHandle &rArr; BSN_RescureEvtUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[1a4]"></a>BSN_RescureEvtUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.BSN_RescureEvtUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = BSN_RescureEvtUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtHandle
</UL>

<P><STRONG><a name="[1a6]"></a>BackStageFactoryDebug</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main_task.o(i.BackStageFactoryDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BackStageFactoryDebug &rArr; HardCtrl_Slaver_PowerOff &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_Slaver_PowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[16f]"></a>BackStageJudgeHandle</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, main_task.o(i.BackStageJudgeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = BackStageJudgeHandle &rArr; ManoStartHandle &rArr; ChangeToManoEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayModeHandle
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_WorseHandle
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_TolastHandle
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ToRedHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ToBlueHandle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SlightHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SevereHandle
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ReviveHandle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_RestartHandle
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ReliefHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ModerateHandle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_InvalidHandle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_DeathHandle
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_CriticalHandle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_NightSound
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_DaySound
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDrillState
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeHandle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudge
</UL>

<P><STRONG><a name="[1aa]"></a>BackStageNewAnalysis</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main_task.o(i.BackStageNewAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = BackStageNewAnalysis &rArr; BNSoldierManoParamSet &rArr; CtrlManoParamEventUploadHandle &rArr; CtrlManoParamEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNTerminalParamHandle
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSupplement
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSet
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSetTerminalTypeHandle
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNResponce
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNNCBT
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudge
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIntervalSet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIndirectAim
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNHelicopterVoiceCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[3c9]"></a>BackStage_Frame_Parse</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main_task.o(i.BackStage_Frame_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BackStage_Frame_Parse
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[1ad]"></a>Backstage_ProtocalParse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.Backstage_ProtocalParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Backstage_ProtocalParse &rArr; Protocol_FindC1XORFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_FindC1XORFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[1af]"></a>BackupDrillState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main_task.o(i.BackupDrillState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BackupDrillState &rArr; DrillStateWriteToOutFlash &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateWriteToOutFlash
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateParamHandle
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDrillState
</UL>

<P><STRONG><a name="[1b1]"></a>BatHwInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, battery_task.o(i.BatHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BatHwInit &rArr; AdcConfig &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_Init
</UL>

<P><STRONG><a name="[1b2]"></a>BatSample</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, battery_task.o(i.BatSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BatSample &rArr; ADC_PollingSa &rArr; ADC_GetChData
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollingSa
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_Process
</UL>

<P><STRONG><a name="[1b3]"></a>BatTask_GetExBatRes</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, battery_task.o(i.BatTask_GetExBatRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BatTask_GetExBatRes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatRemainingCapacity_18650
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_GetExBatVol
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Battery
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_Process
</UL>

<P><STRONG><a name="[1b4]"></a>BatTask_GetExBatVol</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery_task.o(i.BatTask_GetExBatVol))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableChangeBatHandle
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_GetExBatRes
</UL>

<P><STRONG><a name="[1b6]"></a>BatTask_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, battery_task.o(i.BatTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BatTask_Init &rArr; BatHwInit &rArr; AdcConfig &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_SetFactor
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatHwInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>BatTask_Process</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, battery_task.o(i.BatTask_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BatTask_Process &rArr; Bat_GetExBatValue &rArr; Bat_GetADCChannelValue &rArr; Bubble_Sort_U16
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryReplacementTask
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetExBatValue
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_GetExBatRes
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSample
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>BatTask_SetFactor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery_task.o(i.BatTask_SetFactor))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_Init
</UL>

<P><STRONG><a name="[1bb]"></a>Bat_GetADCChannelValue</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, battery_task.o(i.Bat_GetADCChannelValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Bat_GetADCChannelValue &rArr; Bubble_Sort_U16
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_GetU16Sum
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bubble_Sort_U16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetExBatValue
</UL>

<P><STRONG><a name="[1b9]"></a>Bat_GetExBatValue</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, battery_task.o(i.Bat_GetExBatValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Bat_GetExBatValue &rArr; Bat_GetADCChannelValue &rArr; Bubble_Sort_U16
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetADCChannelValue
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_Process
</UL>

<P><STRONG><a name="[1ba]"></a>BatteryReplacementTask</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, main_task.o(i.BatteryReplacementTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BatteryReplacementTask &rArr; Led_SetRunMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetRunMode
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_HandleGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_Process
</UL>

<P><STRONG><a name="[1cc]"></a>Beep_AddDelayTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, beep.o(i.Beep_AddDelayTime))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
</UL>

<P><STRONG><a name="[b8]"></a>Beep_GpioInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i.Beep_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Beep_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>Beep_GpioOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.Beep_GpioOff))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>Beep_GpioOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.Beep_GpioOn))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>Beep_GpioToggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.Beep_GpioToggle))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>Beep_Init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, main_task.o(i.Beep_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Beep_Init &rArr; Beep_LL_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[1cb]"></a>Beep_IsSuspend</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, beep.o(i.Beep_IsSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Beep_IsSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_TimedProcess
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
</UL>

<P><STRONG><a name="[1c8]"></a>Beep_LL_Init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, beep.o(i.Beep_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Beep_LL_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Suspend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Init
</UL>

<P><STRONG><a name="[1ca]"></a>Beep_On</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, beep.o(i.Beep_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Beep_On &rArr; Beep_IsSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_SetDelayTime
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Recovery
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_IsSuspend
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_AddDelayTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalPowerOffHandle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TesModeHandle
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SetUpVariousElements
</UL>

<P><STRONG><a name="[1cd]"></a>Beep_Recovery</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, beep.o(i.Beep_Recovery))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
</UL>

<P><STRONG><a name="[1ce]"></a>Beep_SetDelayTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, beep.o(i.Beep_SetDelayTime))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
</UL>

<P><STRONG><a name="[1c9]"></a>Beep_Suspend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, beep.o(i.Beep_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_TimedProcess
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_LL_Init
</UL>

<P><STRONG><a name="[1cf]"></a>Beep_TimedProcess</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, beep.o(i.Beep_TimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Beep_TimedProcess &rArr; Beep_IsSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Suspend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_IsSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[1d0]"></a>BoardInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.BoardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = BoardInit &rArr; Mpu6050_Init &rArr; mpu_dmp_init &rArr; mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_byg_sMpu6050Mag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_2_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaLed_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnOffInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>Bubble_Sort_U16</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, sort.o(i.Bubble_Sort_U16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bubble_Sort_U16
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetADCChannelValue
</UL>

<P><STRONG><a name="[1da]"></a>CLK_GetFlagStatus</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[1d9]"></a>CLK_HrcCmd</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, hc32f46x_clk.o(i.CLK_HrcCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_HrcCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[1db]"></a>CLK_MpllCmd</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, hc32f46x_clk.o(i.CLK_MpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_MpllCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[3e7]"></a>CLK_MpllConfig</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_MpllConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[133]"></a>CLK_SetPeriClkSource</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPeriClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[3e6]"></a>CLK_SetPllSource</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPllSource))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[1dc]"></a>CLK_SetSysClkSource</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, hc32f46x_clk.o(i.CLK_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[3e5]"></a>CLK_SysClkConfig</STRONG> (Thumb, 190 bytes, Stack size 36 bytes, hc32f46x_clk.o(i.CLK_SysClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_SysClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[1de]"></a>Cap_Timer_Close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir.o(i.Cap_Timer_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cap_Timer_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Rcv_Handle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Rcv_Edge_Handle
</UL>

<P><STRONG><a name="[1e1]"></a>Cap_Timer_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir.o(i.Cap_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cap_Timer_Init &rArr; Timera3_Config &rArr; TIMERA_IrqCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Rcv_Init
</UL>

<P><STRONG><a name="[1e3]"></a>Cap_Timer_Open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir.o(i.Cap_Timer_Open))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Rcv_Edge_Handle
</UL>

<P><STRONG><a name="[1e4]"></a>Cap_Timer_Zero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir.o(i.Cap_Timer_Zero))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_SetCurrCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Rcv_Handle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Rcv_Edge_Handle
</UL>

<P><STRONG><a name="[1e6]"></a>Carwave_Timer_Close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir.o(i.Carwave_Timer_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Carwave_Timer_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_High
</UL>

<P><STRONG><a name="[1e7]"></a>Carwave_Timer_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir.o(i.Carwave_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Carwave_Timer_Init &rArr; Timera2_Config &rArr; TIMERA_IrqCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Tx_Init
</UL>

<P><STRONG><a name="[1e9]"></a>Carwave_Timer_Open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir.o(i.Carwave_Timer_Open))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Low
</UL>

<P><STRONG><a name="[1eb]"></a>ChangeToManoEventData_Spell</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main_task.o(i.ChangeToManoEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToManoEventUpload_Send
</UL>

<P><STRONG><a name="[1ea]"></a>ChangeToManoEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.ChangeToManoEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ChangeToManoEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToManoEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
</UL>

<P><STRONG><a name="[1ec]"></a>CollateralDamage</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, main_task.o(i.CollateralDamage))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CollateralDamage &rArr; ZigComTask_BroadCast &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_BroadCast
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle_Master
</UL>

<P><STRONG><a name="[1f0]"></a>ComTask_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, comtask.o(i.ComTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ComTask_Init &rArr; LinkQueue_Create &rArr; LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Init
</UL>

<P><STRONG><a name="[1f2]"></a>ComTask_RetransmissionData</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, comtask.o(i.ComTask_RetransmissionData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ComTask_RetransmissionData &rArr; LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_48k
</UL>

<P><STRONG><a name="[1f4]"></a>CoreInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(i.CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = CoreInit &rArr; SysParam_Init &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_SetDevTType
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_SetDevTSubType
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_SetDevRID
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_SetDevPID
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_MagInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerInit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVICSELRegister0_127
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[203]"></a>CtrlHelmetFume</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, main_task.o(i.CtrlHelmetFume))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_HelmetBase
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathHandle
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_Fume
</UL>

<P><STRONG><a name="[205]"></a>CtrlHelmetLaserOff</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main_task.o(i.CtrlHelmetLaserOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CtrlHelmetLaserOff &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_HelmetBase
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReviveHandle
</UL>

<P><STRONG><a name="[206]"></a>CtrlHelmetLaserOn</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, main_task.o(i.CtrlHelmetLaserOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CtrlHelmetLaserOn &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_HelmetBase
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathHandle
</UL>

<P><STRONG><a name="[207]"></a>CtrlHelmetLaserOnOff</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main_task.o(i.CtrlHelmetLaserOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CtrlHelmetLaserOnOff &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_HelmetBase
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_48k
</UL>

<P><STRONG><a name="[17c]"></a>CtrlManoParamEventUploadHandle</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, main_task.o(i.CtrlManoParamEventUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = CtrlManoParamEventUploadHandle &rArr; CtrlManoParamEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUpload_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSet
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ManoParam_Set
</UL>

<P><STRONG><a name="[208]"></a>CtrlManoParamEventUpload_Send</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, main_task.o(i.CtrlManoParamEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CtrlManoParamEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamIndividualSoldier_EventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUploadHandle
</UL>

<P><STRONG><a name="[209]"></a>CtrlManoParamIndividualSoldier_EventData_Spell</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, main_task.o(i.CtrlManoParamIndividualSoldier_EventData_Spell))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CtrlManoParamIndividualSoldier_EventData_Spell
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUpload_Send
</UL>

<P><STRONG><a name="[20c]"></a>DMA_ChannelCfg</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_ChannelCfg))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
</UL>

<P><STRONG><a name="[40c]"></a>DMA_ChannelCmd</STRONG> (Thumb, 322 bytes, Stack size 28 bytes, hc32f46x_dmac.o(i.DMA_ChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[40d]"></a>DMA_ClearIrqFlag</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, hc32f46x_dmac.o(i.DMA_ClearIrqFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_ClearIrqFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[20b]"></a>DMA_Cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[40f]"></a>DMA_EnableIrq</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, hc32f46x_dmac.o(i.DMA_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[20a]"></a>DMA_InitChannel</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, hc32f46x_dmac.o(i.DMA_InitChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_InitChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[419]"></a>DMA_SetDesAddress</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, hc32f46x_dmac.o(i.DMA_SetDesAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetDesAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>

<P><STRONG><a name="[416]"></a>DMA_SetSrcAddress</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, hc32f46x_dmac.o(i.DMA_SetSrcAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetSrcAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
</UL>

<P><STRONG><a name="[415]"></a>DMA_SetTransferCnt</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, hc32f46x_dmac.o(i.DMA_SetTransferCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetTransferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
</UL>

<P><STRONG><a name="[40e]"></a>DMA_SetTriggerSrc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hc32f46x_dmac.o(i.DMA_SetTriggerSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetTriggerSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[20e]"></a>DamageReportEventData_Spell</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, main_task.o(i.DamageReportEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUpload_Send
</UL>

<P><STRONG><a name="[166]"></a>DamageReportEventUploadHandle</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, main_task.o(i.DamageReportEventUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = DamageReportEventUploadHandle &rArr; DamageReportEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle_Master
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIndirectAim
</UL>

<P><STRONG><a name="[20d]"></a>DamageReportEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.DamageReportEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = DamageReportEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUploadHandle
</UL>

<P><STRONG><a name="[158]"></a>DayModeHandle</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main_task.o(i.DayModeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DayModeHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_DaySound
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetBrightness
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayOrNight_Judge
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[210]"></a>DayOrNight_Judge</STRONG> (Thumb, 176 bytes, Stack size 152 bytes, main_task.o(i.DayOrNight_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = DayOrNight_Judge &rArr; DayModeHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayModeHandle
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeHandle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[211]"></a>DeathHandle</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main_task.o(i.DeathHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathRecord
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHelmetLaserOn
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHelmetFume
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_Status
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_AllOn
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetTsChar1
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>

<P><STRONG><a name="[214]"></a>DeathRecord</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, main_task.o(i.DeathRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DeathRecord &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathHandle
</UL>

<P><STRONG><a name="[219]"></a>DectorCheatHandle</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lasercom_task.o(i.DectorCheatHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = DectorCheatHandle &rArr; DectorCheatUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectorCheatUploadHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_TimedProcess
</UL>

<P><STRONG><a name="[21a]"></a>DectorCheatUploadHandle</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main_task.o(i.DectorCheatUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = DectorCheatUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectorCheatHandle
</UL>

<P><STRONG><a name="[1f8]"></a>Delay_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.Delay_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[147]"></a>Delay_Ms</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timer.o(i.Delay_Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOffHandle
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[21b]"></a>DetectorLossEvtStartUpload</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main_task.o(i.DetectorLossEvtStartUpload))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = DetectorLossEvtStartUpload &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossHandle
</UL>

<P><STRONG><a name="[21c]"></a>DetectorLossEvtStopUpload</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, main_task.o(i.DetectorLossEvtStopUpload))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = DetectorLossEvtStopUpload &rArr; AgaistRuleStopEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossHandle
</UL>

<P><STRONG><a name="[21d]"></a>DetectorLossHandle</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, main_task.o(i.DetectorLossHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = DetectorLossHandle &rArr; DetectorLossEvtStopUpload &rArr; AgaistRuleStopEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_HandleGet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStopUpload
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStartUpload
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt1
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalEventHandle
</UL>

<P><STRONG><a name="[221]"></a>Detector_Led_AllOff</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lasercom_task.o(i.Detector_Led_AllOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Detector_Led_AllOff &rArr; LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_HandleGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReviveHandle
</UL>

<P><STRONG><a name="[213]"></a>Detector_Led_AllOn</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lasercom_task.o(i.Detector_Led_AllOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Detector_Led_AllOn &rArr; LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_HandleGet
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathHandle
</UL>

<P><STRONG><a name="[222]"></a>Detector_Led_Proc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lasercom_task.o(i.Detector_Led_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Detector_Led_Proc &rArr; LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_TimedProcess
</UL>

<P><STRONG><a name="[224]"></a>DigitIndirectLanuchEventData_Spell</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, main_task.o(i.DigitIndirectLanuchEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
</UL>

<P><STRONG><a name="[223]"></a>DigitIndirectLanuchEventUpload_Send</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, main_task.o(i.DigitIndirectLanuchEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DigitIndirectLanuchEventUpload_Send &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJPShotHandle
</UL>

<P><STRONG><a name="[225]"></a>DownloadProcess_Sync</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, upgrade.o(i.DownloadProcess_Sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DownloadProcess_Sync &rArr; StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDownloadProcess
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_Ret
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalProcess
</UL>

<P><STRONG><a name="[229]"></a>DrillStateParamHandle</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main_task.o(i.DrillStateParamHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DrillStateParamHandle &rArr; BackupDrillState &rArr; DrillStateWriteToOutFlash &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupDrillState
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizeState
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[22b]"></a>DrillStateReadFromOutFlash</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main_task.o(i.DrillStateReadFromOutFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DrillStateReadFromOutFlash &rArr; IFlash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateRecovery
</UL>

<P><STRONG><a name="[22d]"></a>DrillStateRecovery</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, main_task.o(i.DrillStateRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = DrillStateRecovery &rArr; AssignStateFromBuffer &rArr; DayModeHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateReadFromOutFlash
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainModeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Init
</UL>

<P><STRONG><a name="[1b0]"></a>DrillStateWriteToOutFlash</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, main_task.o(i.DrillStateWriteToOutFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DrillStateWriteToOutFlash &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupDrillState
</UL>

<P><STRONG><a name="[231]"></a>EFM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[232]"></a>EFM_ErasePgmCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_ErasePgmCmd))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[2a9]"></a>EFM_FlashCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_FlashCmd))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
</UL>

<P><STRONG><a name="[2aa]"></a>EFM_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
</UL>

<P><STRONG><a name="[2ab]"></a>EFM_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[230]"></a>EFM_SectorErase</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, hc32f46x_efm.o(i.EFM_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EFM_SectorErase
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetErasePgmMode
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
</UL>

<P><STRONG><a name="[233]"></a>EFM_SetErasePgmMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_SetErasePgmMode))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[3e8]"></a>EFM_SetLatency</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[234]"></a>EFM_SingleProgram</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hc32f46x_efm.o(i.EFM_SingleProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFM_SingleProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetErasePgmMode
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
</UL>

<P><STRONG><a name="[2a8]"></a>EFM_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[2d3]"></a>EXINT_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hc32f46x_exint_nmi_swi.o(i.EXINT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRRcvGpioInit
</UL>

<P><STRONG><a name="[2c6]"></a>EXINT_IrqFlgClr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_exint_nmi_swi.o(i.EXINT_IrqFlgClr))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ003_Handler
</UL>

<P><STRONG><a name="[2c5]"></a>EXINT_IrqFlgGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_exint_nmi_swi.o(i.EXINT_IrqFlgGet))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ003_Handler
</UL>

<P><STRONG><a name="[23f]"></a>EXTFLASH_GetFlashSize</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, extflash.o(i.EXTFLASH_GetFlashSize))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Init
</UL>

<P><STRONG><a name="[23e]"></a>EXTFLASH_GetPageSize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, extflash.o(i.EXTFLASH_GetPageSize))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Init
</UL>

<P><STRONG><a name="[235]"></a>EnableChangeBatHandle</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, main_task.o(i.EnableChangeBatHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EnableChangeBatHandle &rArr; Wtn6_Play &rArr; Wtn6_LPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatRemainingCapacity_18650
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_GetExBatVol
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[236]"></a>EventNoRspRestore</STRONG> (Thumb, 244 bytes, Stack size 544 bytes, main_task.o(i.EventNoRspRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = EventNoRspRestore &rArr; Uart_SendBuf &rArr; Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_HandleGet
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Read
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_PageErase
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[13f]"></a>EventStorageToFlash</STRONG> (Thumb, 176 bytes, Stack size 280 bytes, main_task.o(i.EventStorageToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUpload_Send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUpload_Send
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToManoEventUpload_Send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtUpload_Send
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUpload_Send
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_InjuryWorseEventUpload_Send
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUpload_Send
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUpload_Send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelLayMineEventUpload_Send
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelClearMineEventUpload_Send
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonDigitIndirectLanuchEventUpload_Send
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCB_InjuryEventUpload_Send
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Send
</UL>

<P><STRONG><a name="[23b]"></a>ExtFlash_GetFlashCheckSum</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, extflash.o(i.ExtFlash_GetFlashCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSum
</UL>

<P><STRONG><a name="[1fa]"></a>ExtFlash_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, extflash.o(i.ExtFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ExtFlash_Init &rArr; W25QXX_Init &rArr; W25QXX_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTFLASH_GetPageSize
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTFLASH_GetFlashSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[239]"></a>ExtFlash_PageErase</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, extflash.o(i.ExtFlash_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ExtFlash_PageErase &rArr; W25QXX_Erase_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventNoRspRestore
</UL>

<P><STRONG><a name="[237]"></a>ExtFlash_Read</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, extflash.o(i.ExtFlash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventNoRspRestore
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_GetFlashCheckSum
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
</UL>

<P><STRONG><a name="[23a]"></a>ExtFlash_Write</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, extflash.o(i.ExtFlash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Page
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[243]"></a>FlashGetSum</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, upgrade.o(i.FlashGetSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_GetFlashCheckSum
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_GetFlashCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDownloadProcess
</UL>

<P><STRONG><a name="[226]"></a>FlashWrite</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, upgrade.o(i.FlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FlashWrite &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
</UL>

<P><STRONG><a name="[245]"></a>FullConditionRecovery</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, main_task.o(i.FullConditionRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FullConditionRecovery &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetTSubType
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetKey
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBlood
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBRChar
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[246]"></a>FumeCheatEndUploadHandle</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, main_task.o(i.FumeCheatEndUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = FumeCheatEndUploadHandle &rArr; AgaistRuleStopEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeInstallHandle
</UL>

<P><STRONG><a name="[247]"></a>FumeCheatStartUploadHandle</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main_task.o(i.FumeCheatStartUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = FumeCheatStartUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeInstallHandle
</UL>

<P><STRONG><a name="[248]"></a>FumeInstallHandle</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, main_task.o(i.FumeInstallHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = FumeInstallHandle &rArr; FumeCheatStartUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatStartUploadHandle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatEndUploadHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetTsChar1
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetFireInstallFlg
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBlood
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalEventHandle
</UL>

<P><STRONG><a name="[bf]"></a>Fume_GpioInit</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gpio.o(i.Fume_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Fume_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>Fume_GpioIsInstalled</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.Fume_GpioIsInstalled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fume_GpioIsInstalled
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>Fume_GpioOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.Fume_GpioOff))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>Fume_GpioOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.Fume_GpioOn))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[24b]"></a>GPS_FindNMEA0183String</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, main_task.o(i.GPS_FindNMEA0183String))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GPS_FindNMEA0183String &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[24d]"></a>GaussProjCal</STRONG> (Thumb, 1566 bytes, Stack size 128 bytes, hmicom_task.o(i.GaussProjCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GaussProjCal &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Location
</UL>

<P><STRONG><a name="[255]"></a>GetAllSlavesConnectStatus</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, main_task.o(i.GetAllSlavesConnectStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetAllSlavesConnectStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConnectRet
</UL>

<P><STRONG><a name="[1b5]"></a>GetBatRemainingCapacity_18650</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, battery_task.o(i.GetBatRemainingCapacity_18650))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableChangeBatHandle
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_GetExBatRes
</UL>

<P><STRONG><a name="[256]"></a>GetBloodLossFrequency</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main_task.o(i.GetBloodLossFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBloodLossFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MedicalAidCheck
</UL>

<P><STRONG><a name="[162]"></a>GetBulletUniID</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, main_task.o(i.GetBulletUniID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetBulletUniID
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIndirectAim
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[410]"></a>GetComIndex</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart.o(i.GetComIndex))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[28d]"></a>GetDTRssi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_task.o(i.GetDTRssi))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
</UL>

<P><STRONG><a name="[351]"></a>GetDirectWeaponDamage</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main_task.o(i.GetDirectWeaponDamage))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle_Master
</UL>

<P><STRONG><a name="[257]"></a>GetDistance</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, main_task.o(i.GetDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GetDistance &rArr; get_distance &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionLon
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionLat
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BroadcastBeacon
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[26f]"></a>GetEnemyWeaponTypeStrig</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, hmicom_task.o(i.GetEnemyWeaponTypeStrig))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
</UL>

<P><STRONG><a name="[315]"></a>GetExplodeMineAtypeASubtype</STRONG> (Thumb, 72 bytes, Stack size 28 bytes, main_task.o(i.GetExplodeMineAtypeASubtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetExplodeMineAtypeASubtype
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
</UL>

<P><STRONG><a name="[25c]"></a>GetHardSta1</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main_task.o(i.GetHardSta1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetHardSta1
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_TaskHandleGet
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_TaskHandleGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
</UL>

<P><STRONG><a name="[25f]"></a>GetHardSta2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main_task.o(i.GetHardSta2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetHardSta2
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_HandleGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
</UL>

<P><STRONG><a name="[261]"></a>GetHardSta3</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main_task.o(i.GetHardSta3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetHardSta3
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_byg_sMpu6050Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
</UL>

<P><STRONG><a name="[28c]"></a>GetHardSta4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_task.o(i.GetHardSta4))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
</UL>

<P><STRONG><a name="[274]"></a>GetHurtPic</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hmicom_task.o(i.GetHurtPic))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_HelmetConnect
</UL>

<P><STRONG><a name="[2a4]"></a>GetIFlashCheckSum_U32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iflash.o(i.GetIFlashCheckSum_U32))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Save
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Save
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Save
</UL>

<P><STRONG><a name="[262]"></a>GetInjuryBloodByExplodePart</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, main_task.o(i.GetInjuryBloodByExplodePart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetInjuryBloodByExplodePart &rArr; SetRand &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
</UL>

<P><STRONG><a name="[161]"></a>GetInjuryBloodByHurtDegree</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, rescom_task.o(i.GetInjuryBloodByHurtDegree))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIndirectAim
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>

<P><STRONG><a name="[168]"></a>GetInjuryDegree</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, rescom_task.o(i.GetInjuryDegree))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BroadcastBeacon
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveStartUploadHandle
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveEndUploadHandle
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatStartUploadHandle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatEndUploadHandle
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUploadHandle
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBloodLossFrequency
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatStartUploadHandle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatEndUploadHandle
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStopUpload
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStartUpload
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectorCheatUploadHandle
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUploadHandle
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUploadHandle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNInjuryWorseHandle
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemapHurtPart
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUploadHandle
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJPShotHandle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Handle
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineSetHandle
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineClearanceHandle
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatStartUploadHandle
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatEndUploadHandle
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>

<P><STRONG><a name="[271]"></a>GetInjuryPic</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hmicom_task.o(i.GetInjuryPic))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Damage
</UL>

<P><STRONG><a name="[26c]"></a>GetOwnBulletTypeString</STRONG> (Thumb, 252 bytes, Stack size 12 bytes, hmicom_task.o(i.GetOwnBulletTypeString))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetOwnBulletTypeString
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
</UL>

<P><STRONG><a name="[25a]"></a>GetPositionLat</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, main_task.o(i.GetPositionLat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetPositionLat &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
</UL>

<P><STRONG><a name="[259]"></a>GetPositionLon</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, main_task.o(i.GetPositionLon))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetPositionLon &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
</UL>

<P><STRONG><a name="[3bb]"></a>GetProtAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocal.o(i.GetProtAddr))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_SendToUpcom
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_SendToHelmet
</UL>

<P><STRONG><a name="[197]"></a>GetReliefBlood</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, main_task.o(i.GetReliefBlood))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetReliefBlood &rArr; SetRand &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ReliefHandle
</UL>

<P><STRONG><a name="[263]"></a>GetSlaverStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main_task.o(i.GetSlaverStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetSlaverStatus &rArr; InterConn_HelmetStaGet &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HelmetStaGet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverStaGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_TimedProcess
</UL>

<P><STRONG><a name="[13e]"></a>GetSysRunMilliSecond</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(i.GetSysRunMilliSecond))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenSleepHandle
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_TimedProcess
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_TimedProcess
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Process
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Process
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_Process
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_HelmetStatusRet
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUpload_Send
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUpload_Send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUpload_Send
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToManoEventUpload_Send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtUpload_Send
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSupplement
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSet
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNNCBT
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUpload_Send
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudge
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIntervalSet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIndirectAim
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNHelicopterVoiceCtrl
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_InjuryWorseEventUpload_Send
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUpload_Send
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUpload_Send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelLayMineEventUpload_Send
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelClearMineEventUpload_Send
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonDigitIndirectLanuchEventUpload_Send
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCB_InjuryEventUpload_Send
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Send
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Protocol_Process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponShootingInquire
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponLockRet
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponInfoRet
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Poweron
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Lightweapon_AmmuInfoSync
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Heavyweapon_AmmuInfoSync
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyRet
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverStatusRet
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConnectRet
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ManoParam_Set
</UL>

<P><STRONG><a name="[36f]"></a>GetSysRunSecond</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.GetSysRunSecond))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
</UL>

<P><STRONG><a name="[281]"></a>GetWeaponPic</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, hmicom_task.o(i.GetWeaponPic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetWeaponPic
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
</UL>

<P><STRONG><a name="[1a2]"></a>GetWorseLevelBlood</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, main_task.o(i.GetWorseLevelBlood))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetWorseLevelBlood &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_WorseHandle
</UL>

<P><STRONG><a name="[266]"></a>HMI_Battery</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, hmicom_task.o(i.HMI_Battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HMI_Battery &rArr; HmiCom_Prot_PicShow &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_GetExBatRes
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
</UL>

<P><STRONG><a name="[268]"></a>HMI_Belong</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, hmicom_task.o(i.HMI_Belong))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HMI_Belong &rArr; HmiCom_Prot_PicShow &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBRChar
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
</UL>

<P><STRONG><a name="[26a]"></a>HMI_ButtonMsgHandle</STRONG> (Thumb, 422 bytes, Stack size 144 bytes, hmicom_task.o(i.HMI_ButtonMsgHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = HMI_ButtonMsgHandle &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text0Show
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_HelmetConnect
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOwnBulletTypeString
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnemyWeaponTypeStrig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
</UL>

<P><STRONG><a name="[270]"></a>HMI_Damage</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, hmicom_task.o(i.HMI_Damage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HMI_Damage &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text0Show
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryPic
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
</UL>

<P><STRONG><a name="[272]"></a>HMI_DayOrNight</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hmicom_task.o(i.HMI_DayOrNight))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HMI_DayOrNight &rArr; LCDScreenDayOrNightHandle &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenDayOrNightHandle
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
</UL>

<P><STRONG><a name="[164]"></a>HMI_GetInjury</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, hmicom_task.o(i.HMI_GetInjury))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HMI_GetInjury
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle_Master
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIndirectAim
</UL>

<P><STRONG><a name="[26b]"></a>HMI_HelmetConnect</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hmicom_task.o(i.HMI_HelmetConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HMI_HelmetConnect &rArr; HMI_Show_Hurt_Kind &rArr; HmiCom_Prot_PicShow &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Hurt_Kind
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHurtPic
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
</UL>

<P><STRONG><a name="[276]"></a>HMI_ID</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, hmicom_task.o(i.HMI_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HMI_ID &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text1Show
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
</UL>

<P><STRONG><a name="[278]"></a>HMI_Location</STRONG> (Thumb, 974 bytes, Stack size 176 bytes, hmicom_task.o(i.HMI_Location))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = HMI_Location &rArr; GaussProjCal &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text0Show
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
</UL>

<P><STRONG><a name="[279]"></a>HMI_Mode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hmicom_task.o(i.HMI_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HMI_Mode &rArr; HmiCom_Prot_PicShow &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
</UL>

<P><STRONG><a name="[27a]"></a>HMI_PosPic</STRONG> (Thumb, 122 bytes, Stack size 176 bytes, hmicom_task.o(i.HMI_PosPic))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HMI_PosPic &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text1Show
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
</UL>

<P><STRONG><a name="[275]"></a>HMI_Show_Hurt_Kind</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hmicom_task.o(i.HMI_Show_Hurt_Kind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HMI_Show_Hurt_Kind &rArr; HmiCom_Prot_PicShow &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_HandleGet
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_HelmetConnect
</UL>

<P><STRONG><a name="[27b]"></a>HMI_Show_Init</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, hmicom_task.o(i.HMI_Show_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = HMI_Show_Init &rArr; HMI_Location &rArr; GaussProjCal &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text1Show
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_BUTTONShow
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UnUpLoadEvtNum
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Signal
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_PosPic
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Mode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Location
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_HelmetConnect
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_DayOrNight
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Damage
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Belong
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_HandleGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Analysis
</UL>

<P><STRONG><a name="[27c]"></a>HMI_Signal</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hmicom_task.o(i.HMI_Signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HMI_Signal &rArr; HmiCom_Prot_PicShow &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
</UL>

<P><STRONG><a name="[27f]"></a>HMI_UctTime</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, hmicom_task.o(i.HMI_UctTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HMI_UctTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text1Show
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
</UL>

<P><STRONG><a name="[27d]"></a>HMI_UnUpLoadEvtNum</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, hmicom_task.o(i.HMI_UnUpLoadEvtNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HMI_UnUpLoadEvtNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text0Show
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
</UL>

<P><STRONG><a name="[280]"></a>HMI_WeaponInfo</STRONG> (Thumb, 386 bytes, Stack size 112 bytes, hmicom_task.o(i.HMI_WeaponInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = HMI_WeaponInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text0Show
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_BarShow
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeaponPic
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
</UL>

<P><STRONG><a name="[283]"></a>Handle_Timer_Close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir.o(i.Handle_Timer_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Handle_Timer_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_byte
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Tx_Handle
</UL>

<P><STRONG><a name="[284]"></a>Handle_Timer_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir.o(i.Handle_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Handle_Timer_Init &rArr; Timera1_Config &rArr; TIMERA_IrqCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Tx_Init
</UL>

<P><STRONG><a name="[286]"></a>Handle_Timer_Open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir.o(i.Handle_Timer_Open))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_byte
</UL>

<P><STRONG><a name="[287]"></a>Handle_Timer_Zero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir.o(i.Handle_Timer_Zero))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_SetCurrCount
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_byte
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Tx_Handle
</UL>

<P><STRONG><a name="[204]"></a>HardCtrl_HelmetBase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main_task.o(i.HardCtrl_HelmetBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByType
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverHardCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHelmetLaserOnOff
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHelmetLaserOn
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHelmetLaserOff
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHelmetFume
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_48k
</UL>

<P><STRONG><a name="[1a7]"></a>HardCtrl_Slaver_PowerOff</STRONG> (Thumb, 116 bytes, Stack size 104 bytes, main_task.o(i.HardCtrl_Slaver_PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HardCtrl_Slaver_PowerOff &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageFactoryDebug
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[28b]"></a>HardStatusDetection</STRONG> (Thumb, 708 bytes, Stack size 40 bytes, main_task.o(i.HardStatusDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HardStatusDetection &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta4
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta3
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta1
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDTRssi
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_GetExBatVol
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt1
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[1ac]"></a>HeartBeatHandle</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main_task.o(i.HeartBeatHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HeartBeatHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
</UL>

<P><STRONG><a name="[290]"></a>HeavyWpnLaunchEventData_Spell</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, main_task.o(i.HeavyWpnLaunchEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUpload_Send
</UL>

<P><STRONG><a name="[28e]"></a>HeavyWpnLaunchEventUploadHandle</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, main_task.o(i.HeavyWpnLaunchEventUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HeavyWpnLaunchEventUploadHandle &rArr; HeavyWpnLaunchEventUpload_Send &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
</UL>

<P><STRONG><a name="[28f]"></a>HeavyWpnLaunchEventUpload_Send</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, main_task.o(i.HeavyWpnLaunchEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HeavyWpnLaunchEventUpload_Send &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUploadHandle
</UL>

<P><STRONG><a name="[291]"></a>HelmetCheatEndUploadHandle</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main_task.o(i.HelmetCheatEndUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = HelmetCheatEndUploadHandle &rArr; AgaistRuleStopEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalHelmetDisconHandle
</UL>

<P><STRONG><a name="[292]"></a>HelmetCheatStartUploadHandle</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main_task.o(i.HelmetCheatStartUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = HelmetCheatStartUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalHelmetDisconHandle
</UL>

<P><STRONG><a name="[294]"></a>Hmi268b_GetLLMagHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmi_lt268b.o(i.Hmi268b_GetLLMagHandle))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi268b_LowLevelTimedProcess
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi268b_LowLevelInit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Init
</UL>

<P><STRONG><a name="[293]"></a>Hmi268b_LowLevelInit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hmi_lt268b.o(i.Hmi268b_LowLevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Hmi268b_LowLevelInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi268b_GetLLMagHandle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Init
</UL>

<P><STRONG><a name="[295]"></a>Hmi268b_LowLevelTimedProcess</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hmi_lt268b.o(i.Hmi268b_LowLevelTimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Hmi268b_LowLevelTimedProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi268b_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Process
</UL>

<P><STRONG><a name="[260]"></a>HmiComTask_HandleGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmicom_task.o(i.HmiComTask_HandleGet))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Hurt_Kind
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta2
</UL>

<P><STRONG><a name="[296]"></a>HmiComTask_Init</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, hmicom_task.o(i.HmiComTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HmiComTask_Init &rArr; HmiCom_Prot_CheckOnline &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi268b_LowLevelInit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi268b_GetLLMagHandle
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_CheckOnline
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SetListNodeLen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_HandleGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29a]"></a>HmiComTask_Process</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, hmicom_task.o(i.HmiComTask_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = HmiComTask_Process &rArr; HmiCom_Analysis &rArr; HMI_Show_Init &rArr; HMI_Location &rArr; GaussProjCal &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_FindHmi268bFrame
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi268b_LowLevelTimedProcess
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Analysis
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_TimedProcess
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_HandleGet
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a9]"></a>HmiComTask_TaskHandleGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmicom_task.o(i.HmiComTask_TaskHandleGet))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[29e]"></a>HmiCom_Analysis</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hmicom_task.o(i.HmiCom_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = HmiCom_Analysis &rArr; HMI_Show_Init &rArr; HMI_Location &rArr; GaussProjCal &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Process
</UL>

<P><STRONG><a name="[cd]"></a>HmiCom_ComInit</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, hmicom_task.o(i.HmiCom_ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = HmiCom_ComInit &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComConfiguration
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmicom_task.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>HmiCom_ComRead</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hmicom_task.o(i.HmiCom_ComRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HmiCom_ComRead
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmicom_task.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>HmiCom_ComWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hmicom_task.o(i.HmiCom_ComWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HmiCom_ComWrite &rArr; Uart_SendBuf &rArr; Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmicom_task.o(.constdata)
</UL>
<P><STRONG><a name="[27e]"></a>HmiCom_Prot_BUTTONShow</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, hmicom_task.o(i.HmiCom_Prot_BUTTONShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HmiCom_Prot_BUTTONShow &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_CRC_CCITT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
</UL>

<P><STRONG><a name="[282]"></a>HmiCom_Prot_BarShow</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, hmicom_task.o(i.HmiCom_Prot_BarShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HmiCom_Prot_BarShow &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_CRC_CCITT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
</UL>

<P><STRONG><a name="[299]"></a>HmiCom_Prot_CheckOnline</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, hmicom_task.o(i.HmiCom_Prot_CheckOnline))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HmiCom_Prot_CheckOnline &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_CRC_CCITT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Init
</UL>

<P><STRONG><a name="[267]"></a>HmiCom_Prot_PicShow</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, hmicom_task.o(i.HmiCom_Prot_PicShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HmiCom_Prot_PicShow &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_CRC_CCITT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Signal
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Hurt_Kind
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_PosPic
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Mode
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_HelmetConnect
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_DayOrNight
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Damage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Belong
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Battery
</UL>

<P><STRONG><a name="[26e]"></a>HmiCom_Prot_Text0Show</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, hmicom_task.o(i.HmiCom_Prot_Text0Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HmiCom_Prot_Text0Show &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_CRC_CCITT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UnUpLoadEvtNum
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Location
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Damage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
</UL>

<P><STRONG><a name="[277]"></a>HmiCom_Prot_Text1Show</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, hmicom_task.o(i.HmiCom_Prot_Text1Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HmiCom_Prot_Text1Show &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_CRC_CCITT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UctTime
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_PosPic
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ID
</UL>

<P><STRONG><a name="[29c]"></a>HmiCom_TimedTask</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, hmicom_task.o(i.HmiCom_TimedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = HmiCom_TimedTask &rArr; HMI_Location &rArr; GaussProjCal &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenSleepHandle
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_CheckOnline
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UnUpLoadEvtNum
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_UctTime
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Signal
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_PosPic
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Mode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Location
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ID
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_DayOrNight
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Damage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Belong
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Battery
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Process
</UL>

<P><STRONG><a name="[324]"></a>IDParam_GetIsUDP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_GetIsUDP))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[130]"></a>IDParam_GetPid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_GetPid))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessRequest_Send
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_MacGet
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_StateInfo_Inquire
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_SetOrRescue_ACK
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_ID_Inquire
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_RescueResult_Inquire
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuInfo_Inquire
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BroadcastBeacon
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalPowerOffHandle
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveStartUploadHandle
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveEndUploadHandle
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatStartUploadHandle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatEndUploadHandle
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUploadHandle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatStartUploadHandle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatEndUploadHandle
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStopUpload
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStartUpload
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectorCheatUploadHandle
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUploadHandle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUploadHandle
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNTerminalParamHandle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSetTerminalTypeHandle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUploadHandle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNInjuryWorseHandle
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUploadHandle
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUploadHandle
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJP_BulletInfo_Sync
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJPShotHandle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Handle
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineSetHandle
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineClearanceHandle
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatStartUploadHandle
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatEndUploadHandle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverConnect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponShootingInquire
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyNum
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupply
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[12f]"></a>IDParam_GetRid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_GetRid))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessRequest_Send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_MacGet
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_StateInfo_Inquire
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_SetOrRescue_ACK
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_ID_Inquire
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_RescueResult_Inquire
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuInfo_Inquire
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BroadcastBeacon
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalPowerOffHandle
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveStartUploadHandle
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveEndUploadHandle
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatStartUploadHandle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatEndUploadHandle
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUploadHandle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatStartUploadHandle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatEndUploadHandle
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStopUpload
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStartUpload
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectorCheatUploadHandle
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUploadHandle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUploadHandle
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNTerminalParamHandle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSetTerminalTypeHandle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUploadHandle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNInjuryWorseHandle
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUploadHandle
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUploadHandle
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJP_BulletInfo_Sync
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJPShotHandle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Handle
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineSetHandle
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineClearanceHandle
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatStartUploadHandle
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatEndUploadHandle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverConnect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponShootingInquire
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyNum
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupply
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[322]"></a>IDParam_GetServerIP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, param.o(i.IDParam_GetServerIP))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[323]"></a>IDParam_GetServerPort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_GetServerPort))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[12e]"></a>IDParam_GetTSubType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_GetTSubType))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessRequest_Send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_MacGet
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_StateInfo_Inquire
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_SetOrRescue_ACK
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_ID_Inquire
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_RescueResult_Inquire
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Mac
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuInfo_Inquire
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BroadcastBeacon
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveStartUploadHandle
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveEndUploadHandle
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatStartUploadHandle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatEndUploadHandle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatStartUploadHandle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatEndUploadHandle
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStopUpload
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStartUpload
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectorCheatUploadHandle
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUploadHandle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUploadHandle
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNTerminalParamHandle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSetTerminalTypeHandle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUploadHandle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNInjuryWorseHandle
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizeState
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUploadHandle
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUploadHandle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Handle
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineSetHandle
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineClearanceHandle
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatStartUploadHandle
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatEndUploadHandle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponShootingInquire
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyNum
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupply
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[12d]"></a>IDParam_GetTType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_GetTType))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessRequest_Send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_MacGet
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_StateInfo_Inquire
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_SetOrRescue_ACK
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_ID_Inquire
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_RescueResult_Inquire
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Mac
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuInfo_Inquire
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BroadcastBeacon
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveStartUploadHandle
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveEndUploadHandle
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatStartUploadHandle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatEndUploadHandle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatStartUploadHandle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeCheatEndUploadHandle
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStopUpload
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossEvtStartUpload
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectorCheatUploadHandle
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUploadHandle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUploadHandle
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNTerminalParamHandle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSetTerminalTypeHandle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUploadHandle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNInjuryWorseHandle
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUploadHandle
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUploadHandle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Handle
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineSetHandle
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineClearanceHandle
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatStartUploadHandle
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatEndUploadHandle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponShootingInquire
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyNum
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupply
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[436]"></a>IDParam_GetWMac</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, param.o(i.IDParam_GetWMac))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
</UL>

<P><STRONG><a name="[321]"></a>IDParam_GetWType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_GetWType))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_MacGet
</UL>

<P><STRONG><a name="[1fb]"></a>IDParam_Init</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, param.o(i.IDParam_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IDParam_Init &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIFlashCheckSum_U32
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetDefaultValue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[314]"></a>IDParam_IsIDValid</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, param.o(i.IDParam_IsIDValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IDParam_IsIDValid
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_MacGet
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BZ
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
</UL>

<P><STRONG><a name="[179]"></a>IDParam_Save</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, param.o(i.IDParam_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IDParam_Save &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIFlashCheckSum_U32
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSetTerminalTypeHandle
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
</UL>

<P><STRONG><a name="[2a5]"></a>IDParam_SetDefaultValue</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, param.o(i.IDParam_SetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IDParam_SetDefaultValue &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Init
</UL>

<P><STRONG><a name="[328]"></a>IDParam_SetIsUDP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, param.o(i.IDParam_SetIsUDP))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
</UL>

<P><STRONG><a name="[178]"></a>IDParam_SetPid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_SetPid))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSetTerminalTypeHandle
</UL>

<P><STRONG><a name="[177]"></a>IDParam_SetRid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_SetRid))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSetTerminalTypeHandle
</UL>

<P><STRONG><a name="[326]"></a>IDParam_SetServerIP</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, param.o(i.IDParam_SetServerIP))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
</UL>

<P><STRONG><a name="[327]"></a>IDParam_SetServerPort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_SetServerPort))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
</UL>

<P><STRONG><a name="[150]"></a>IDParam_SetTSubType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_SetTSubType))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullConditionRecovery
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSetTerminalTypeHandle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
</UL>

<P><STRONG><a name="[31b]"></a>IDParam_SetTType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.IDParam_SetTType))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
</UL>

<P><STRONG><a name="[329]"></a>IDParam_SetTxPwr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, param.o(i.IDParam_SetTxPwr))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
</UL>

<P><STRONG><a name="[32a]"></a>IDParam_SetWMac</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, param.o(i.IDParam_SetWMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IDParam_SetWMac
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_SetDevMac
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
</UL>

<P><STRONG><a name="[2a7]"></a>IFLASH_GetFlashSize_HC32F460</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iflash.o(i.IFLASH_GetFlashSize_HC32F460))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Init
</UL>

<P><STRONG><a name="[2a6]"></a>IFLASH_GetPageSize_HC32F460</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iflash.o(i.IFLASH_GetPageSize_HC32F460))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Init
</UL>

<P><STRONG><a name="[244]"></a>IFlash_GetFlashCheckSum</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, iflash.o(i.IFlash_GetFlashCheckSum))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSum
</UL>

<P><STRONG><a name="[1f9]"></a>IFlash_Init</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, iflash.o(i.IFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IFlash_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFLASH_GetPageSize_HC32F460
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFLASH_GetFlashSize_HC32F460
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[22c]"></a>IFlash_Read</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, iflash.o(i.IFlash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IFlash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateReadFromOutFlash
</UL>

<P><STRONG><a name="[22f]"></a>IFlash_Write</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, iflash.o(i.IFlash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Save
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Save
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateWriteToOutFlash
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDownloadProcess
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Save
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalInjury_Save
</UL>

<P><STRONG><a name="[2ac]"></a>IIC_Ack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mpu6050.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Rcv_Byte
</UL>

<P><STRONG><a name="[2ae]"></a>IIC_NAck</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mpu6050.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Rcv_Byte
</UL>

<P><STRONG><a name="[2af]"></a>IIC_Rcv_Byte</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mpu6050.o(i.IIC_Rcv_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN_GpioInit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[2b1]"></a>IIC_Send_Byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mpu6050.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[2b2]"></a>IIC_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mpu6050.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[2b3]"></a>IIC_Stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mpu6050.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[2b4]"></a>IIC_Wait_Ack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mpu6050.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_GpioInit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[2b6]"></a>IR38ComTask_HandleGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ir38com_task.o(i.IR38ComTask_HandleGet))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Process
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
</UL>

<P><STRONG><a name="[2b5]"></a>IR38ComTask_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ir38com_task.o(i.IR38ComTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IR38ComTask_Init &rArr; IR38Com_ComInit &rArr; User_Ir_Init &rArr; User_Rcv_Init &rArr; IRRcvGpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38Com_ComInit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_HandleGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b7]"></a>IR38ComTask_Process</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ir38com_task.o(i.IR38ComTask_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = IR38ComTask_Process &rArr; InterConn_Analysis &rArr; InterConn_ProtDeal_ManoParam_Set &rArr; CtrlManoParamEventUploadHandle &rArr; CtrlManoParamEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_FindIR38_Frame
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Retrieve
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Header
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIR38SendBusy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_HandleGet
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a8]"></a>IR38ComTask_TaskHandleGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ir38com_task.o(i.IR38ComTask_TaskHandleGet))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[a9]"></a>IR38Com_ComInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ir38com_task.o(i.IR38Com_ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IR38Com_ComInit &rArr; User_Ir_Init &rArr; User_Rcv_Init &rArr; IRRcvGpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Ir_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir38com_task.o(i.IR38ComTask_Init)
</UL>
<P><STRONG><a name="[aa]"></a>IR38Com_Read</STRONG> (Thumb, 70 bytes, Stack size 272 bytes, ir38com_task.o(i.IR38Com_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = IR38Com_Read &rArr; User_Ir_Rcv
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Ir_Rcv
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir38com_task.o(i.IR38ComTask_Init)
</UL>
<P><STRONG><a name="[ab]"></a>IR38Com_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ir38com_task.o(i.IR38Com_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IR38Com_Write &rArr; User_Ir_Send &rArr; ir_send_byte &rArr; Send_Low
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Ir_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir38com_task.o(i.IR38ComTask_Init)
</UL>
<P><STRONG><a name="[2c0]"></a>IRAmmuGetHandle</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, main_task.o(i.IRAmmuGetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = IRAmmuGetHandle &rArr; RSP_CtrlSupplementEventUploadHandle &rArr; RSP_CtrlSupplementEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUploadHandle
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyNum
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuSupply
</UL>

<P><STRONG><a name="[10]"></a>IRQ000_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ir.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ000_Handler &rArr; Ir_Tx_Handle &rArr; Send_High &rArr; Carwave_Timer_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_GetFlag
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_ClearFlag
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Tx_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ001_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ir.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_GetFlag
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_ClearFlag
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Pin_Tog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ002_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ir.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ002_Handler &rArr; Ir_Rcv_Handle &rArr; RX_Pin_IsLow
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_GetFlag
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_ClearFlag
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Rcv_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ003_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ir.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ003_Handler &rArr; Ir_Rcv_Edge_Handle &rArr; Cap_Timer_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_IrqFlgGet
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_IrqFlgClr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Rcv_Edge_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ004_Handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wtn6.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Stop
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_GetIrqFlag
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_ClearIrqFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ005_Handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timer.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ005_Handler &rArr; SysScheduleProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_GetIrqFlag
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_ClearIrqFlag
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ006_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler &rArr; Uart_IrqHandle_EI
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ007_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler &rArr; Uart_IrqHandle_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ008_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IRQ008_Handler &rArr; Uart_IrqHandle_RTO &rArr; TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ009_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQ009_Handler &rArr; Uart_IrqHandle_TI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ010_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQ010_Handler &rArr; Uart_IrqHandle_TCI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ011_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ011_Handler &rArr; Uart_IrqHandle_DMATC &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ012_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler &rArr; Uart_IrqHandle_EI
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ013_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler &rArr; Uart_IrqHandle_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ014_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IRQ014_Handler &rArr; Uart_IrqHandle_RTO &rArr; TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ015_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQ015_Handler &rArr; Uart_IrqHandle_TI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ016_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQ016_Handler &rArr; Uart_IrqHandle_TCI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ017_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ017_Handler &rArr; Uart_IrqHandle_DMATC &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ018_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler &rArr; Uart_IrqHandle_EI
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ019_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler &rArr; Uart_IrqHandle_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ020_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IRQ020_Handler &rArr; Uart_IrqHandle_RTO &rArr; TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ021_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQ021_Handler &rArr; Uart_IrqHandle_TI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ022_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQ022_Handler &rArr; Uart_IrqHandle_TCI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ023_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ023_Handler &rArr; Uart_IrqHandle_DMATC &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ024_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler &rArr; Uart_IrqHandle_EI
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ025_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler &rArr; Uart_IrqHandle_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ026_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IRQ026_Handler &rArr; Uart_IrqHandle_RTO &rArr; TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ027_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQ027_Handler &rArr; Uart_IrqHandle_TI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ028_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQ028_Handler &rArr; Uart_IrqHandle_TCI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ029_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ029_Handler &rArr; Uart_IrqHandle_DMATC &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2d2]"></a>IRRcvGpioInit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ir.o(i.IRRcvGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IRRcvGpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Rcv_Init
</UL>

<P><STRONG><a name="[2d8]"></a>IR_TX_Init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ir.o(i.IR_TX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IR_TX_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Tx_Init
</UL>

<P><STRONG><a name="[144]"></a>IWDG_Feed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iwdt.o(i.IWDG_Feed))
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_RefreshCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOffHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupDrillState
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Ir_Send
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDownloadProcess
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[2da]"></a>IWDG_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, iwdt.o(i.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2dc]"></a>IllegalEventHandle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main_task.o(i.IllegalEventHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = IllegalEventHandle &rArr; IllegalPowerOffHandle &rArr; MasterPowerOffCheatStartUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalPowerOffHandle
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalHelmetDisconHandle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeInstallHandle
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[2de]"></a>IllegalHelmetDisconHandle</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, main_task.o(i.IllegalHelmetDisconHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = IllegalHelmetDisconHandle &rArr; HelmetCheatStartUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatStartUploadHandle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelmetCheatEndUploadHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetTsChar1
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalEventHandle
</UL>

<P><STRONG><a name="[2e0]"></a>IllegalMoveEndUploadHandle</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, main_task.o(i.IllegalMoveEndUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = IllegalMoveEndUploadHandle &rArr; AgaistRuleStopEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
</UL>

<P><STRONG><a name="[2dd]"></a>IllegalMoveMonitor</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, main_task.o(i.IllegalMoveMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = IllegalMoveMonitor &rArr; IllegalMoveStartUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveStartUploadHandle
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveEndUploadHandle
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathRecord
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalEventHandle
</UL>

<P><STRONG><a name="[2e3]"></a>IllegalMoveStartUploadHandle</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main_task.o(i.IllegalMoveStartUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = IllegalMoveStartUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
</UL>

<P><STRONG><a name="[2df]"></a>IllegalPowerOffHandle</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, main_task.o(i.IllegalPowerOffHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = IllegalPowerOffHandle &rArr; MasterPowerOffCheatStartUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatStartUploadHandle
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterPowerOffCheatEndUploadHandle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalEventHandle
</UL>

<P><STRONG><a name="[1f5]"></a>InitNVICSELRegister0_127</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main_task.o(i.InitNVICSELRegister0_127))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitNVICSELRegister0_127
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[181]"></a>InitShell</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, main_task.o(i.InitShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitShell
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
</UL>

<P><STRONG><a name="[28a]"></a>InterChanSend</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, main_task.o(i.InterChanSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppendDiff
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_HandleGet
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_MakeU32Sum
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_MakeSendFrame
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_HandleGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_MacGet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_StateInfo_Inquire
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_SetOrRescue_ACK
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_ID_Inquire
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_RescueResult_Inquire
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Mac
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuInfo_Inquire
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BroadcastBeacon
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HelmetStaGet
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_Slaver_PowerOff
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_SendToHelmet
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_BroadCast
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJP_BulletInfo_Sync
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverStaGet
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverHardCtrl
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverConnect
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponShootingInquire
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Lightweapon_AmmuInfoSync
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_LightWeapon
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Heavyweapon_AmmuInfoSync
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeapon
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyNum
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupply
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[2bc]"></a>InterConn_Analysis</STRONG> (Thumb, 1100 bytes, Stack size 24 bytes, main_task.o(i.InterConn_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = InterConn_Analysis &rArr; InterConn_ProtDeal_ManoParam_Set &rArr; CtrlManoParamEventUploadHandle &rArr; CtrlManoParamEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_MacGet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_StateInfo_Inquire
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_ID_Inquire
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_RescueResult_Inquire
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Mac
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuSupply
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuInfo_Inquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_HelmetStatusRet
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BroadcastBeacon
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BZ
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_LastCommMacGet
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TesModeHandle
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineSetHandle
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineClearanceHandle
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponShootingInquire
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponLockRet
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponInfoRet
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Poweron
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Lightweapon_AmmuInfoSync
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Heavyweapon_AmmuInfoSync
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyRet
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverStatusRet
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConnectRet
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SetUpVariousElements
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Rescure_State
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Personnel_GetOn_Off
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ManoParam_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Process
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[311]"></a>InterConn_HardCtrl_Analysis</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, main_task.o(i.InterConn_HardCtrl_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = InterConn_HardCtrl_Analysis &rArr; LaserProtocalDeal &rArr; Laser_JudgeHandle &rArr; ManoStartHandle &rArr; ChangeToManoEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_HandleGet
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_TaskHandleGet
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_LastCommMacGet
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_MakeU32Sum
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_SendToHelmet
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[265]"></a>InterConn_HelmetStaGet</STRONG> (Thumb, 114 bytes, Stack size 104 bytes, main_task.o(i.InterConn_HelmetStaGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InterConn_HelmetStaGet &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlaverStatus
</UL>

<P><STRONG><a name="[310]"></a>InterConn_ProtDeal_BZ</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main_task.o(i.InterConn_ProtDeal_BZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InterConn_ProtDeal_BZ &rArr; IDParam_IsIDValid
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_IsIDValid
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[30f]"></a>InterConn_ProtDeal_Bomb</STRONG> (Thumb, 318 bytes, Stack size 80 bytes, main_task.o(i.InterConn_ProtDeal_Bomb))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = InterConn_ProtDeal_Bomb &rArr; DamageReportEventUploadHandle &rArr; DamageReportEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryBloodByExplodePart
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExplodeMineAtypeASubtype
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBulletUniID
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUploadHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemapHurtPart
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_GetInjury
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBlood
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2f1]"></a>InterConn_ProtDeal_BroadcastBeacon</STRONG> (Thumb, 432 bytes, Stack size 152 bytes, main_task.o(i.InterConn_ProtDeal_BroadcastBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = InterConn_ProtDeal_BroadcastBeacon &rArr; GetDistance &rArr; get_distance &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[30e]"></a>InterConn_ProtDeal_Explosive</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, main_task.o(i.InterConn_ProtDeal_Explosive))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = InterConn_ProtDeal_Explosive &rArr; DamageReportEventUploadHandle &rArr; DamageReportEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryBloodByExplodePart
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExplodeMineAtypeASubtype
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBulletUniID
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUploadHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemapHurtPart
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_GetInjury
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBlood
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[30c]"></a>InterConn_ProtDeal_HelmetStatusRet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main_task.o(i.InterConn_ProtDeal_HelmetStatusRet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InterConn_ProtDeal_HelmetStatusRet &rArr; SlaverMag_GetHandleByMac &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetFireInstallFlg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetActLaserCnt1
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2fb]"></a>InterConn_ProtDeal_IDSet</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, main_task.o(i.InterConn_ProtDeal_IDSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = InterConn_ProtDeal_IDSet &rArr; InterConn_ProtDeal_IR_SetOrRescue_ACK &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParamValid
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetTType
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetTSubType
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetRid
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetPid
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Save
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_SetOrRescue_ACK
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetKey
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBRChar
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2f7]"></a>InterConn_ProtDeal_IR_AmmuInfo_Inquire</STRONG> (Thumb, 452 bytes, Stack size 136 bytes, main_task.o(i.InterConn_ProtDeal_IR_AmmuInfo_Inquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = InterConn_ProtDeal_IR_AmmuInfo_Inquire &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWeaponNum
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2f8]"></a>InterConn_ProtDeal_IR_AmmuSupply</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, main_task.o(i.InterConn_ProtDeal_IR_AmmuSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = InterConn_ProtDeal_IR_AmmuSupply &rArr; IRAmmuGetHandle &rArr; RSP_CtrlSupplementEventUploadHandle &rArr; RSP_CtrlSupplementEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_SetOrRescue_ACK
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRAmmuGetHandle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2eb]"></a>InterConn_ProtDeal_IR_DB_Injury_Inquire</STRONG> (Thumb, 352 bytes, Stack size 144 bytes, main_task.o(i.InterConn_ProtDeal_IR_DB_Injury_Inquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = InterConn_ProtDeal_IR_DB_Injury_Inquire &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetKey
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBlood
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2f3]"></a>InterConn_ProtDeal_IR_DB_Mac</STRONG> (Thumb, 160 bytes, Stack size 112 bytes, main_task.o(i.InterConn_ProtDeal_IR_DB_Mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InterConn_ProtDeal_IR_DB_Mac &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2f4]"></a>InterConn_ProtDeal_IR_DB_RescueResult_Inquire</STRONG> (Thumb, 462 bytes, Stack size 168 bytes, main_task.o(i.InterConn_ProtDeal_IR_DB_RescueResult_Inquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = InterConn_ProtDeal_IR_DB_RescueResult_Inquire &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2ec]"></a>InterConn_ProtDeal_IR_ID_Inquire</STRONG> (Thumb, 244 bytes, Stack size 112 bytes, main_task.o(i.InterConn_ProtDeal_IR_ID_Inquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InterConn_ProtDeal_IR_ID_Inquire &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[31c]"></a>InterConn_ProtDeal_IR_SetOrRescue_ACK</STRONG> (Thumb, 124 bytes, Stack size 104 bytes, main_task.o(i.InterConn_ProtDeal_IR_SetOrRescue_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InterConn_ProtDeal_IR_SetOrRescue_ACK &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuSupply
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
</UL>

<P><STRONG><a name="[2f5]"></a>InterConn_ProtDeal_IR_StateInfo_Inquire</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, main_task.o(i.InterConn_ProtDeal_IR_StateInfo_Inquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InterConn_ProtDeal_IR_StateInfo_Inquire &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetTime1
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetLPos
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetCIdegree
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2ed]"></a>InterConn_ProtDeal_InfoSend</STRONG> (Thumb, 322 bytes, Stack size 112 bytes, main_task.o(i.InterConn_ProtDeal_InfoSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InterConn_ProtDeal_InfoSend &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta4
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta3
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta1
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDTRssi
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_GetExBatVol
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWMac
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2fa]"></a>InterConn_ProtDeal_MacGet</STRONG> (Thumb, 198 bytes, Stack size 112 bytes, main_task.o(i.InterConn_ProtDeal_MacGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InterConn_ProtDeal_MacGet &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_IsIDValid
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetWType
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWMac
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2f6]"></a>InterConn_ProtDeal_ManoParam_Set</STRONG> (Thumb, 588 bytes, Stack size 864 bytes, main_task.o(i.InterConn_ProtDeal_ManoParam_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = InterConn_ProtDeal_ManoParam_Set &rArr; CtrlManoParamEventUploadHandle &rArr; CtrlManoParamEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUploadHandle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordRcvBackStageProtocolTime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2ff]"></a>InterConn_ProtDeal_ParamSend</STRONG> (Thumb, 192 bytes, Stack size 104 bytes, main_task.o(i.InterConn_ProtDeal_ParamSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InterConn_ProtDeal_ParamSend &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetServerPort
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetServerIP
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetIsUDP
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWTxPwr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWMac
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[300]"></a>InterConn_ProtDeal_ParamSet</STRONG> (Thumb, 378 bytes, Stack size 136 bytes, main_task.o(i.InterConn_ProtDeal_ParamSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = InterConn_ProtDeal_ParamSet &rArr; ResCom_FourGParam_Set &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParamValid
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetWMac
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetTxPwr
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetServerPort
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetServerIP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetIsUDP
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Save
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetServerPort
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetServerIP
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetIsUDP
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWTxPwr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWMac
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_FourGParam_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2f2]"></a>InterConn_ProtDeal_Personnel_GetOn_Off</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, main_task.o(i.InterConn_ProtDeal_Personnel_GetOn_Off))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[30a]"></a>InterConn_ProtDeal_Rescure_State</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main_task.o(i.InterConn_ProtDeal_Rescure_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InterConn_ProtDeal_Rescure_State &rArr; Wtn6_Play &rArr; Wtn6_LPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[182]"></a>InterConn_ProtDeal_SelfStatue</STRONG> (Thumb, 624 bytes, Stack size 168 bytes, main_task.o(i.InterConn_ProtDeal_SelfStatue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetTsChar1
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWeaponNum
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayModeHandle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_RestartHandle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_InvalidHandle
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSupplementHandle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeHandle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Protocol_Process
</UL>

<P><STRONG><a name="[309]"></a>InterConn_ProtDeal_SetUpVariousElements</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, main_task.o(i.InterConn_ProtDeal_SetUpVariousElements))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InterConn_ProtDeal_SetUpVariousElements &rArr; Beep_On &rArr; Beep_IsSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2fc]"></a>InterConn_ProtDeal_SlaverClear</STRONG> (Thumb, 228 bytes, Stack size 112 bytes, main_task.o(i.InterConn_ProtDeal_SlaverClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = InterConn_ProtDeal_SlaverClear &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_SetDefaultValue
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Save
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_IsIDValid
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Save
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2fe]"></a>InterConn_ProtDeal_SlaverConfig</STRONG> (Thumb, 332 bytes, Stack size 152 bytes, main_task.o(i.InterConn_ProtDeal_SlaverConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = InterConn_ProtDeal_SlaverConfig &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_SetSlaverParam
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Save
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWeaponNum
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[302]"></a>InterConn_ProtDeal_SlaverConnectRet</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, main_task.o(i.InterConn_ProtDeal_SlaverConnectRet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InterConn_ProtDeal_SlaverConnectRet &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllSlavesConnectStatus
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_TaskHandleGet
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[304]"></a>InterConn_ProtDeal_SlaverStatusRet</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main_task.o(i.InterConn_ProtDeal_SlaverStatusRet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InterConn_ProtDeal_SlaverStatusRet &rArr; SlaverMag_GetHandleByMac &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[307]"></a>InterConn_ProtDeal_Slaver_AmmuStausRet</STRONG> (Thumb, 752 bytes, Stack size 176 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_AmmuStausRet))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = InterConn_ProtDeal_Slaver_AmmuStausRet &rArr; PJPShotHandle &rArr; NonDigitIndirectLanuchEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUploadHandle
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_StartLSound
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJP_BulletInfo_Sync
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJPShotHandle
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupply
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[1a0]"></a>InterConn_ProtDeal_Slaver_AmmuSupply</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_AmmuSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InterConn_ProtDeal_Slaver_AmmuSupply &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_TolastHandle
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
</UL>

<P><STRONG><a name="[187]"></a>InterConn_ProtDeal_Slaver_AmmuSupplyNum</STRONG> (Thumb, 248 bytes, Stack size 112 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_AmmuSupplyNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InterConn_ProtDeal_Slaver_AmmuSupplyNum &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRAmmuGetHandle
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSupplementHandle
</UL>

<P><STRONG><a name="[306]"></a>InterConn_ProtDeal_Slaver_AmmuSupplyRet</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_AmmuSupplyRet))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = InterConn_ProtDeal_Slaver_AmmuSupplyRet &rArr; PJP_BulletInfo_Sync &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_TaskHandleGet
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJP_BulletInfo_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[331]"></a>InterConn_ProtDeal_Slaver_HeavyWeapon</STRONG> (Thumb, 266 bytes, Stack size 104 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_HeavyWeapon))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InterConn_ProtDeal_Slaver_HeavyWeapon &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_TimedProcess
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
</UL>

<P><STRONG><a name="[2ef]"></a>InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet &rArr; UserParam_Save &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_TaskHandleGet
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Save
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWeaponNum
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[30b]"></a>InterConn_ProtDeal_Slaver_Heavyweapon_AmmuInfoSync</STRONG> (Thumb, 490 bytes, Stack size 192 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_Heavyweapon_AmmuInfoSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = InterConn_ProtDeal_Slaver_Heavyweapon_AmmuInfoSync &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[332]"></a>InterConn_ProtDeal_Slaver_LightWeapon</STRONG> (Thumb, 240 bytes, Stack size 104 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_LightWeapon))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InterConn_ProtDeal_Slaver_LightWeapon &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_TimedProcess
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
</UL>

<P><STRONG><a name="[2f0]"></a>InterConn_ProtDeal_Slaver_Lightweapon_AmmuInfoSync</STRONG> (Thumb, 488 bytes, Stack size 344 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_Lightweapon_AmmuInfoSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = InterConn_ProtDeal_Slaver_Lightweapon_AmmuInfoSync &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[30d]"></a>InterConn_ProtDeal_Slaver_Poweron</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_Poweron))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InterConn_ProtDeal_Slaver_Poweron
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[305]"></a>InterConn_ProtDeal_Slaver_WeaponInfoRet</STRONG> (Thumb, 644 bytes, Stack size 40 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_WeaponInfoRet))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = InterConn_ProtDeal_Slaver_WeaponInfoRet &rArr; PJP_BulletInfo_Sync &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_TaskHandleGet
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWeaponNum
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJP_BulletInfo_Sync
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[303]"></a>InterConn_ProtDeal_Slaver_WeaponLockRet</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_WeaponLockRet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InterConn_ProtDeal_Slaver_WeaponLockRet &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_TaskHandleGet
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[308]"></a>InterConn_ProtDeal_Slaver_WeaponShootingInquire</STRONG> (Thumb, 706 bytes, Stack size 160 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_WeaponShootingInquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = InterConn_ProtDeal_Slaver_WeaponShootingInquire &rArr; InterConn_ProtDeal_Slaver_Weapon_State &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[191]"></a>InterConn_ProtDeal_Slaver_Weapon_State</STRONG> (Thumb, 236 bytes, Stack size 120 bytes, main_task.o(i.InterConn_ProtDeal_Slaver_Weapon_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = InterConn_ProtDeal_Slaver_Weapon_State &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeInstallHandle
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathHandle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_RestartHandle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_InvalidHandle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReviveHandle
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponShootingInquire
</UL>

<P><STRONG><a name="[333]"></a>InterConn_Protocol_Process</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main_task.o(i.InterConn_Protocol_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = InterConn_Protocol_Process &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_HandleGet
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
</UL>

<P><STRONG><a name="[334]"></a>InterConn_SlaverConnect</STRONG> (Thumb, 164 bytes, Stack size 112 bytes, main_task.o(i.InterConn_SlaverConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InterConn_SlaverConnect &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetTsChar2
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_TimedProcess
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
</UL>

<P><STRONG><a name="[289]"></a>InterConn_SlaverHardCtrl</STRONG> (Thumb, 86 bytes, Stack size 160 bytes, main_task.o(i.InterConn_SlaverHardCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_HelmetBase
</UL>

<P><STRONG><a name="[264]"></a>InterConn_SlaverStaGet</STRONG> (Thumb, 114 bytes, Stack size 104 bytes, main_task.o(i.InterConn_SlaverStaGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InterConn_SlaverStaGet &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlaverStatus
</UL>

<P><STRONG><a name="[3f0]"></a>Ir_LowLevelTimedProcess</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ir.o(i.Ir_LowLevelTimedProcess))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[2c7]"></a>Ir_Rcv_Edge_Handle</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ir.o(i.Ir_Rcv_Edge_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ir_Rcv_Edge_Handle &rArr; Cap_Timer_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Zero
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Open
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ003_Handler
</UL>

<P><STRONG><a name="[2c4]"></a>Ir_Rcv_Handle</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ir.o(i.Ir_Rcv_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ir_Rcv_Handle &rArr; RX_Pin_IsLow
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Pin_IsLow
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Pin_IsHigh
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Zero
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ002_Handler
</UL>

<P><STRONG><a name="[2c2]"></a>Ir_Tx_Handle</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, ir.o(i.Ir_Tx_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ir_Tx_Handle &rArr; Send_High &rArr; Carwave_Timer_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Pin_Low
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Low
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_High
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Zero
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
</UL>

<P><STRONG><a name="[2b8]"></a>IsIR38SendBusy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ir.o(i.IsIR38SendBusy))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Process
</UL>

<P><STRONG><a name="[31a]"></a>IsParamValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, param.o(i.IsParamValid))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_SetDevMac
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
</UL>

<P><STRONG><a name="[14e]"></a>Is_PwrKeyOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.Is_PwrKeyOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Is_PwrKeyOn
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenSleepHandle
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOnOffTimedProcess
</UL>

<P><STRONG><a name="[273]"></a>LCDScreenDayOrNightHandle</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, hmicom_task.o(i.LCDScreenDayOrNightHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCDScreenDayOrNightHandle &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_CRC_CCITT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_DayOrNight
</UL>

<P><STRONG><a name="[2a3]"></a>LCDScreenSleepHandle</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, hmicom_task.o(i.LCDScreenSleepHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCDScreenSleepHandle &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_CRC_CCITT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_PwrKeyOn
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_TimedTask
</UL>

<P><STRONG><a name="[220]"></a>LaserComTask_HandleGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lasercom_task.o(i.LaserComTask_HandleGet))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HardCtrl_Analysis
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossHandle
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_AllOn
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_AllOff
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TesModeHandle
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReviveHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[33c]"></a>LaserComTask_Init</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, lasercom_task.o(i.LaserComTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LaserComTask_Init &rArr; LaserCom_Prot_GetOnlineNum &rArr; LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_PowerOn
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_LowLevelInit
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_GetLLMagHandle
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Prot_GetOnlineNum
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_HandleGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[341]"></a>LaserComTask_Process</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lasercom_task.o(i.LaserComTask_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = LaserComTask_Process &rArr; LaserCom_Analysis &rArr; LaserProtocalDeal &rArr; Laser_JudgeHandle &rArr; ManoStartHandle &rArr; ChangeToManoEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_LowLevelTimedProcess
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_TimedProcess
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_CtrlAutoNumbered
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Prot_GetOnlineNum
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Analysis
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_HandleGet
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Retrieve
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Header
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_Find5AAAFrame
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d]"></a>LaserComTask_TaskHandleGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lasercom_task.o(i.LaserComTask_TaskHandleGet))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta1
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_48k
</UL>

<P><STRONG><a name="[346]"></a>LaserCom_Analysis</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lasercom_task.o(i.LaserCom_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = LaserCom_Analysis &rArr; LaserProtocalDeal &rArr; Laser_JudgeHandle &rArr; ManoStartHandle &rArr; ChangeToManoEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetActLaserCnt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
</UL>

<P><STRONG><a name="[c8]"></a>LaserCom_ComInit</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, lasercom_task.o(i.LaserCom_ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LaserCom_ComInit &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_GpioPowerOnInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComConfiguration
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lasercom_task.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>LaserCom_ComRead</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lasercom_task.o(i.LaserCom_ComRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LaserCom_ComRead
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lasercom_task.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>LaserCom_ComWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lasercom_task.o(i.LaserCom_ComWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LaserCom_ComWrite &rArr; Uart_SendBuf &rArr; Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lasercom_task.o(.constdata)
</UL>
<P><STRONG><a name="[33e]"></a>LaserCom_GetLLMagHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lasercom.o(i.LaserCom_GetLLMagHandle))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_PowerOn
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_LowLevelTimedProcess
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_LowLevelInit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Init
</UL>

<P><STRONG><a name="[cc]"></a>LaserCom_GpioPowerOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.LaserCom_GpioPowerOff))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lasercom_task.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>LaserCom_GpioPowerOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.LaserCom_GpioPowerOn))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lasercom_task.o(.constdata)
</UL>
<P><STRONG><a name="[347]"></a>LaserCom_GpioPowerOnInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i.LaserCom_GpioPowerOnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LaserCom_GpioPowerOnInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_ComInit
</UL>

<P><STRONG><a name="[348]"></a>LaserCom_LL_PowerOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lasercom.o(i.LaserCom_LL_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_PowerOn
</UL>

<P><STRONG><a name="[33d]"></a>LaserCom_LowLevelInit</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lasercom.o(i.LaserCom_LowLevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LaserCom_LowLevelInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_GetLLMagHandle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Init
</UL>

<P><STRONG><a name="[342]"></a>LaserCom_LowLevelTimedProcess</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lasercom.o(i.LaserCom_LowLevelTimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LaserCom_LowLevelTimedProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
</UL>

<P><STRONG><a name="[33f]"></a>LaserCom_PowerOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lasercom.o(i.LaserCom_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LaserCom_PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_GetLLMagHandle
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_LL_PowerOn
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Init
</UL>

<P><STRONG><a name="[349]"></a>LaserCom_Prot_CtrlMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lasercom_task.o(i.LaserCom_Prot_CtrlMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LaserCom_Prot_CtrlMode &rArr; LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TesModeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[340]"></a>LaserCom_Prot_GetOnlineNum</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lasercom_task.o(i.LaserCom_Prot_GetOnlineNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LaserCom_Prot_GetOnlineNum &rArr; LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Init
</UL>

<P><STRONG><a name="[312]"></a>LaserProtocalDeal</STRONG> (Thumb, 1232 bytes, Stack size 224 bytes, main_task.o(i.LaserProtocalDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = LaserProtocalDeal &rArr; Laser_JudgeHandle &rArr; ManoStartHandle &rArr; ChangeToManoEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBulletUniID
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUploadHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_CtrlLedToggle
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWeaponNum
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetTime1
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBRChar
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUploadHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_InsertPartitionAndID
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetPartitionByID
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Analysis
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[343]"></a>Laser_CtrlAutoNumbered</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lasercom_task.o(i.Laser_CtrlAutoNumbered))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Laser_CtrlAutoNumbered &rArr; LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
</UL>

<P><STRONG><a name="[15a]"></a>Laser_CtrlLedOn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lasercom_task.o(i.Laser_CtrlLedOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Laser_CtrlLedOn
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_TimedProcess
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
</UL>

<P><STRONG><a name="[34c]"></a>Laser_CtrlLedToggle</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lasercom_task.o(i.Laser_CtrlLedToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Laser_CtrlLedToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[34b]"></a>Laser_GetPartitionByID</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, main_task.o(i.Laser_GetPartitionByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Laser_GetPartitionByID
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[34f]"></a>Laser_GetShotHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lasercom_task.o(i.Laser_GetShotHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Laser_GetShotHandle &rArr; Laser_GetShotHandle_Master &rArr; DamageReportEventUploadHandle &rArr; DamageReportEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle_Master
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_TimedProcess
</UL>

<P><STRONG><a name="[350]"></a>Laser_GetShotHandle_Master</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, lasercom_task.o(i.Laser_GetShotHandle_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Laser_GetShotHandle_Master &rArr; DamageReportEventUploadHandle &rArr; DamageReportEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_StruckPart
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemapHurtPartSpecial
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDirectWeaponDamage
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUploadHandle
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollateralDamage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemapHurtPart
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_GetInjury
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle
</UL>

<P><STRONG><a name="[34e]"></a>Laser_InsertPartitionAndID</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main_task.o(i.Laser_InsertPartitionAndID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Laser_InsertPartitionAndID
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[34a]"></a>Laser_JudgeHandle</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, main_task.o(i.Laser_JudgeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Laser_JudgeHandle &rArr; ManoStartHandle &rArr; ChangeToManoEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_HandleGet
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_Slaver_PowerOff
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullConditionRecovery
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayModeHandle
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_WorseHandle
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_TolastHandle
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ToRedHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ToBlueHandle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SlightHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SevereHandle
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ReviveHandle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_RestartHandle
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ReliefHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ModerateHandle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_InvalidHandle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_DeathHandle
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_CriticalHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_NightSound
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_DaySound
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Prot_CtrlMode
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShotAroundHandle
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDrillState
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeHandle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[344]"></a>Laser_TimedProcess</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, lasercom_task.o(i.Laser_TimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Laser_TimedProcess &rArr; Laser_GetShotHandle &rArr; Laser_GetShotHandle_Master &rArr; DamageReportEventUploadHandle &rArr; DamageReportEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_Proc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectorCheatHandle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_CtrlLedOn
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
</UL>

<P><STRONG><a name="[355]"></a>Led_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, led.o(i.Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetBrightness
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaLed_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Init
</UL>

<P><STRONG><a name="[35a]"></a>Led_IsSuspend</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i.Led_IsSuspend))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_TimedProcess100Ms
</UL>

<P><STRONG><a name="[20f]"></a>Led_SetBrightness</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(i.Led_SetBrightness))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayModeHandle
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_RunLed
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeHandle
</UL>

<P><STRONG><a name="[1c1]"></a>Led_SetRunMode</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, led.o(i.Led_SetRunMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led_SetRunMode
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryReplacementTask
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TesModeHandle
</UL>

<P><STRONG><a name="[356]"></a>Led_Suspend</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i.Led_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[357]"></a>Led_TimedProcess</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(i.Led_TimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Led_TimedProcess &rArr; Led_TimedProcess1Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_TimedProcess1Ms
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_TimedProcess100Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[359]"></a>Led_TimedProcess100Ms</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, led.o(i.Led_TimedProcess100Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led_TimedProcess100Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_IsSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_TimedProcess
</UL>

<P><STRONG><a name="[358]"></a>Led_TimedProcess1Ms</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, led.o(i.Led_TimedProcess1Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led_TimedProcess1Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_TimedProcess
</UL>

<P><STRONG><a name="[3d0]"></a>LinkList_Clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, linklist.o(i.LinkList_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListClear
</UL>

<P><STRONG><a name="[35b]"></a>LinkList_Create</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, linklist.o(i.LinkList_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Create
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListCreate
</UL>

<P><STRONG><a name="[35f]"></a>LinkList_Delete</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, linklist.o(i.LinkList_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LinkList_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDelete
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListClear
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Retrieve
</UL>

<P><STRONG><a name="[35e]"></a>LinkList_Get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, linklist.o(i.LinkList_Get))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_TimedProcess
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Header
</UL>

<P><STRONG><a name="[35d]"></a>LinkList_Insert</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, linklist.o(i.LinkList_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LinkList_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppendDiff
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
</UL>

<P><STRONG><a name="[35c]"></a>LinkList_Length</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, linklist.o(i.LinkList_Length))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_TimedProcess
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListClear
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppendDiff
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
</UL>

<P><STRONG><a name="[1f3]"></a>LinkQueue_Append</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, linkqueue.o(i.LinkQueue_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Length
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_CtrlAutoNumbered
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Prot_GetOnlineNum
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_Proc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_RetransmissionData
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Prot_CtrlMode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_AllOn
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_AllOff
</UL>

<P><STRONG><a name="[1f1]"></a>LinkQueue_Create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, linkqueue.o(i.LinkQueue_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LinkQueue_Create &rArr; LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_Init
</UL>

<P><STRONG><a name="[2b9]"></a>LinkQueue_Header</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, linkqueue.o(i.LinkQueue_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LinkQueue_Header
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Process
</UL>

<P><STRONG><a name="[2ba]"></a>LinkQueue_Retrieve</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, linkqueue.o(i.LinkQueue_Retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LinkQueue_Retrieve &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Process
</UL>

<P><STRONG><a name="[b0]"></a>LteCom_GpioPowerOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.LteCom_GpioPowerOff))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rescom_task.o(i.ResComTask_Init)
</UL>
<P><STRONG><a name="[af]"></a>LteCom_GpioPowerOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.LteCom_GpioPowerOn))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rescom_task.o(i.ResComTask_Init)
</UL>
<P><STRONG><a name="[360]"></a>LteCom_GpioPowerOnInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i.LteCom_GpioPowerOnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LteCom_GpioPowerOnInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_ComInit
</UL>

<P><STRONG><a name="[361]"></a>MPU6050_AD0_SetLow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu6050.o(i.MPU6050_AD0_SetLow))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
</UL>

<P><STRONG><a name="[362]"></a>MPU6050_GpioInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpu6050.o(i.MPU6050_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU6050_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
</UL>

<P><STRONG><a name="[363]"></a>MPU_HwInit</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_HwInit &rArr; MPU_Read_Byte &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_GpioInit
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_AD0_SetLow
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[1d6]"></a>MPU_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mpu6050.o(i.MPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_Init &rArr; MPU_HwInit &rArr; MPU_Read_Byte &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[369]"></a>MPU_Read_Byte</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MPU_Read_Byte &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Rcv_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
</UL>

<P><STRONG><a name="[36a]"></a>MPU_Read_Len</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mpu6050.o(i.MPU_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Rcv_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
</UL>

<P><STRONG><a name="[367]"></a>MPU_Set_Accel_Fsr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu6050.o(i.MPU_Set_Accel_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Set_Accel_Fsr &rArr; MPU_Write_Byte &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
</UL>

<P><STRONG><a name="[366]"></a>MPU_Set_Gyro_Fsr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu6050.o(i.MPU_Set_Gyro_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Set_Gyro_Fsr &rArr; MPU_Write_Byte &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
</UL>

<P><STRONG><a name="[36b]"></a>MPU_Set_LPF</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mpu6050.o(i.MPU_Set_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
</UL>

<P><STRONG><a name="[368]"></a>MPU_Set_Rate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Set_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MPU_Set_Rate &rArr; MPU_Write_Byte &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
</UL>

<P><STRONG><a name="[365]"></a>MPU_Write_Byte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mpu6050.o(i.MPU_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Write_Byte &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
</UL>

<P><STRONG><a name="[36c]"></a>MPU_Write_Len</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mpu6050.o(i.MPU_Write_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1a9]"></a>ManoEndHandle</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, main_task.o(i.ManoEndHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ManoEndHandle &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetTSubType
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShell
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetTsChar2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBRChar
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Save
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetKey
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBRChar
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange_Reset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[1a8]"></a>ManoStartHandle</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, main_task.o(i.ManoStartHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ManoStartHandle &rArr; ChangeToManoEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShell
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllSlavesConnectStatus
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToManoEventUpload_Send
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunSecond
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetTsChar2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Save
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetKey
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBRChar
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange_Reset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[370]"></a>Mano_Start_Judge</STRONG> (Thumb, 218 bytes, Stack size 104 bytes, main_task.o(i.Mano_Start_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Mano_Start_Judge &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[2e5]"></a>MasterPowerOffCheatEndUploadHandle</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main_task.o(i.MasterPowerOffCheatEndUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = MasterPowerOffCheatEndUploadHandle &rArr; AgaistRuleStopEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalPowerOffHandle
</UL>

<P><STRONG><a name="[2e4]"></a>MasterPowerOffCheatStartUploadHandle</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main_task.o(i.MasterPowerOffCheatStartUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = MasterPowerOffCheatStartUploadHandle &rArr; AgaistRuleStartEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalPowerOffHandle
</UL>

<P><STRONG><a name="[364]"></a>Master_Initialize</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mpu6050.o(i.Master_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Master_Initialize &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_HwInit
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[371]"></a>MedicalAidCheck</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, main_task.o(i.MedicalAidCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = MedicalAidCheck &rArr; BNInjuryWorseHandle &rArr; RSP_InjuryWorseEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBloodLossFrequency
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNInjuryWorseHandle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[2ee]"></a>MineClearanceHandle</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, main_task.o(i.MineClearanceHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = MineClearanceHandle &rArr; PersonnelClearMineEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelClearMineEventUpload_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[2f9]"></a>MineSetHandle</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, main_task.o(i.MineSetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = MineSetHandle &rArr; PersonnelLayMineEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelLayMineEventUpload_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[36e]"></a>ModeChange_Reset</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, main_task.o(i.ModeChange_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ModeChange_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
</UL>

<P><STRONG><a name="[378]"></a>Motor_AddDelayTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor.o(i.Motor_AddDelayTime))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
</UL>

<P><STRONG><a name="[bc]"></a>Motor_GpioInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i.Motor_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>Motor_GpioOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.Motor_GpioOff))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>Motor_GpioOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.Motor_GpioOn))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>Motor_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main_task.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Motor_Init &rArr; Motor_LL_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[377]"></a>Motor_IsSuspend</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, motor.o(i.Motor_IsSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_IsSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TimedProcess
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
</UL>

<P><STRONG><a name="[374]"></a>Motor_LL_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, motor.o(i.Motor_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Motor_LL_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Suspend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[376]"></a>Motor_Off</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, motor.o(i.Motor_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_Motor
</UL>

<P><STRONG><a name="[148]"></a>Motor_On</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, motor.o(i.Motor_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_On &rArr; Motor_IsSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetDelayTime
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Recovery
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_IsSuspend
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_AddDelayTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Process
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOffHandle
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathHandle
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_TolastHandle
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ToRedHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ToBlueHandle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_RestartHandle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_InvalidHandle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TesModeHandle
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_Motor
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[379]"></a>Motor_Recovery</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motor.o(i.Motor_Recovery))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
</UL>

<P><STRONG><a name="[37a]"></a>Motor_SetDelayTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motor.o(i.Motor_SetDelayTime))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
</UL>

<P><STRONG><a name="[375]"></a>Motor_Suspend</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motor.o(i.Motor_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TimedProcess
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Off
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_LL_Init
</UL>

<P><STRONG><a name="[37b]"></a>Motor_TimedProcess</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, motor.o(i.Motor_TimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_TimedProcess &rArr; Motor_IsSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Suspend
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_IsSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[37c]"></a>Mpu6050_GetAccel</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, mpu6050.o(i.Mpu6050_GetAccel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Mpu6050_GetAccel &rArr; mpu_get_accel_reg &rArr; MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_TimedProcess
</UL>

<P><STRONG><a name="[1d8]"></a>Mpu6050_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mpu6050.o(i.Mpu6050_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Mpu6050_Init &rArr; mpu_dmp_init &rArr; mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[37f]"></a>Mpu6050_TimedProcess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mpu6050.o(i.Mpu6050_TimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Mpu6050_TimedProcess &rArr; mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoseAnalyse
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_GetAccel
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[383]"></a>NCBTEventData_Spell</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, main_task.o(i.NCBTEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Send
</UL>

<P><STRONG><a name="[175]"></a>NCBTEventUpload_Handle</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, main_task.o(i.NCBTEventUpload_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = NCBTEventUpload_Handle &rArr; NCBTEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNNCBT
</UL>

<P><STRONG><a name="[382]"></a>NCBTEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.NCBTEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = NCBTEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Handle
</UL>

<P><STRONG><a name="[174]"></a>NCBTEvent_Handle</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main_task.o(i.NCBTEvent_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNNCBT
</UL>

<P><STRONG><a name="[384]"></a>NCBT_DamageCheck</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, main_task.o(i.NCBT_DamageCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = NCBT_DamageCheck &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRand
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[385]"></a>NCB_InjuryEventData_Spell</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main_task.o(i.NCB_InjuryEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCB_InjuryEventUpload_Send
</UL>

<P><STRONG><a name="[195]"></a>NCB_InjuryEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.NCB_InjuryEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = NCB_InjuryEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCB_InjuryEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
</UL>

<P><STRONG><a name="[386]"></a>NMEA_GNRMC_Analysis</STRONG> (Thumb, 696 bytes, Stack size 232 bytes, main_task.o(i.NMEA_GNRMC_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = NMEA_GNRMC_Analysis &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLPosition
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[38b]"></a>NewZigbee_GetLLMagHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new_zigbee.o(i.NewZigbee_GetLLMagHandle))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopSoftReset
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopSetParam
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopGetParam
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartSoftReset
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartGetParam
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_SetTxPwr
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_SetSelfAddr
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Send
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Reset
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelTimedProcess
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelInit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_MakeSendFrame
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartSetParam
</UL>

<P><STRONG><a name="[38d]"></a>NewZigbee_LL_GetParam</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, new_zigbee.o(i.NewZigbee_LL_GetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NewZigbee_LL_GetParam
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelTimedProcess
</UL>

<P><STRONG><a name="[390]"></a>NewZigbee_LL_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, new_zigbee.o(i.NewZigbee_LL_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Reset
</UL>

<P><STRONG><a name="[389]"></a>NewZigbee_LL_SetParam</STRONG> (Thumb, 200 bytes, Stack size 96 bytes, new_zigbee.o(i.NewZigbee_LL_SetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NewZigbee_LL_SetParam &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelTimedProcess
</UL>

<P><STRONG><a name="[38e]"></a>NewZigbee_LL_SoftReset</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, new_zigbee.o(i.NewZigbee_LL_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NewZigbee_LL_SoftReset
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelTimedProcess
</UL>

<P><STRONG><a name="[38a]"></a>NewZigbee_LowLevelInit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, new_zigbee.o(i.NewZigbee_LowLevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NewZigbee_LowLevelInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
</UL>

<P><STRONG><a name="[38c]"></a>NewZigbee_LowLevelTimedProcess</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, new_zigbee.o(i.NewZigbee_LowLevelTimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NewZigbee_LowLevelTimedProcess &rArr; NewZigbee_LL_SetParam &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SoftReset
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SetParam
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_GetParam
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
</UL>

<P><STRONG><a name="[2e7]"></a>NewZigbee_MakeSendFrame</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, new_zigbee.o(i.NewZigbee_MakeSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NewZigbee_MakeSendFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
</UL>

<P><STRONG><a name="[38f]"></a>NewZigbee_Reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, new_zigbee.o(i.NewZigbee_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NewZigbee_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
</UL>

<P><STRONG><a name="[391]"></a>NewZigbee_Send</STRONG> (Thumb, 158 bytes, Stack size 280 bytes, new_zigbee.o(i.NewZigbee_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = NewZigbee_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigRetSend
</UL>

<P><STRONG><a name="[392]"></a>NewZigbee_SetSelfAddr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new_zigbee.o(i.NewZigbee_SetSelfAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NewZigbee_SetSelfAddr &rArr; NewZigbee_StartSetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartSetParam
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
</UL>

<P><STRONG><a name="[394]"></a>NewZigbee_SetTxPwr</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_SetTxPwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NewZigbee_SetTxPwr &rArr; NewZigbee_StartSetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartSetParam
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
</UL>

<P><STRONG><a name="[395]"></a>NewZigbee_StartGetParam</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StartGetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StartGetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[393]"></a>NewZigbee_StartSetParam</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StartSetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StartSetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_SetTxPwr
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_SetSelfAddr
</UL>

<P><STRONG><a name="[396]"></a>NewZigbee_StartSoftReset</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StartSoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StartSoftReset
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[397]"></a>NewZigbee_StopGetParam</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StopGetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StopGetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[398]"></a>NewZigbee_StopSetParam</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StopSetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StopSetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[399]"></a>NewZigbee_StopSoftReset</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StopSoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StopSoftReset
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[156]"></a>NightModeHandle</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main_task.o(i.NightModeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = NightModeHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_NightSound
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetBrightness
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayOrNight_Judge
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[39b]"></a>NonDigitIndirectLanuchEventData_Spell</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, main_task.o(i.NonDigitIndirectLanuchEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonDigitIndirectLanuchEventUpload_Send
</UL>

<P><STRONG><a name="[39a]"></a>NonDigitIndirectLanuchEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.NonDigitIndirectLanuchEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = NonDigitIndirectLanuchEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonDigitIndirectLanuchEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJPShotHandle
</UL>

<P><STRONG><a name="[32e]"></a>PJPShotHandle</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, main_task.o(i.PJPShotHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = PJPShotHandle &rArr; NonDigitIndirectLanuchEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonDigitIndirectLanuchEventUpload_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
</UL>

<P><STRONG><a name="[32f]"></a>PJP_BulletInfo_Sync</STRONG> (Thumb, 234 bytes, Stack size 112 bytes, main_task.o(i.PJP_BulletInfo_Sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PJP_BulletInfo_Sync &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponInfoRet
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyRet
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
</UL>

<P><STRONG><a name="[39c]"></a>PORT_DebugPortSetting</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hc32f46x_gpio.o(i.PORT_DebugPortSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_DebugPortSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrKey_GpioInit
</UL>

<P><STRONG><a name="[24a]"></a>PORT_GetBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_PwrKeyOn
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fume_GpioIsInstalled
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_IsGpioBusySet
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Pin_IsLow
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Pin_IsHigh
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Rcv_Byte
</UL>

<P><STRONG><a name="[137]"></a>PORT_Init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, hc32f46x_gpio.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_GpioPowerOnInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_GpioInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_GpioInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrKey_GpioInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_GpioInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioInit
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LteCom_GpioPowerOnInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fume_GpioInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GpioInit
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_GpioDataInit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_GpioBusyInit
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS_GpioInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TX_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRRcvGpioInit
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_GpioInit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN_GpioInit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_GpioInit
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Initialize
</UL>

<P><STRONG><a name="[39e]"></a>PORT_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>

<P><STRONG><a name="[1c4]"></a>PORT_ResetBits</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LteCom_GpioPowerOff
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_GpioPowerOff
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetOn
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_On
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_On
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_Off
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioOff
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fume_GpioOff
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GpioOff
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_GpioDataReset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS_RESET
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Pin_Low
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_AD0_SetLow
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Rcv_Byte
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[1c5]"></a>PORT_SetBits</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LteCom_GpioPowerOn
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_GpioPowerOn
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetOff
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Off
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_Off
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioOn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fume_GpioOn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GpioOn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_GpioDataSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS_SET
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Pin_High
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Rcv_Byte
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Initialize
</UL>

<P><STRONG><a name="[1c3]"></a>PORT_SetFunc</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, hc32f46x_gpio.o(i.PORT_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_GpioPowerOnInit
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GpioConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_GpioInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_GpioInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrKey_GpioInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_GpioInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fume_GpioInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GpioInit
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_GpioBusyInit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_GpioInit
</UL>

<P><STRONG><a name="[1c6]"></a>PORT_Toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Toggle))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GpioToggle
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Pin_Tog
</UL>

<P><STRONG><a name="[39d]"></a>PORT_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>

<P><STRONG><a name="[40b]"></a>PWC_Fcg0PeriphClockCmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hc32f46x_pwc.o(i.PWC_Fcg0PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWC_Fcg0PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[3d3]"></a>PWC_Fcg1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableClock
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[3ea]"></a>PWC_Fcg2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera3_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera2_Config
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera1_Config
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Unit2_init
</UL>

<P><STRONG><a name="[134]"></a>PWC_Fcg3PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[39f]"></a>PersonnelClearMineEventData_Spell</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main_task.o(i.PersonnelClearMineEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelClearMineEventUpload_Send
</UL>

<P><STRONG><a name="[372]"></a>PersonnelClearMineEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.PersonnelClearMineEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PersonnelClearMineEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelClearMineEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineClearanceHandle
</UL>

<P><STRONG><a name="[3a0]"></a>PersonnelLayMineEventData_Spell</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main_task.o(i.PersonnelLayMineEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelLayMineEventUpload_Send
</UL>

<P><STRONG><a name="[373]"></a>PersonnelLayMineEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.PersonnelLayMineEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PersonnelLayMineEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelLayMineEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MineSetHandle
</UL>

<P><STRONG><a name="[381]"></a>PoseAnalyse</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main_task.o(i.PoseAnalyse))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_TimedProcess
</UL>

<P><STRONG><a name="[1d1]"></a>PowerOnOffInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main_task.o(i.PowerOnOffInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PowerOnOffInit &rArr; PwrKey_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrKey_GpioInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[3a1]"></a>ProtDeal_HardCtrl_48k</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main_task.o(i.ProtDeal_HardCtrl_48k))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ProtDeal_HardCtrl_48k &rArr; CtrlHelmetLaserOnOff &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_RetransmissionData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_HelmetBase
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHelmetLaserOnOff
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_TaskHandleGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[3a2]"></a>ProtDeal_HardCtrl_Fume</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main_task.o(i.ProtDeal_HardCtrl_Fume))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ProtDeal_HardCtrl_Fume &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHelmetFume
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_SendToUpcom
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetFireInstallFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[3a4]"></a>ProtDeal_HardCtrl_Motor</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main_task.o(i.ProtDeal_HardCtrl_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ProtDeal_HardCtrl_Motor &rArr; Motor_On &rArr; Motor_IsSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[3ab]"></a>ProtDeal_HardCtrl_Power</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main_task.o(i.ProtDeal_HardCtrl_Power))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[3a5]"></a>ProtDeal_HardCtrl_RunLed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main_task.o(i.ProtDeal_HardCtrl_RunLed))
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetBrightness
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[3a6]"></a>ProtDeal_HardCtrl_Voice</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main_task.o(i.ProtDeal_HardCtrl_Voice))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProtDeal_HardCtrl_Voice &rArr; Wtn6_Play &rArr; Wtn6_LPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[3a7]"></a>Prot_HardCtrl_Analysis</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, main_task.o(i.Prot_HardCtrl_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Prot_HardCtrl_Analysis &rArr; ProtDeal_HardCtrl_Fume &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_RetransmissionData
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_RetransmissionData
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_TaskHandleGet
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_TaskHandleGet
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_Voice
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_RunLed
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_Power
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_Motor
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_Fume
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_48k
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[3b2]"></a>Protocal_CmdProcess_GetAppVersion</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, upgrade.o(i.Protocal_CmdProcess_GetAppVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Protocal_CmdProcess_GetAppVersion &rArr; Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[3b3]"></a>Protocal_CmdProcess_GetDevID</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, upgrade.o(i.Protocal_CmdProcess_GetDevID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Protocal_CmdProcess_GetDevID &rArr; Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[3b4]"></a>Protocal_CmdProcess_GetDevMac</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, upgrade.o(i.Protocal_CmdProcess_GetDevMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Protocal_CmdProcess_GetDevMac &rArr; Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[3b7]"></a>Protocal_CmdProcess_SetDevMac</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, upgrade.o(i.Protocal_CmdProcess_SetDevMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Protocal_CmdProcess_SetDevMac &rArr; Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParamValid
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetWMac
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[3b8]"></a>Protocal_Find55AAFrame</STRONG> (Thumb, 252 bytes, Stack size 36 bytes, protocal.o(i.Protocal_Find55AAFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Protocal_Find55AAFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_MakeU8Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalParse
</UL>

<P><STRONG><a name="[345]"></a>Protocal_Find5AAAFrame</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, protocal.o(i.Protocal_Find5AAAFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Protocal_Find5AAAFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
</UL>

<P><STRONG><a name="[29d]"></a>Protocal_FindHmi268bFrame</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, protocal.o(i.Protocal_FindHmi268bFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Protocal_FindHmi268bFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Process
</UL>

<P><STRONG><a name="[2bb]"></a>Protocal_FindIR38_Frame</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, protocal.o(i.Protocal_FindIR38_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Protocal_FindIR38_Frame &rArr; Xor_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Process
</UL>

<P><STRONG><a name="[3ba]"></a>Protocal_FindInterConn_Frame</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, protocal.o(i.Protocal_FindInterConn_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Protocal_FindInterConn_Frame &rArr; Xor_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[1bd]"></a>Protocal_GetU16Sum</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, protocal.o(i.Protocal_GetU16Sum))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetADCChannelValue
</UL>

<P><STRONG><a name="[2e9]"></a>Protocal_MakeU32Sum</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, protocal.o(i.Protocal_MakeU32Sum))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HardCtrl_Analysis
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
</UL>

<P><STRONG><a name="[3b9]"></a>Protocal_MakeU8Sum</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, protocal.o(i.Protocal_MakeU8Sum))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_Find55AAFrame
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_SendToUpcom
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_SendToHelmet
</UL>

<P><STRONG><a name="[336]"></a>Protocal_ProtocolMakeShort55AA</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, protocal.o(i.Protocal_ProtocolMakeShort55AA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_MakeU8Sum
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtAddr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDownloadProcess
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_SetDevMac
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetDevMac
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetDevID
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetAppVersion
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_Ret
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_RESET_REPLACE_ADDR
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_RESET_DOWNLOAD_ADDR
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_START
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_END
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverHardCtrl
</UL>

<P><STRONG><a name="[3bc]"></a>Protocal_UpgradeProcess</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, upgrade.o(i.Protocal_UpgradeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Protocal_UpgradeProcess &rArr; Protocal_CmdProcess_DOWNLOAD &rArr; Protocal_CmdProcess_Ret &rArr; Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_SetDevMac
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetDevMac
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetDevID
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetAppVersion
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_RESET_REPLACE_ADDR
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_RESET_DOWNLOAD_ADDR
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_START
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_END
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalProcess
</UL>

<P><STRONG><a name="[1ae]"></a>Protocol_FindC1XORFrame</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, protocal.o(i.Protocol_FindC1XORFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Protocol_FindC1XORFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backstage_ProtocalParse
</UL>

<P><STRONG><a name="[14c]"></a>PwrEnable_GpioInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpio.o(i.PwrEnable_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwrEnable_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnOffInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOnOffInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_Off
</UL>

<P><STRONG><a name="[149]"></a>PwrEnable_Off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(i.PwrEnable_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PwrEnable_Off &rArr; PwrEnable_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOffHandle
</UL>

<P><STRONG><a name="[14b]"></a>PwrKey_GpioInit</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gpio.o(i.PwrKey_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PwrKey_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnOffInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOnOffInit
</UL>

<P><STRONG><a name="[3bd]"></a>RGB</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lasercom_task.o(i.RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RGB &rArr; LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>RLed_GpioInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i.RLed_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RLed_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(i.StaLed_Init)
</UL>
<P><STRONG><a name="[b6]"></a>RLed_Off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.RLed_Off))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(i.StaLed_Init)
</UL>
<P><STRONG><a name="[b5]"></a>RLed_On</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.RLed_On))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(i.StaLed_Init)
</UL>
<P><STRONG><a name="[3bf]"></a>RSP_CtrlIntervalEventData_Spell</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, main_task.o(i.RSP_CtrlIntervalEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUpload_Send
</UL>

<P><STRONG><a name="[16d]"></a>RSP_CtrlIntervalEventUploadHandle</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, main_task.o(i.RSP_CtrlIntervalEventUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = RSP_CtrlIntervalEventUploadHandle &rArr; RSP_CtrlIntervalEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUpload_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIntervalSet
</UL>

<P><STRONG><a name="[3be]"></a>RSP_CtrlIntervalEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.RSP_CtrlIntervalEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = RSP_CtrlIntervalEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUploadHandle
</UL>

<P><STRONG><a name="[3c1]"></a>RSP_CtrlSupplementEventData_Spell</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, main_task.o(i.RSP_CtrlSupplementEventData_Spell))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RSP_CtrlSupplementEventData_Spell
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUpload_Send
</UL>

<P><STRONG><a name="[185]"></a>RSP_CtrlSupplementEventUploadHandle</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, main_task.o(i.RSP_CtrlSupplementEventUploadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = RSP_CtrlSupplementEventUploadHandle &rArr; RSP_CtrlSupplementEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUpload_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRAmmuGetHandle
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSupplement
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[3c0]"></a>RSP_CtrlSupplementEventUpload_Send</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, main_task.o(i.RSP_CtrlSupplementEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = RSP_CtrlSupplementEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUploadHandle
</UL>

<P><STRONG><a name="[3c2]"></a>RSP_InjuryWorseEventData_Spell</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, main_task.o(i.RSP_InjuryWorseEventData_Spell))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_InjuryWorseEventUpload_Send
</UL>

<P><STRONG><a name="[169]"></a>RSP_InjuryWorseEventUpload_Send</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, main_task.o(i.RSP_InjuryWorseEventUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = RSP_InjuryWorseEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventStorageToFlash
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_InjuryWorseEventData_Spell
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNInjuryWorseHandle
</UL>

<P><STRONG><a name="[3c3]"></a>RX_Pin_High</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir.o(i.RX_Pin_High))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Rcv_Init
</UL>

<P><STRONG><a name="[338]"></a>RX_Pin_IsHigh</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ir.o(i.RX_Pin_IsHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RX_Pin_IsHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Rcv_Handle
</UL>

<P><STRONG><a name="[337]"></a>RX_Pin_IsLow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ir.o(i.RX_Pin_IsLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RX_Pin_IsLow
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Rcv_Handle
</UL>

<P><STRONG><a name="[15e]"></a>RecordRcvBackStageProtocolTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main_task.o(i.RecordRcvBackStageProtocolTime))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSupplement
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSet
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudge
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIntervalSet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIndirectAim
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNHelicopterVoiceCtrl
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ManoParam_Set
</UL>

<P><STRONG><a name="[316]"></a>RemapHurtPart</STRONG> (Thumb, 268 bytes, Stack size 192 bytes, lasercom_task.o(i.RemapHurtPart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RemapHurtPart &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle_Master
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
</UL>

<P><STRONG><a name="[353]"></a>RemapHurtPartSpecial</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, lasercom_task.o(i.RemapHurtPartSpecial))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RemapHurtPartSpecial
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle_Master
</UL>

<P><STRONG><a name="[1c2]"></a>ResComTask_HandleGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rescom_task.o(i.ResComTask_HandleGet))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_LowLevelTimedProcess
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventNoRspRestore
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryReplacementTask
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_FourGParam_Set
</UL>

<P><STRONG><a name="[3c4]"></a>ResComTask_Init</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, rescom_task.o(i.ResComTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ResComTask_Init &rArr; SComTask_Init &rArr; SComTask_SendListCreate &rArr; LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_GetLLMagHandle
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SetListNodeLen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_HandleGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c6]"></a>ResComTask_Process</STRONG> (Thumb, 720 bytes, Stack size 40 bytes, rescom_task.o(i.ResComTask_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = ResComTask_Process &rArr; BackStageNewAnalysis &rArr; BNSoldierManoParamSet &rArr; CtrlManoParamEventUploadHandle &rArr; CtrlManoParamEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_LowLevelTimedProcess
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessRequest_Send
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_TimedProcess
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_FindNMEA0183String
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backstage_ProtocalParse
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStage_Frame_Parse
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageNewAnalysis
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageFactoryDebug
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtHandle
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalProcess
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalParse
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ConfigSendFunc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_HandleGet
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GNRMC_Analysis
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBT_DamageCheck
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MedicalAidCheck
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a3]"></a>ResComTask_SendToUpcom</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, rescom_task.o(i.ResComTask_SendToUpcom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ResComTask_SendToUpcom &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_MakeU8Sum
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtAddr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_Fume
</UL>

<P><STRONG><a name="[ac]"></a>ResCom_ComInit</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, rescom_task.o(i.ResCom_ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ResCom_ComInit &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComConfiguration
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LteCom_GpioPowerOnInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rescom_task.o(i.ResComTask_Init)
</UL>
<P><STRONG><a name="[ad]"></a>ResCom_ComRead</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rescom_task.o(i.ResCom_ComRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ResCom_ComRead
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rescom_task.o(i.ResComTask_Init)
</UL>
<P><STRONG><a name="[ae]"></a>ResCom_ComWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rescom_task.o(i.ResCom_ComWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ResCom_ComWrite &rArr; Uart_SendBuf &rArr; Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rescom_task.o(i.ResComTask_Init)
</UL>
<P><STRONG><a name="[32b]"></a>ResCom_FourGParam_Set</STRONG> (Thumb, 268 bytes, Stack size 88 bytes, main_task.o(i.ResCom_FourGParam_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ResCom_FourGParam_Set &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_HandleGet
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
</UL>

<P><STRONG><a name="[3c5]"></a>ResCom_GetLLMagHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rescom_task.o(i.ResCom_GetLLMagHandle))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Init
</UL>

<P><STRONG><a name="[3c7]"></a>ResCom_LowLevelTimedProcess</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, rescom_task.o(i.ResCom_LowLevelTimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ResCom_LowLevelTimedProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_HandleGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[163]"></a>ReverseMapHurtPart</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, main_task.o(i.ReverseMapHurtPart))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIndirectAim
</UL>

<P><STRONG><a name="[3cd]"></a>ReviveHandle</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main_task.o(i.ReviveHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ReviveHandle &rArr; CtrlHelmetLaserOff &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_HandleGet
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHelmetLaserOff
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_AllOff
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetTsChar1
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>

<P><STRONG><a name="[b1]"></a>RunLed_GpioInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i.RunLed_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RunLed_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(i.RunLed_Init)
</UL>
<P><STRONG><a name="[1d2]"></a>RunLed_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main_task.o(i.RunLed_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RunLed_Init &rArr; Led_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[b3]"></a>RunLed_Off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.RunLed_Off))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(i.RunLed_Init)
</UL>
<P><STRONG><a name="[b2]"></a>RunLed_On</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.RunLed_On))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task.o(i.RunLed_Init)
</UL>
<P><STRONG><a name="[2a2]"></a>Rx_CRC_CCITT</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, protocal.o(i.Rx_CRC_CCITT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Rx_CRC_CCITT
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenSleepHandle
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenDayOrNightHandle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text1Show
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text0Show
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_CheckOnline
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_BarShow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_BUTTONShow
</UL>

<P><STRONG><a name="[297]"></a>SComTask_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, comtask.o(i.SComTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SComTask_Init &rArr; SComTask_SendListCreate &rArr; LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Init
</UL>

<P><STRONG><a name="[3aa]"></a>SComTask_RetransmissionData</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, comtask.o(i.SComTask_RetransmissionData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SComTask_RetransmissionData &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prot_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[131]"></a>SComTask_SendListAppend</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, comtask.o(i.SComTask_SendListAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Length
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessRequest_Send
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenSleepHandle
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenDayOrNightHandle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text1Show
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text0Show
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_CheckOnline
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_BarShow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_BUTTONShow
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_RetransmissionData
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUpload_Send
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUpload_Send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUpload_Send
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToManoEventUpload_Send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtUpload_Send
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUpload_Send
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_SendToUpcom
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_FourGParam_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_InjuryWorseEventUpload_Send
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUpload_Send
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUpload_Send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelLayMineEventUpload_Send
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelClearMineEventUpload_Send
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonDigitIndirectLanuchEventUpload_Send
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCB_InjuryEventUpload_Send
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Send
</UL>

<P><STRONG><a name="[2e8]"></a>SComTask_SendListAppendDiff</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, comtask.o(i.SComTask_SendListAppendDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Length
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Insert
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
</UL>

<P><STRONG><a name="[3cf]"></a>SComTask_SendListClear</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, comtask.o(i.SComTask_SendListClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SComTask_SendListClear &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Length
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Delete
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_TimedProcess
</UL>

<P><STRONG><a name="[3ce]"></a>SComTask_SendListCreate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comtask.o(i.SComTask_SendListCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SComTask_SendListCreate &rArr; LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_Init
</UL>

<P><STRONG><a name="[3d1]"></a>SComTask_SendListDelete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, comtask.o(i.SComTask_SendListDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_TimedProcess
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDeleteByFrameId
</UL>

<P><STRONG><a name="[29f]"></a>SComTask_SendListDeleteByFrameId</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, comtask.o(i.SComTask_SendListDeleteByFrameId))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Length
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Get
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Analysis
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppendDiff
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HardCtrl_Analysis
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponLockRet
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponInfoRet
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyRet
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConnectRet
</UL>

<P><STRONG><a name="[298]"></a>SComTask_SetListNodeLen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comtask.o(i.SComTask_SetListNodeLen))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Init
</UL>

<P><STRONG><a name="[29b]"></a>SComTask_TimedProcess</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, comtask.o(i.SComTask_TimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SComTask_TimedProcess &rArr; SComTask_SendListClear &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Length
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDelete
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListClear
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Process
</UL>

<P><STRONG><a name="[2b0]"></a>SDA_IN_GpioInit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(i.SDA_IN_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDA_IN_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Rcv_Byte
</UL>

<P><STRONG><a name="[2ad]"></a>SDA_OUT_GpioInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mpu6050.o(i.SDA_OUT_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[3d2]"></a>SPI2_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, spi.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI2_Init &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_HardWareInit
</UL>

<P><STRONG><a name="[d3]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spi.o(i.SPI2_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extflash.o(.constdata)
</UL>
<P><STRONG><a name="[3d9]"></a>SPI2_SetSpeed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(i.SPI2_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClockDiv
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_HardWareInit
</UL>

<P><STRONG><a name="[3d5]"></a>SPI_Cmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[3d6]"></a>SPI_GetFlag</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_GetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[3d4]"></a>SPI_Init</STRONG> (Thumb, 410 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[3d8]"></a>SPI_ReceiveData8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[3d7]"></a>SPI_SendData8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_SendData8))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[3da]"></a>SPI_SetClockDiv</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_SetClockDiv))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
</UL>

<P><STRONG><a name="[16c]"></a>SaveDrillState</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main_task.o(i.SaveDrillState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SaveDrillState &rArr; BackupDrillState &rArr; DrillStateWriteToOutFlash &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupDrillState
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizeState
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNTerminalParamHandle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIntervalSet
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[33a]"></a>Send_High</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir.o(i.Send_High))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_High &rArr; Carwave_Timer_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Pin_Low
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carwave_Timer_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Tx_Handle
</UL>

<P><STRONG><a name="[339]"></a>Send_Low</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ir.o(i.Send_Low))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send_Low
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carwave_Timer_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_byte
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Tx_Handle
</UL>

<P><STRONG><a name="[388]"></a>SetLPosition</STRONG> (Thumb, 520 bytes, Stack size 20 bytes, main_task.o(i.SetLPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetLPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GNRMC_Analysis
</UL>

<P><STRONG><a name="[194]"></a>SetRand</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.SetRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetRand &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReliefBlood
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryBloodByExplodePart
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBT_DamageCheck
</UL>

<P><STRONG><a name="[354]"></a>ShotAroundHandle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main_task.o(i.ShotAroundHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ShotAroundHandle &rArr; Wtn6_Play &rArr; Wtn6_LPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[319]"></a>SlaverMag_GetHandleByMac</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, main_task.o(i.SlaverMag_GetHandleByMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SlaverMag_GetHandleByMac &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_HelmetStatusRet
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_SendToHelmet
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponShootingInquire
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponLockRet
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponInfoRet
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Lightweapon_AmmuInfoSync
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Heavyweapon_AmmuInfoSync
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyRet
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverStatusRet
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConnectRet
</UL>

<P><STRONG><a name="[288]"></a>SlaverMag_GetHandleByType</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, main_task.o(i.SlaverMag_GetHandleByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SlaverMag_GetHandleByType
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_HelmetBase
</UL>

<P><STRONG><a name="[2fd]"></a>SlaverMag_ListInit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, main_task.o(i.SlaverMag_ListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SlaverMag_ListInit &rArr; InterConn_SlaverConnect &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_GetSlaverParam
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParamValid
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetSlaverCnt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverConnect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_LightWeapon
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeapon
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[3e2]"></a>SlaverMag_TimedProcess</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, main_task.o(i.SlaverMag_TimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SlaverMag_TimedProcess &rArr; InterConn_SlaverConnect &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlaverStatus
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverConnect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_LightWeapon
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeapon
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[202]"></a>SoftTimerInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(i.SoftTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[3f1]"></a>SoftTimerIntervalProcess</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timer.o(i.SoftTimerIntervalProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SoftTimerIntervalProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[3e3]"></a>SoftTimerStop</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(i.SoftTimerStop))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerInit
</UL>

<P><STRONG><a name="[3c8]"></a>SoliderStatusUpload_Send</STRONG> (Thumb, 1366 bytes, Stack size 192 bytes, rescom_task.o(i.SoliderStatusUpload_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SoliderStatusUpload_Send &rArr; SComTask_SendListAppend &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetRid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetPid
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllSlavesConnectStatus
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryDegree
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWeaponNum
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
</UL>

<P><STRONG><a name="[1d3]"></a>StaLed_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main_task.o(i.StaLed_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StaLed_Init &rArr; Led_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[3b1]"></a>StartDownloadProcess</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, upgrade.o(i.StartDownloadProcess))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_START
</UL>

<P><STRONG><a name="[228]"></a>StopDownloadProcess</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, upgrade.o(i.StopDownloadProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSum
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
</UL>

<P><STRONG><a name="[22a]"></a>SynchronizeState</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, main_task.o(i.SynchronizeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SynchronizeState
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetTSubType
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetKey
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetDayOrNight
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBlood
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBRChar
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetActLaserCnt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateParamHandle
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDrillState
</UL>

<P><STRONG><a name="[1f6]"></a>SysClkIni</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, timer.o(i.SysClkIni))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysClkIni &rArr; CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[3e1]"></a>SysParam_GetSlaverParam</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, param.o(i.SysParam_GetSlaverParam))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
</UL>

<P><STRONG><a name="[1fc]"></a>SysParam_Init</STRONG> (Thumb, 94 bytes, Stack size 176 bytes, param.o(i.SysParam_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SysParam_Init &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIFlashCheckSum_U32
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_SetDefaultValue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[17f]"></a>SysParam_Save</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, param.o(i.SysParam_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysParam_Save &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIFlashCheckSum_U32
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
</UL>

<P><STRONG><a name="[32c]"></a>SysParam_SetDefaultValue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, param.o(i.SysParam_SetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SysParam_SetDefaultValue
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParam_Init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
</UL>

<P><STRONG><a name="[32d]"></a>SysParam_SetSlaverParam</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, param.o(i.SysParam_SetSlaverParam))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
</UL>

<P><STRONG><a name="[2cb]"></a>SysScheduleProcess</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, timer.o(i.SysScheduleProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysScheduleProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ005_Handler
</UL>

<P><STRONG><a name="[3e9]"></a>SysScheduleTimerInit</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, timer.o(i.SysScheduleTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysScheduleTimerInit &rArr; TIMER4_CNT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Start
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_ClearCountVal
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dd]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, system_hc32f46x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
</UL>

<P><STRONG><a name="[a0]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, system_hc32f46x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(.text)
</UL>
<P><STRONG><a name="[3ef]"></a>System_TimedTask</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, main.o(i.System_TimedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = System_TimedTask &rArr; EventNoRspRestore &rArr; Uart_SendBuf &rArr; Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_byg_sMpu6050Mag
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_TimedProcess
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnUpLoadEvtNumCalcu
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Train_Mode_Revive
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerIntervalProcess
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_TimedProcess
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_TimedProcess
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TimedProcess
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mano_Start_Judge
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_TimedProcess
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_LowLevelTimedProcess
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalEventHandle
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventNoRspRestore
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableChangeBatHandle
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateParamHandle
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayOrNight_Judge
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_TimedProcess
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOnOffTimedProcess
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOffHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>TIM4_Unit2_Sleep_Us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wtn6.o(i.TIM4_Unit2_Sleep_Us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM4_Unit2_Sleep_Us &rArr; Timer4_Unit2_init &rArr; TIMER4_CNT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Unit2_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtn6.o(.constdata)
</UL>
<P><STRONG><a name="[3f5]"></a>TIMER0_BaseInit</STRONG> (Thumb, 1486 bytes, Stack size 32 bytes, hc32f46x_timer0.o(i.TIMER0_BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
</UL>

<P><STRONG><a name="[3f6]"></a>TIMER0_ClearFlag</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_ClearFlag &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
</UL>

<P><STRONG><a name="[3f7]"></a>TIMER0_Cmd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>

<P><STRONG><a name="[3f8]"></a>TIMER0_HardTriggerInit</STRONG> (Thumb, 1012 bytes, Stack size 16 bytes, hc32f46x_timer0.o(i.TIMER0_HardTriggerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER0_HardTriggerInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
</UL>

<P><STRONG><a name="[3f9]"></a>TIMER0_WriteCntReg</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_WriteCntReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_WriteCntReg &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
</UL>

<P><STRONG><a name="[3ed]"></a>TIMER4_CNT_ClearCountVal</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_ClearCountVal))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Unit2_init
</UL>

<P><STRONG><a name="[2c9]"></a>TIMER4_CNT_ClearIrqFlag</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_ClearIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ005_Handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ004_Handler
</UL>

<P><STRONG><a name="[2c8]"></a>TIMER4_CNT_GetIrqFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_GetIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ005_Handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ004_Handler
</UL>

<P><STRONG><a name="[3eb]"></a>TIMER4_CNT_Init</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER4_CNT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Unit2_init
</UL>

<P><STRONG><a name="[3ee]"></a>TIMER4_CNT_Start</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_Start))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Unit2_init
</UL>

<P><STRONG><a name="[2ca]"></a>TIMER4_CNT_Stop</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ004_Handler
</UL>

<P><STRONG><a name="[3fc]"></a>TIMERA_BaseInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, hc32f46x_timera.o(i.TIMERA_BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMERA_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera3_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera2_Config
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera1_Config
</UL>

<P><STRONG><a name="[1df]"></a>TIMERA_ClearFlag</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, hc32f46x_timera.o(i.TIMERA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ002_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ001_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Close
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carwave_Timer_Close
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Close
</UL>

<P><STRONG><a name="[1e0]"></a>TIMERA_Cmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hc32f46x_timera.o(i.TIMERA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera3_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera2_Config
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera1_Config
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Open
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Close
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carwave_Timer_Open
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carwave_Timer_Close
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Open
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Close
</UL>

<P><STRONG><a name="[2c1]"></a>TIMERA_GetFlag</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, hc32f46x_timera.o(i.TIMERA_GetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ002_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ001_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
</UL>

<P><STRONG><a name="[3fd]"></a>TIMERA_IrqCmd</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, hc32f46x_timera.o(i.TIMERA_IrqCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMERA_IrqCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera3_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera2_Config
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera1_Config
</UL>

<P><STRONG><a name="[1e5]"></a>TIMERA_SetCurrCount</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hc32f46x_timera.o(i.TIMERA_SetCurrCount))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Zero
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Zero
</UL>

<P><STRONG><a name="[3fa]"></a>TerminalInjury_Save</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, main_task.o(i.TerminalInjury_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TerminalInjury_Save &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>

<P><STRONG><a name="[301]"></a>TesModeHandle</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main_task.o(i.TesModeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TesModeHandle &rArr; LaserCom_Prot_CtrlMode &rArr; LinkQueue_Append &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetRunMode
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_HandleGet
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Prot_CtrlMode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[3f4]"></a>Timer4_Unit2_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wtn6.o(i.Timer4_Unit2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer4_Unit2_init &rArr; TIMER4_CNT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Start
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_ClearCountVal
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Unit2_Sleep_Us
</UL>

<P><STRONG><a name="[285]"></a>Timera1_Config</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ir.o(i.Timera1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timera1_Config &rArr; TIMERA_IrqCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_IrqCmd
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_BaseInit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Init
</UL>

<P><STRONG><a name="[1e8]"></a>Timera2_Config</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ir.o(i.Timera2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timera2_Config &rArr; TIMERA_IrqCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_IrqCmd
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_BaseInit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carwave_Timer_Init
</UL>

<P><STRONG><a name="[1e2]"></a>Timera3_Config</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ir.o(i.Timera3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timera3_Config &rArr; TIMERA_IrqCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_IrqCmd
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_BaseInit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Init
</UL>

<P><STRONG><a name="[22e]"></a>TrainModeInit</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, main_task.o(i.TrainModeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TrainModeInit &rArr; Wtn6_Play &rArr; Wtn6_LPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetKey
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetDayOrNight
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBlood
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetBRChar
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetActLaserCnt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateRecovery
</UL>

<P><STRONG><a name="[3f3]"></a>Train_Mode_Revive</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, main_task.o(i.Train_Mode_Revive))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Train_Mode_Revive &rArr; UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetBlood
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[33b]"></a>Tx_Pin_Low</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir.o(i.Tx_Pin_Low))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Tx_Init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_High
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Tx_Handle
</UL>

<P><STRONG><a name="[2c3]"></a>Tx_Pin_Tog</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir.o(i.Tx_Pin_Tog))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ001_Handler
</UL>

<P><STRONG><a name="[408]"></a>USART_ClearStatus</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[401]"></a>USART_DeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[409]"></a>USART_FuncCmd</STRONG> (Thumb, 554 bytes, Stack size 12 bytes, hc32f46x_usart.o(i.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_Interrupt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[417]"></a>USART_GetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>

<P><STRONG><a name="[418]"></a>USART_RecData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_RecData))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RI
</UL>

<P><STRONG><a name="[41a]"></a>USART_SendData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
</UL>

<P><STRONG><a name="[3fe]"></a>USART_SetBaudrate</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hc32f46x_usart.o(i.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART_SetBaudrate &rArr; SetScBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[402]"></a>USART_UART_Init</STRONG> (Thumb, 646 bytes, Stack size 24 bytes, hc32f46x_usart.o(i.USART_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[2a0]"></a>Uart_ComConfiguration</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, uart.o(i.Uart_ComConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart_ComConfiguration &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_ComInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_ComInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_ComInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComInit
</UL>

<P><STRONG><a name="[2a1]"></a>Uart_ComInit</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, uart.o(i.Uart_ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GpioConfig
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableClock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_ComInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_ComInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_ComInit
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComInit
</UL>

<P><STRONG><a name="[40a]"></a>Uart_EnableIntError</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart.o(i.Uart_EnableIntError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_EnableIntError
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[406]"></a>Uart_EnableIntRx</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, uart.o(i.Uart_EnableIntRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart_EnableIntRx &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[403]"></a>Uart_EnableIntTx</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, uart.o(i.Uart_EnableIntTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_EnableIntTx
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[2cc]"></a>Uart_IrqHandle_EI</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart.o(i.Uart_IrqHandle_EI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_IrqHandle_EI
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ024_Handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ018_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ012_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
</UL>

<P><STRONG><a name="[2cd]"></a>Uart_IrqHandle_RI</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart.o(i.Uart_IrqHandle_RI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_IrqHandle_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ025_Handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ019_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ013_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ007_Handler
</UL>

<P><STRONG><a name="[2ce]"></a>Uart_IrqHandle_RTO</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, uart.o(i.Uart_IrqHandle_RTO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart_IrqHandle_RTO &rArr; TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransferCnt
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDesAddress
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ026_Handler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ020_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ014_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ008_Handler
</UL>

<P><STRONG><a name="[2d0]"></a>Uart_IrqHandle_TCI</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart.o(i.Uart_IrqHandle_TCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Uart_IrqHandle_TCI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ028_Handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ022_Handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ016_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ010_Handler
</UL>

<P><STRONG><a name="[2cf]"></a>Uart_IrqHandle_TI</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, uart.o(i.Uart_IrqHandle_TI))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Uart_IrqHandle_TI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ027_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ021_Handler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ015_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ009_Handler
</UL>

<P><STRONG><a name="[238]"></a>Uart_SendBuf</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart.o(i.Uart_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Uart_SendBuf &rArr; Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_Poll
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_Interrupt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_ComWrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_ComWrite
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_ComWrite
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventNoRspRestore
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComWrite
</UL>

<P><STRONG><a name="[41d]"></a>Uart_SendBuf_DMA</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, uart.o(i.Uart_SendBuf_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransferCnt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSrcAddress
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>

<P><STRONG><a name="[41c]"></a>Uart_SendBuf_Interrupt</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart.o(i.Uart_SendBuf_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart_SendBuf_Interrupt &rArr; ttcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttcpy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>

<P><STRONG><a name="[41b]"></a>Uart_SendBuf_Poll</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, uart.o(i.Uart_SendBuf_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Uart_SendBuf_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>

<P><STRONG><a name="[159]"></a>UnUpLoadEvtNumCalcu</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main_task.o(i.UnUpLoadEvtNumCalcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UnUpLoadEvtNumCalcu
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
</UL>

<P><STRONG><a name="[165]"></a>UpdateDamage</STRONG> (Thumb, 1268 bytes, Stack size 48 bytes, main_task.o(i.UpdateDamage))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UpdateDamage &rArr; DeathHandle &rArr; CtrlHelmetFume &rArr; HardCtrl_HelmetBase &rArr; InterConn_SlaverHardCtrl &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_CtrlLedToggle
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInjuryBloodByHurtDegree
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Save
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalInjury_Save
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReviveHandle
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle_Master
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Train_Mode_Revive
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_RescueResult_Inquire
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalPowerOffHandle
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_WorseHandle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SlightHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SevereHandle
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ReviveHandle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_RestartHandle
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ReliefHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ModerateHandle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_DeathHandle
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_CriticalHandle
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIndirectAim
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBT_DamageCheck
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MedicalAidCheck
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
</UL>

<P><STRONG><a name="[3cb]"></a>Update_ConfigSendFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, upgrade.o(i.Update_ConfigSendFunc))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[1fd]"></a>Update_MagInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, upgrade.o(i.Update_MagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Update_MagInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[3ca]"></a>Update_ProtocalParse</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, upgrade.o(i.Update_ProtocalParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Update_ProtocalParse &rArr; Protocal_Find55AAFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_Find55AAFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[3cc]"></a>Update_ProtocalProcess</STRONG> (Thumb, 58 bytes, Stack size 72 bytes, upgrade.o(i.Update_ProtocalProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Update_ProtocalProcess &rArr; DownloadProcess_Sync &rArr; StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[41f]"></a>Update_SetDevMac</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, upgrade.o(i.Update_SetDevMac))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[201]"></a>Update_SetDevPID</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, upgrade.o(i.Update_SetDevPID))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[200]"></a>Update_SetDevRID</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, upgrade.o(i.Update_SetDevRID))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[1ff]"></a>Update_SetDevTSubType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, upgrade.o(i.Update_SetDevTSubType))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[1fe]"></a>Update_SetDevTType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, upgrade.o(i.Update_SetDevTType))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[21e]"></a>UserParam_GetActLaserCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetActLaserCnt))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ButtonMsgHandle
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_TimedProcess
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Analysis
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossHandle
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_CtrlLedToggle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_CtrlLedOn
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizeState
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetPartitionByID
</UL>

<P><STRONG><a name="[21f]"></a>UserParam_GetActLaserCnt1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetActLaserCnt1))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossHandle
</UL>

<P><STRONG><a name="[269]"></a>UserParam_GetBRChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetBRChar))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Belong
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizeState
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[18e]"></a>UserParam_GetBlood</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetBlood))
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Train_Mode_Revive
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeInstallHandle
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ReviveHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_NCBHandle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_DeathHandle
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizeState
</UL>

<P><STRONG><a name="[31f]"></a>UserParam_GetCIdegree</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetCIdegree))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_StateInfo_Inquire
</UL>

<P><STRONG><a name="[3e4]"></a>UserParam_GetDayOrNight</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetDayOrNight))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizeState
</UL>

<P><STRONG><a name="[249]"></a>UserParam_GetFireInstallFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetFireInstallFlg))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeInstallHandle
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_Fume
</UL>

<P><STRONG><a name="[1ed]"></a>UserParam_GetKey</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetKey))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_ID_Inquire
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuInfo_Inquire
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollateralDamage
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizeState
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverConnect
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>

<P><STRONG><a name="[31d]"></a>UserParam_GetLPos</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetLPos))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_StateInfo_Inquire
</UL>

<P><STRONG><a name="[180]"></a>UserParam_GetSlaverCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetSlaverCnt))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Battery
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_TimedProcess
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableChangeBatHandle
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalHelmetDisconHandle
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllSlavesConnectStatus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_TolastHandle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWeaponNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByType
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJP_BulletInfo_Sync
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange_Reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Poweron
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>

<P><STRONG><a name="[19f]"></a>UserParam_GetSlaverMag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetSlaverMag))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Battery
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_TimedProcess
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableChangeBatHandle
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalHelmetDisconHandle
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_Slaver_PowerOff
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllSlavesConnectStatus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_TolastHandle
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetSlaverMag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetWeaponNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByType
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJP_BulletInfo_Sync
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange_Reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Poweron
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyNum
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>

<P><STRONG><a name="[31e]"></a>UserParam_GetTime1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetTime1))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_StateInfo_Inquire
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[335]"></a>UserParam_GetTsChar2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main_task.o(i.UserParam_GetTsChar2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserParam_GetTsChar2
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverConnect
</UL>

<P><STRONG><a name="[320]"></a>UserParam_GetWMac</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetWMac))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_MacGet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[325]"></a>UserParam_GetWTxPwr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_GetWTxPwr))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[186]"></a>UserParam_GetWeaponNum</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main_task.o(i.UserParam_GetWeaponNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UserParam_GetWeaponNum
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuInfo_Inquire
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSupplementHandle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponInfoRet
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>

<P><STRONG><a name="[420]"></a>UserParam_Init</STRONG> (Thumb, 184 bytes, Stack size 1704 bytes, main_task.o(i.UserParam_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = UserParam_Init &rArr; DrillStateRecovery &rArr; AssignStateFromBuffer &rArr; DayModeHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIFlashCheckSum_U32
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrillStateRecovery
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetDefaultValue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>UserParam_Save</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main_task.o(i.UserParam_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UserParam_Save &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIFlashCheckSum_U32
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOffHandle
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
</UL>

<P><STRONG><a name="[155]"></a>UserParam_SetActLaserCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetActLaserCnt))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Analysis
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainModeInit
</UL>

<P><STRONG><a name="[318]"></a>UserParam_SetActLaserCnt1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetActLaserCnt1))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_HelmetStatusRet
</UL>

<P><STRONG><a name="[152]"></a>UserParam_SetBRChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetBRChar))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullConditionRecovery
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ToRedHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ToBlueHandle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainModeInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
</UL>

<P><STRONG><a name="[151]"></a>UserParam_SetBlood</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetBlood))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullConditionRecovery
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainModeInit
</UL>

<P><STRONG><a name="[154]"></a>UserParam_SetDayOrNight</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetDayOrNight))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainModeInit
</UL>

<P><STRONG><a name="[421]"></a>UserParam_SetDefaultValue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetDefaultValue))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Init
</UL>

<P><STRONG><a name="[317]"></a>UserParam_SetFireInstallFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetFireInstallFlg))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_HelmetStatusRet
</UL>

<P><STRONG><a name="[153]"></a>UserParam_SetKey</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetKey))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IDSet
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullConditionRecovery
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainModeInit
</UL>

<P><STRONG><a name="[3e0]"></a>UserParam_SetSlaverCnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetSlaverCnt))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
</UL>

<P><STRONG><a name="[17e]"></a>UserParam_SetSlaverMag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main_task.o(i.UserParam_SetSlaverMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UserParam_SetSlaverMag &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_GetSlaverMag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSetHandle
</UL>

<P><STRONG><a name="[190]"></a>UserParam_SetTsChar1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main_task.o(i.UserParam_SetTsChar1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserParam_SetTsChar1
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalHelmetDisconHandle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeInstallHandle
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathHandle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_InvalidHandle
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReviveHandle
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
</UL>

<P><STRONG><a name="[36d]"></a>UserParam_SetTsChar2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main_task.o(i.UserParam_SetTsChar2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserParam_SetTsChar2
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
</UL>

<P><STRONG><a name="[422]"></a>UserParam_SetWMac</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetWMac))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[439]"></a>UserParam_SetWTxPwr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_task.o(i.UserParam_SetWTxPwr))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[2bd]"></a>User_Ir_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ir.o(i.User_Ir_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = User_Ir_Init &rArr; User_Rcv_Init &rArr; IRRcvGpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Tx_Init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Rcv_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38Com_ComInit
</UL>

<P><STRONG><a name="[2be]"></a>User_Ir_Rcv</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ir.o(i.User_Ir_Rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = User_Ir_Rcv
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38Com_Read
</UL>

<P><STRONG><a name="[2bf]"></a>User_Ir_Send</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ir.o(i.User_Ir_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = User_Ir_Send &rArr; ir_send_byte &rArr; Send_Low
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38Com_Write
</UL>

<P><STRONG><a name="[424]"></a>User_Rcv_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ir.o(i.User_Rcv_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = User_Rcv_Init &rArr; IRRcvGpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Pin_High
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRRcvGpioInit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Timer_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Ir_Init
</UL>

<P><STRONG><a name="[423]"></a>User_Tx_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ir.o(i.User_Tx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = User_Tx_Init &rArr; IR_TX_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Pin_Low
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TX_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carwave_Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Ir_Init
</UL>

<P><STRONG><a name="[426]"></a>W25QXX_CS_GpioInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i.W25QXX_CS_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_CS_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_HardWareInit
</UL>

<P><STRONG><a name="[d2]"></a>W25QXX_CS_RESET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.W25QXX_CS_RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extflash.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>W25QXX_CS_SET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.W25QXX_CS_SET))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extflash.o(.constdata)
</UL>
<P><STRONG><a name="[240]"></a>W25QXX_Erase_Page</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Erase_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W25QXX_Erase_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_PageErase
</UL>

<P><STRONG><a name="[d0]"></a>W25QXX_HardWareInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, extflash.o(i.W25QXX_HardWareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = W25QXX_HardWareInit &rArr; SPI2_Init &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS_GpioInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extflash.o(.constdata)
</UL>
<P><STRONG><a name="[23d]"></a>W25QXX_Init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, extflash.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W25QXX_Init &rArr; W25QXX_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_LowLevelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Init
</UL>

<P><STRONG><a name="[429]"></a>W25QXX_LowLevelInit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, extflash.o(i.W25QXX_LowLevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = W25QXX_LowLevelInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[241]"></a>W25QXX_Read</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Read
</UL>

<P><STRONG><a name="[42a]"></a>W25QXX_ReadID</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[42b]"></a>W25QXX_ReadSR</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[428]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Page
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[427]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Write_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Page
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[242]"></a>W25QXX_Write_Page</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, w25qxx.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
</UL>

<P><STRONG><a name="[2db]"></a>WDT_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hc32f46x_wdt.o(i.WDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[2d9]"></a>WDT_RefreshCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_wdt.o(i.WDT_RefreshCounter))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[34d]"></a>WeaponDistanceJudge</STRONG> (Thumb, 434 bytes, Stack size 80 bytes, main_task.o(i.WeaponDistanceJudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = WeaponDistanceJudge &rArr; get_distance &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionLon
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionLat
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
</UL>

<P><STRONG><a name="[1d5]"></a>Wtn6_1_2_Init</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, wtn6.o(i.Wtn6_1_2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Wtn6_1_2_Init &rArr; Wtn6_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[42f]"></a>Wtn6_1_GpioBusyInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i.Wtn6_1_GpioBusyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Wtn6_1_GpioBusyInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_HardWareInit
</UL>

<P><STRONG><a name="[430]"></a>Wtn6_1_GpioDataInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i.Wtn6_1_GpioDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Wtn6_1_GpioDataInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_HardWareInit
</UL>

<P><STRONG><a name="[d8]"></a>Wtn6_1_GpioDataReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.Wtn6_1_GpioDataReset))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtn6.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>Wtn6_1_GpioDataSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.Wtn6_1_GpioDataSet))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtn6.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>Wtn6_1_HardWareInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wtn6.o(i.Wtn6_1_HardWareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Wtn6_1_HardWareInit &rArr; Wtn6_1_GpioDataInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_GpioDataInit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_GpioBusyInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtn6.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>Wtn6_1_IsGpioBusySet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(i.Wtn6_1_IsGpioBusySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wtn6_1_IsGpioBusySet
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtn6.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>Wtn6_DaySound</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wtn6.o(i.Wtn6_DaySound))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wtn6_DaySound &rArr; Wtn6_StartSound
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_StartSound
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayModeHandle
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNTerminalParamHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[42e]"></a>Wtn6_Init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wtn6.o(i.Wtn6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Wtn6_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_1_2_Init
</UL>

<P><STRONG><a name="[432]"></a>Wtn6_LPlay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wtn6.o(i.Wtn6_LPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wtn6_LPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtn6_QueuePush
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
</UL>

<P><STRONG><a name="[189]"></a>Wtn6_NightSound</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wtn6.o(i.Wtn6_NightSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wtn6_NightSound &rArr; Wtn6_StartSound
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_StartSound
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackStageJudgeHandle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNTerminalParamHandle
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
</UL>

<P><STRONG><a name="[143]"></a>Wtn6_Play</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wtn6.o(i.Wtn6_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wtn6_Play &rArr; Wtn6_LPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_LPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_StruckPart
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle_Master
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Analysis
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableChangeBatHandle
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOffHandle
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_RescueResult_Inquire
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Explosive
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Bomb
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalPowerOffHandle
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalHelmetDisconHandle
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRAmmuGetHandle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FumeInstallHandle
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorLossHandle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayModeHandle
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_WorseHandle
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_TolastHandle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SlightHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_SevereHandle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_ModerateHandle
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_Judge_CriticalHandle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNSoldierManoParamSet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNIndirectAim
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNHelicopterVoiceCtrl
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignStateFromBuffer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_Status
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDamage
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainModeInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TesModeHandle
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShotAroundHandle
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReviveHandle
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtDeal_HardCtrl_Voice
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeHandle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoStartHandle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManoEndHandle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_JudgeHandle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserProtocalDeal
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Protocol_Process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyNum
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupply
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConnectRet
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SetUpVariousElements
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Rescure_State
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ManoParam_Set
</UL>

<P><STRONG><a name="[146]"></a>Wtn6_Sound</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wtn6.o(i.Wtn6_Sound))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wtn6_Sound &rArr; Wtn6_StartSound
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_StartSound
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOffHandle
</UL>

<P><STRONG><a name="[330]"></a>Wtn6_StartLSound</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wtn6.o(i.Wtn6_StartLSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wtn6_StartLSound &rArr; Wtn6_StartSound
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_StartSound
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_TimedProcess
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
</UL>

<P><STRONG><a name="[431]"></a>Wtn6_StartSound</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, wtn6.o(i.Wtn6_StartSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wtn6_StartSound
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_StartLSound
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Sound
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_NightSound
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_DaySound
</UL>

<P><STRONG><a name="[d5]"></a>Wtn6_StepProcess</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wtn6.o(i.Wtn6_StepProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wtn6_StepProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtn6.o(.constdata)
</UL>
<P><STRONG><a name="[3f2]"></a>Wtn6_TimedProcess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wtn6.o(i.Wtn6_TimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Wtn6_TimedProcess &rArr; Wtn6_StartLSound &rArr; Wtn6_StartSound
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_StartLSound
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtn6_QueuePop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[1ee]"></a>Xor_Calc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocal.o(i.Xor_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Xor_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_MacGet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_InfoSend
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_StateInfo_Inquire
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_SetOrRescue_ACK
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_ID_Inquire
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_RescueResult_Inquire
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Mac
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_DB_Injury_Inquire
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_IR_AmmuInfo_Inquire
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_BroadcastBeacon
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HelmetStaGet
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardCtrl_Slaver_PowerOff
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollateralDamage
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_FindIR38_Frame
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_FindInterConn_Frame
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJP_BulletInfo_Sync
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverStaGet
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_SlaverConnect
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Weapon_State
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponShootingInquire
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Lightweapon_AmmuInfoSync
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_LightWeapon
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_Heavyweapon_AmmuInfoSync
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeapon
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyNum
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupply
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuStausRet
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverClear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SelfStatue
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_ParamSend
</UL>

<P><STRONG><a name="[1ef]"></a>ZigComTask_BroadCast</STRONG> (Thumb, 116 bytes, Stack size 104 bytes, main_task.o(i.ZigComTask_BroadCast))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ZigComTask_BroadCast &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollateralDamage
</UL>

<P><STRONG><a name="[2e6]"></a>ZigComTask_HandleGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zigcom_task.o(i.ZigComTask_HandleGet))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigRetSend
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Protocol_Process
</UL>

<P><STRONG><a name="[435]"></a>ZigComTask_Init</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, zigcom_task.o(i.ZigComTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ZigComTask_Init &rArr; IDParam_Save &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParamValid
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetWMac
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_Save
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_GetWMac
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SetListNodeLen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_Init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartGetParam
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_SetTxPwr
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_SetSelfAddr
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Reset
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelInit
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_HandleGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ea]"></a>ZigComTask_LastCommMacGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zigcom_task.o(i.ZigComTask_LastCommMacGet))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HardCtrl_Analysis
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
</UL>

<P><STRONG><a name="[437]"></a>ZigComTask_Process</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, zigcom_task.o(i.ZigComTask_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = ZigComTask_Process &rArr; ZigCom_Analysis &rArr; InterConn_Analysis &rArr; InterConn_ProtDeal_ManoParam_Set &rArr; CtrlManoParamEventUploadHandle &rArr; CtrlManoParamEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_TimedProcess
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_Find5AAAFrame
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelTimedProcess
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_HandleGet
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Protocol_Process
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[313]"></a>ZigComTask_SendToHelmet</STRONG> (Thumb, 152 bytes, Stack size 112 bytes, main_task.o(i.ZigComTask_SendToHelmet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ZigComTask_SendToHelmet &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_MakeU8Sum
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtAddr
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_GetHandleByMac
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HardCtrl_Analysis
</UL>

<P><STRONG><a name="[25e]"></a>ZigComTask_TaskHandleGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zigcom_task.o(i.ZigComTask_TaskHandleGet))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HardCtrl_Analysis
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta1
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponLockRet
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_WeaponInfoRet
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_HeavyWeaponInfoRet
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_Slaver_AmmuSupplyRet
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_ProtDeal_SlaverConnectRet
</UL>

<P><STRONG><a name="[438]"></a>ZigCom_Analysis</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, zigcom_task.o(i.ZigCom_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408 + Unknown Stack Size
<LI>Call Chain = ZigCom_Analysis &rArr; InterConn_Analysis &rArr; InterConn_ProtDeal_ManoParam_Set &rArr; CtrlManoParamEventUploadHandle &rArr; CtrlManoParamEventUpload_Send &rArr; EventStorageToFlash &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_HardCtrl_Analysis
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterConn_Analysis
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_FindInterConn_Frame
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopSoftReset
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopSetParam
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopGetParam
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartSoftReset
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartGetParam
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_SetDevMac
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalProcess
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalParse
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ConfigSendFunc
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetWTxPwr
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_SetWMac
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
</UL>

<P><STRONG><a name="[c3]"></a>ZigCom_ComInit</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, zigcom_task.o(i.ZigCom_ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ZigCom_ComInit &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComConfiguration
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>ZigCom_ComRead</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, zigcom_task.o(i.ZigCom_ComRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ZigCom_ComRead
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>ZigCom_ComWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, zigcom_task.o(i.ZigCom_ComWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ZigCom_ComWrite &rArr; Uart_SendBuf &rArr; Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>ZigRetSend</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zigcom_task.o(i.ZigRetSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ZigRetSend &rArr; NewZigbee_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Send
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_HandleGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(i.ZigCom_Analysis)
</UL>
<P><STRONG><a name="[43a]"></a>Zigbee_GpioResetInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gpio.o(i.Zigbee_GpioResetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Zigbee_GpioResetInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetOn
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetOff
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComInit
</UL>

<P><STRONG><a name="[c7]"></a>Zigbee_GpioResetOff</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(i.Zigbee_GpioResetOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Zigbee_GpioResetOff &rArr; Zigbee_GpioResetInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>Zigbee_GpioResetOn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(i.Zigbee_GpioResetOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Zigbee_GpioResetOn &rArr; Zigbee_GpioResetInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[43b]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[443]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[444]"></a>__hardfp_atan2</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[253]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
</UL>

<P><STRONG><a name="[2e2]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
</UL>

<P><STRONG><a name="[44a]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
</UL>

<P><STRONG><a name="[44e]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hardfp_round &rArr; _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
</UL>

<P><STRONG><a name="[250]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
</UL>

<P><STRONG><a name="[251]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
</UL>

<P><STRONG><a name="[252]"></a>__hardfp_tan</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
</UL>

<P><STRONG><a name="[447]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[449]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[43f]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[448]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[451]"></a>__kernel_tan</STRONG> (Thumb, 764 bytes, Stack size 128 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[44b]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[43c]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[445]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[43d]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[44c]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[43e]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[ff]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[446]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[452]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_6x_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[455]"></a>dmp_enable_feature</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[456]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_gyro_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[45f]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[460]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_load_motion_driver_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[462]"></a>dmp_read_fifo</STRONG> (Thumb, 384 bytes, Stack size 104 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_gesture
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mget_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[466]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_fifo_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[467]"></a>dmp_set_orientation</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[45c]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[45d]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[45e]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[458]"></a>dmp_set_tap_axes</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[459]"></a>dmp_set_tap_count</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[457]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[45a]"></a>dmp_set_tap_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[45b]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[440]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[25b]"></a>get_distance</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, main_task.o(i.get_distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = get_distance &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radian
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
</UL>

<P><STRONG><a name="[46a]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, inv_mpu.o(i.inv_orientation_matrix_to_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = inv_orientation_matrix_to_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[46b]"></a>inv_row_2_scale</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, inv_mpu.o(i.inv_row_2_scale))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[425]"></a>ir_send_byte</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ir.o(i.ir_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ir_send_byte &rArr; Send_Low
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Low
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Zero
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Open
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Timer_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Ir_Send
</UL>

<P><STRONG><a name="[1d7]"></a>m_byg_sMpu6050Mag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mpu6050.o(i.m_byg_sMpu6050Mag))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardSta3
</UL>

<P><STRONG><a name="[f2]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = main &rArr; UserParam_Init &rArr; DrillStateRecovery &rArr; AssignStateFromBuffer &rArr; DayModeHandle &rArr; InterConn_ProtDeal_SelfStatue &rArr; InterChanSend &rArr; SComTask_SendListAppendDiff &rArr; SComTask_SendListDeleteByFrameId &rArr; SComTask_SendListDelete &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserParam_Init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaverMag_ListInit
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Process
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_Init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetRunMode
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Process
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserComTask_HandleGet
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Process
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR38ComTask_Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiComTask_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_Process
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatTask_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPowerOnOffInit
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[465]"></a>mget_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mpu.o(i.mget_ms))
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
</UL>

<P><STRONG><a name="[46c]"></a>mpu_configure_fifo</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_configure_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[380]"></a>mpu_dmp_get_data</STRONG> (Thumb, 344 bytes, Stack size 120 bytes, inv_mpu.o(i.mpu_dmp_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_TimedProcess
</UL>

<P><STRONG><a name="[37e]"></a>mpu_dmp_init</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, inv_mpu.o(i.mpu_dmp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mpu_dmp_init &rArr; mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Initialize
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_Init
</UL>

<P><STRONG><a name="[468]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[37d]"></a>mpu_get_accel_reg</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_get_accel_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpu_get_accel_reg &rArr; MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mget_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_GetAccel
</UL>

<P><STRONG><a name="[46e]"></a>mpu_init</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, inv_mpu.o(i.mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[461]"></a>mpu_load_firmware</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, inv_mpu.o(i.mpu_load_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[477]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, inv_mpu.o(i.mpu_lp_accel_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
</UL>

<P><STRONG><a name="[463]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, inv_mpu.o(i.mpu_read_fifo_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[476]"></a>mpu_read_mem</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, inv_mpu.o(i.mpu_read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_read_mem &rArr; MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[454]"></a>mpu_reset_fifo</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpu_reset_fifo &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[473]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_set_accel_fsr &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[475]"></a>mpu_set_bypass</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_set_bypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpu_set_bypass &rArr; MPU_Read_Len &rArr; IIC_Rcv_Byte &rArr; IIC_NAck &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[471]"></a>mpu_set_dmp_state</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_dmp_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[472]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_set_gyro_fsr &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[478]"></a>mpu_set_int_latched</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_int_latched))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_set_int_latched &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[474]"></a>mpu_set_lpf</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_set_lpf &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[470]"></a>mpu_set_sample_rate</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[46f]"></a>mpu_set_sensors</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_set_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[453]"></a>mpu_write_mem</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, inv_mpu.o(i.mpu_write_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mpu_write_mem &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[47a]"></a>my_mem_free</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
</UL>

<P><STRONG><a name="[4]"></a>my_mem_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[47b]"></a>my_mem_malloc</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
</UL>

<P><STRONG><a name="[5]"></a>my_mem_perused</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[479]"></a>mymemset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, malloc.o(i.mymemset))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[212]"></a>play_Status</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, wtn6.o(i.play_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = play_Status &rArr; Wtn6_Play &rArr; Wtn6_LPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathHandle
</UL>

<P><STRONG><a name="[352]"></a>play_StruckPart</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, wtn6.o(i.play_StruckPart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = play_StruckPart &rArr; Wtn6_Play &rArr; Wtn6_LPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_GetShotHandle_Master
</UL>

<P><STRONG><a name="[469]"></a>radian</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main_task.o(i.radian))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = radian &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
</UL>

<P><STRONG><a name="[23c]"></a>sdram_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, malloc.o(i.sdram_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListDelete
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListClear
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Retrieve
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_GetFlashCheckSum
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
</UL>

<P><STRONG><a name="[1f7]"></a>sdram_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, malloc.o(i.sdram_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[12c]"></a>sdram_malloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, malloc.o(i.sdram_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoliderStatusUpload_Send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessRequest_Send
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenSleepHandle
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDScreenDayOrNightHandle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text1Show
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_Text0Show
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_PicShow
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_CheckOnline
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_BarShow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCom_Prot_BUTTONShow
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_CtrlAutoNumbered
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Prot_GetOnlineNum
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_Proc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Append
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Create
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppendDiff
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_SendListAppend
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_RetransmissionData
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SComTask_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_RetransmissionData
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_Init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterChanSend
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeavyWpnLaunchEventUpload_Send
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardStatusDetection
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitIndirectLanuchEventUpload_Send
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DamageReportEventUpload_Send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlManoParamEventUpload_Send
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToManoEventUpload_Send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSN_RescureEvtUpload_Send
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNJudgeEventUpload_Send
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStopEventUpload_Send
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgaistRuleStartEventUpload_Send
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_GetFlashCheckSum
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResComTask_SendToUpcom
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaserCom_Prot_CtrlMode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_AllOn
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detector_Led_AllOff
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCom_FourGParam_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_InjuryWorseEventUpload_Send
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlSupplementEventUpload_Send
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSP_CtrlIntervalEventUpload_Send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelLayMineEventUpload_Send
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersonnelClearMineEventUpload_Send
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonDigitIndirectLanuchEventUpload_Send
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCB_InjuryEventUpload_Send
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCBTEventUpload_Send
</UL>

<P><STRONG><a name="[441]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[41e]"></a>ttcpy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(i.ttcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ttcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_Interrupt
</UL>

<P><STRONG><a name="[a5]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[442]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4cc]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4cd]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4ce]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4cf]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4d0]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[218]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathRecord
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_GetAccel
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[47d]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[217]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Location
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionLon
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionLat
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathRecord
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[480]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[483]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[487]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[216]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Location
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionLon
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionLat
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathRecord
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radian
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[485]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[486]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[488]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetExBatValue
</UL>

<P><STRONG><a name="[489]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetExBatValue
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_GetAccel
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4d1]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[215]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Location
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionLon
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionLat
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathRecord
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
</UL>

<P><STRONG><a name="[4d2]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[42c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[48a]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[48d]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_WeaponInfo
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetExBatValue
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radian
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050_GetAccel
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[48b]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[47f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[482]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[42d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[48c]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[44f]"></a>_drnd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drnd.o(x$fpl$drnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponDistanceJudge
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[48e]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[450]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GaussProjCal
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[490]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2e1]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IllegalMoveMonitor
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[491]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[492]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[e5]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[4d3]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4d4]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[47e]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[df]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[484]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[44d]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[493]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3ad]"></a>GetLastUpdateFrameIndex</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, upgrade.o(i.GetLastUpdateFrameIndex))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD
</UL>

<P><STRONG><a name="[3ac]"></a>Protocal_CmdProcess_DOWNLOAD</STRONG> (Thumb, 136 bytes, Stack size 136 bytes, upgrade.o(i.Protocal_CmdProcess_DOWNLOAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Protocal_CmdProcess_DOWNLOAD &rArr; Protocal_CmdProcess_Ret &rArr; Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLastUpdateFrame
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_Ret
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastUpdateFrameIndex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[3af]"></a>Protocal_CmdProcess_DOWNLOAD_END</STRONG> (Thumb, 76 bytes, Stack size 112 bytes, upgrade.o(i.Protocal_CmdProcess_DOWNLOAD_END))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Protocal_CmdProcess_DOWNLOAD_END &rArr; SaveLastUpdateFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLastUpdateFrame
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[3b0]"></a>Protocal_CmdProcess_DOWNLOAD_START</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, upgrade.o(i.Protocal_CmdProcess_DOWNLOAD_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Protocal_CmdProcess_DOWNLOAD_START &rArr; Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDownloadProcess
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[3b5]"></a>Protocal_CmdProcess_RESET_DOWNLOAD_ADDR</STRONG> (Thumb, 82 bytes, Stack size 120 bytes, upgrade.o(i.Protocal_CmdProcess_RESET_DOWNLOAD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Protocal_CmdProcess_RESET_DOWNLOAD_ADDR &rArr; Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[3b6]"></a>Protocal_CmdProcess_RESET_REPLACE_ADDR</STRONG> (Thumb, 82 bytes, Stack size 120 bytes, upgrade.o(i.Protocal_CmdProcess_RESET_REPLACE_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Protocal_CmdProcess_RESET_REPLACE_ADDR &rArr; Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[227]"></a>Protocal_CmdProcess_Ret</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, upgrade.o(i.Protocal_CmdProcess_Ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Protocal_CmdProcess_Ret &rArr; Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD
</UL>

<P><STRONG><a name="[3ae]"></a>SaveLastUpdateFrame</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, upgrade.o(i.SaveLastUpdateFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveLastUpdateFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_END
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD
</UL>

<P><STRONG><a name="[129]"></a>ADC_ReadAllData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hc32f46x_adc.o(i.ADC_ReadAllData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ReadAllData
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollingSa
</UL>

<P><STRONG><a name="[15b]"></a>AsyncDelay</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.AsyncDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_GetClkMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_WriteCntReg
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_HardTriggerInit
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ClearFlag
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
</UL>

<P><STRONG><a name="[15c]"></a>TIMER0_GetClkMode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i.TIMER0_GetClkMode))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>

<P><STRONG><a name="[3db]"></a>SetClkSyncBaudrate</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, hc32f46x_usart.o(i.SetClkSyncBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetClkSyncBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[3de]"></a>SetScBaudrate</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, hc32f46x_usart.o(i.SetScBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetScBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[3df]"></a>SetUartBaudrate</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, hc32f46x_usart.o(i.SetUartBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetUartBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[3dc]"></a>UsartGetClk</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.UsartGetClk))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>

<P><STRONG><a name="[3ec]"></a>IrqRegistration</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, timer.o(i.IrqRegistration))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
</UL>

<P><STRONG><a name="[411]"></a>IrqRegistration</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart.o(i.IrqRegistration))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[3ff]"></a>Uart_EnableClock</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uart.o(i.Uart_EnableClock))
<BR><BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[407]"></a>Uart_EnableDmaRx</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, uart.o(i.Uart_EnableDmaRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Uart_EnableDmaRx &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableIrq
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[404]"></a>Uart_EnableDmaTx</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, uart.o(i.Uart_EnableDmaTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Uart_EnableDmaTx &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[400]"></a>Uart_GpioConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(i.Uart_GpioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart_GpioConfig &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[2d1]"></a>Uart_IrqHandle_DMATC</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, uart.o(i.Uart_IrqHandle_DMATC))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Uart_IrqHandle_DMATC &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransferCnt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSrcAddress
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ029_Handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ023_Handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ017_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ011_Handler
</UL>

<P><STRONG><a name="[405]"></a>Uart_RxTimeoutConfig</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, uart.o(i.Uart_RxTimeoutConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_WriteCntReg
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_HardTriggerInit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ClearFlag
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[413]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[414]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[412]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[3fb]"></a>IrqRegistration</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wtn6.o(i.IrqRegistration))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Unit2_init
</UL>

<P><STRONG><a name="[434]"></a>wtn6_QueuePop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wtn6.o(i.wtn6_QueuePop))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_TimedProcess
</UL>

<P><STRONG><a name="[433]"></a>wtn6_QueuePush</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wtn6.o(i.wtn6_QueuePush))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wtn6_LPlay
</UL>

<P><STRONG><a name="[2d4]"></a>IrqRegistration</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ir.o(i.IrqRegistration))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera3_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera2_Config
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera1_Config
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRRcvGpioInit
</UL>

<P><STRONG><a name="[2d5]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ir.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera3_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera2_Config
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera1_Config
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRRcvGpioInit
</UL>

<P><STRONG><a name="[2d7]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ir.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera3_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera2_Config
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera1_Config
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRRcvGpioInit
</UL>

<P><STRONG><a name="[2d6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera3_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera2_Config
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timera1_Config
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRRcvGpioInit
</UL>

<P><STRONG><a name="[46d]"></a>set_int_enable</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, inv_mpu.o(i.set_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_int_enable &rArr; MPU_Write_Len &rArr; IIC_Wait_Ack &rArr; SDA_OUT_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[464]"></a>decode_gesture</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.decode_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[111]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[48f]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[481]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[116]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a6]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
