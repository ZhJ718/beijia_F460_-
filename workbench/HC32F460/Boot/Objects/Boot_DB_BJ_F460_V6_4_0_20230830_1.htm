<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Boot_DB_BJ_F460_V6_4_0_20230830_1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Boot_DB_BJ_F460_V6_4_0_20230830_1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Dec 06 17:04:55 2023
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ZigComTask_Process &rArr; ZigCom_Analysis &rArr; Update_ProtocalProcess &rArr; DownloadProcess_Sync &rArr; StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[e]">IRQ000_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">IRQ000_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">BusFault_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[e]">IRQ000_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[f]">IRQ001_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[10]">IRQ002_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[11]">IRQ003_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[12]">IRQ004_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[13]">IRQ005_Handler</a> from timer.o(i.IRQ005_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[14]">IRQ006_Handler</a> from uart.o(i.IRQ006_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[15]">IRQ007_Handler</a> from uart.o(i.IRQ007_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[16]">IRQ008_Handler</a> from uart.o(i.IRQ008_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[17]">IRQ009_Handler</a> from uart.o(i.IRQ009_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[18]">IRQ010_Handler</a> from uart.o(i.IRQ010_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[19]">IRQ011_Handler</a> from uart.o(i.IRQ011_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1a]">IRQ012_Handler</a> from uart.o(i.IRQ012_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1b]">IRQ013_Handler</a> from uart.o(i.IRQ013_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1c]">IRQ014_Handler</a> from uart.o(i.IRQ014_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1d]">IRQ015_Handler</a> from uart.o(i.IRQ015_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1e]">IRQ016_Handler</a> from uart.o(i.IRQ016_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1f]">IRQ017_Handler</a> from uart.o(i.IRQ017_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[20]">IRQ018_Handler</a> from uart.o(i.IRQ018_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[21]">IRQ019_Handler</a> from uart.o(i.IRQ019_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[22]">IRQ020_Handler</a> from uart.o(i.IRQ020_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[23]">IRQ021_Handler</a> from uart.o(i.IRQ021_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[24]">IRQ022_Handler</a> from uart.o(i.IRQ022_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[25]">IRQ023_Handler</a> from uart.o(i.IRQ023_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[26]">IRQ024_Handler</a> from uart.o(i.IRQ024_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[27]">IRQ025_Handler</a> from uart.o(i.IRQ025_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[28]">IRQ026_Handler</a> from uart.o(i.IRQ026_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[29]">IRQ027_Handler</a> from uart.o(i.IRQ027_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2a]">IRQ028_Handler</a> from uart.o(i.IRQ028_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2b]">IRQ029_Handler</a> from uart.o(i.IRQ029_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2c]">IRQ030_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2d]">IRQ031_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2e]">IRQ032_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2f]">IRQ033_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[30]">IRQ034_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[31]">IRQ035_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[32]">IRQ036_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[33]">IRQ037_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[34]">IRQ038_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[35]">IRQ039_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[36]">IRQ040_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[37]">IRQ041_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[38]">IRQ042_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[39]">IRQ043_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3a]">IRQ044_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3b]">IRQ045_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3c]">IRQ046_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3d]">IRQ047_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3e]">IRQ048_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3f]">IRQ049_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[40]">IRQ050_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[41]">IRQ051_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[42]">IRQ052_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[43]">IRQ053_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[44]">IRQ054_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[45]">IRQ055_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[46]">IRQ056_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[47]">IRQ057_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[48]">IRQ058_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[49]">IRQ059_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4a]">IRQ060_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4b]">IRQ061_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4c]">IRQ062_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4d]">IRQ063_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4e]">IRQ064_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4f]">IRQ065_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[50]">IRQ066_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[51]">IRQ067_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[52]">IRQ068_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[53]">IRQ069_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[54]">IRQ070_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[55]">IRQ071_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[56]">IRQ072_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[57]">IRQ073_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[58]">IRQ074_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[59]">IRQ075_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5a]">IRQ076_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5b]">IRQ077_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5c]">IRQ078_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5d]">IRQ079_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5e]">IRQ080_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5f]">IRQ081_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[60]">IRQ082_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[61]">IRQ083_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[62]">IRQ084_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[63]">IRQ085_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[64]">IRQ086_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[65]">IRQ087_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[66]">IRQ088_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[67]">IRQ089_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[68]">IRQ090_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[69]">IRQ091_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6a]">IRQ092_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6b]">IRQ093_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6c]">IRQ094_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6d]">IRQ095_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6e]">IRQ096_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6f]">IRQ097_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[70]">IRQ098_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[71]">IRQ099_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[72]">IRQ100_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[73]">IRQ101_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[74]">IRQ102_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[75]">IRQ103_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[76]">IRQ104_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[77]">IRQ105_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[78]">IRQ106_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[79]">IRQ107_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7a]">IRQ108_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7b]">IRQ109_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7c]">IRQ110_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7d]">IRQ111_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7e]">IRQ112_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7f]">IRQ113_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[80]">IRQ114_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[81]">IRQ115_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[82]">IRQ116_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[83]">IRQ117_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[84]">IRQ118_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[85]">IRQ119_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[86]">IRQ120_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[87]">IRQ121_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[88]">IRQ122_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[89]">IRQ123_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8a]">IRQ124_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8b]">IRQ125_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8c]">IRQ126_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8d]">IRQ127_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8e]">IRQ128_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8f]">IRQ129_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[90]">IRQ130_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[91]">IRQ131_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[92]">IRQ132_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[93]">IRQ133_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[94]">IRQ134_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[95]">IRQ135_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[96]">IRQ136_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[97]">IRQ137_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[98]">IRQ138_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[99]">IRQ139_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9a]">IRQ140_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9b]">IRQ141_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9c]">IRQ142_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9d]">IRQ143_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[af]">Reset_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[ac]">SPI2_ReadWriteByte</a> from spi.o(i.SPI2_ReadWriteByte) referenced from extflash.o(.constdata)
 <LI><a href="#[a]">SVC_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9e]">SystemInit</a> from system_hc32f46x.o(i.SystemInit) referenced from startup_hc32f46x.o(.text)
 <LI><a href="#[a0]">UpCom_ComInit</a> from upcom_task.o(i.UpCom_ComInit) referenced from upcom_task.o(i.UpComTask_Init)
 <LI><a href="#[a1]">UpCom_ComRead</a> from upcom_task.o(i.UpCom_ComRead) referenced from upcom_task.o(i.UpComTask_Init)
 <LI><a href="#[a2]">UpCom_ComWrite</a> from upcom_task.o(i.UpCom_ComWrite) referenced from upcom_task.o(i.UpComTask_Init)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[ab]">W25QXX_CS_RESET</a> from gpio.o(i.W25QXX_CS_RESET) referenced from extflash.o(.constdata)
 <LI><a href="#[aa]">W25QXX_CS_SET</a> from gpio.o(i.W25QXX_CS_SET) referenced from extflash.o(.constdata)
 <LI><a href="#[a9]">W25QXX_HardWareInit</a> from extflash.o(i.W25QXX_HardWareInit) referenced from extflash.o(.constdata)
 <LI><a href="#[a4]">ZigCom_ComInit</a> from zigcom_task.o(i.ZigCom_ComInit) referenced from zigcom_task.o(.constdata)
 <LI><a href="#[a5]">ZigCom_ComRead</a> from zigcom_task.o(i.ZigCom_ComRead) referenced from zigcom_task.o(.constdata)
 <LI><a href="#[a6]">ZigCom_ComWrite</a> from zigcom_task.o(i.ZigCom_ComWrite) referenced from zigcom_task.o(.constdata)
 <LI><a href="#[a3]">ZigRetSend</a> from zigcom_task.o(i.ZigRetSend) referenced from zigcom_task.o(i.ZigCom_Analysis)
 <LI><a href="#[a8]">Zigbee_GpioResetOff</a> from gpio.o(i.Zigbee_GpioResetOff) referenced from zigcom_task.o(.constdata)
 <LI><a href="#[a7]">Zigbee_GpioResetOn</a> from gpio.o(i.Zigbee_GpioResetOn) referenced from zigcom_task.o(.constdata)
 <LI><a href="#[b0]">__main</a> from __main.o(!!!main) referenced from startup_hc32f46x.o(.text)
 <LI><a href="#[ad]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced from malloc.o(.data)
 <LI><a href="#[ae]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced from malloc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b0]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b2]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b4]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1b7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b5]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1b9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[bb]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1cf]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1d0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1d1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[1d2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[1d3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1d4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1d5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[b3]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1d6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ba]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1d7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[bc]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ZigComTask_Process &rArr; ZigCom_Analysis &rArr; Update_ProtocalProcess &rArr; DownloadProcess_Sync &rArr; StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bf]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c1]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[af]"></a>Reset_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))

<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ000_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ001_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ002_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ003_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ004_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ030_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ031_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ032_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ033_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ034_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ035_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ036_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ037_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ038_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ039_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ040_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ041_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ042_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ043_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ044_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ045_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ046_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ047_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ048_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ049_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ050_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ051_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ052_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ053_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ054_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ055_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ056_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ057_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ058_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ059_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ060_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ061_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ062_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ063_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ064_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ065_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ066_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ067_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ068_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ069_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ070_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ071_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ072_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ073_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ074_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ075_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ076_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ077_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ078_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ079_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ080_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ081_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ082_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ083_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ084_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ085_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ086_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ087_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ088_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ089_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ090_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ091_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ092_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ093_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ094_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ095_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ096_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ097_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ098_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ099_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ100_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ101_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ102_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ103_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ104_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ105_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ106_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ107_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ108_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ109_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ110_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ111_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ112_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ113_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ114_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ115_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ116_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ117_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ118_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ119_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ120_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ121_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ122_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ123_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ124_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ125_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ126_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ127_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ128_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ129_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ130_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ131_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ132_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ136_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ137_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ138_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ139_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ140_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ141_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ142_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ143_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12e]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SetParam
</UL>

<P><STRONG><a name="[1da]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1de]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>

<P><STRONG><a name="[1e2]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Send
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComRead
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_SetDevMac
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLastUpdateFrame
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpCom_ComRead
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_Interrupt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SetParam
</UL>

<P><STRONG><a name="[c3]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e3]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComConfiguration
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpCom_ComInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1e4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SetParam
</UL>

<P><STRONG><a name="[c5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1e7]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalProcess
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_Ret
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_MagInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpCom_ComInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_LowLevelInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SetParam
</UL>

<P><STRONG><a name="[1e8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[b9]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[be]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c2]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[cb]"></a>Beep_GpioInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gpio.o(i.Beep_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Beep_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[ce]"></a>Beep_GpioOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.Beep_GpioOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Beep_GpioOff &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[d0]"></a>BoardInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.BoardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BoardInit &rArr; PowerOnOffInit &rArr; PwrKey_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Off
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_GpioInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_Off
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_GpioInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnOffInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioOff
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GpioOff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>BootPowerOffTimedProcess</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.BootPowerOffTimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BootPowerOffTimedProcess &rArr; PowerOffHandle &rArr; PwrEnable_Off &rArr; PwrEnable_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffHandle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioOn
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_PwrKeyOn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[df]"></a>CLK_GetFlagStatus</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
</UL>

<P><STRONG><a name="[de]"></a>CLK_HrcCmd</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_HrcCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_HrcCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[e0]"></a>CLK_MpllCmd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_MpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_MpllCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[16e]"></a>CLK_MpllConfig</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_MpllConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[16d]"></a>CLK_SetPllSource</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPllSource))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[e1]"></a>CLK_SetSysClkSource</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, hc32f46x_clk.o(i.CLK_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[16c]"></a>CLK_SysClkConfig</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, hc32f46x_clk.o(i.CLK_SysClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SysClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[e3]"></a>CheckNewData</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, upgrade.o(i.CheckNewData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CheckNewData &rArr; DataReplace &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_MakeU32Sum
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewDataReplaceAddr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewDataFileSize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewDataFileCheck
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewDataDownloadAddr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReplace
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>ComTask_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, comtask.o(i.ComTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ComTask_Init &rArr; LinkQueue_Create &rArr; LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Init
</UL>

<P><STRONG><a name="[ed]"></a>CoreInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CoreInit &rArr; SysClkIni &rArr; CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_MagInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>DMA_ChannelCfg</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, hc32f46x_dmac.o(i.DMA_ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ChannelCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
</UL>

<P><STRONG><a name="[18d]"></a>DMA_ChannelCmd</STRONG> (Thumb, 382 bytes, Stack size 20 bytes, hc32f46x_dmac.o(i.DMA_ChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>

<P><STRONG><a name="[18e]"></a>DMA_ClearIrqFlag</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hc32f46x_dmac.o(i.DMA_ClearIrqFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ClearIrqFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
</UL>

<P><STRONG><a name="[f6]"></a>DMA_Cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[190]"></a>DMA_EnableIrq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hc32f46x_dmac.o(i.DMA_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[f5]"></a>DMA_InitChannel</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, hc32f46x_dmac.o(i.DMA_InitChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[19a]"></a>DMA_SetDesAddress</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, hc32f46x_dmac.o(i.DMA_SetDesAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetDesAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>

<P><STRONG><a name="[197]"></a>DMA_SetSrcAddress</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, hc32f46x_dmac.o(i.DMA_SetSrcAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetSrcAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
</UL>

<P><STRONG><a name="[196]"></a>DMA_SetTransferCnt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hc32f46x_dmac.o(i.DMA_SetTransferCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetTransferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>

<P><STRONG><a name="[18f]"></a>DMA_SetTriggerSrc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hc32f46x_dmac.o(i.DMA_SetTriggerSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetTriggerSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[e9]"></a>DataReplace</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, upgrade.o(i.DataReplace))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DataReplace &rArr; IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNewData
</UL>

<P><STRONG><a name="[f0]"></a>Delay_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.Delay_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[db]"></a>Delay_Ms</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, timer.o(i.Delay_Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffHandle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootPowerOffTimedProcess
</UL>

<P><STRONG><a name="[f9]"></a>DownloadProcess_Sync</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, upgrade.o(i.DownloadProcess_Sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DownloadProcess_Sync &rArr; StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDownloadProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_Ret
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalProcess
</UL>

<P><STRONG><a name="[100]"></a>EFM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[101]"></a>EFM_ErasePgmCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_ErasePgmCmd))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[116]"></a>EFM_FlashCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_FlashCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_PageErase
</UL>

<P><STRONG><a name="[117]"></a>EFM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_PageErase
</UL>

<P><STRONG><a name="[118]"></a>EFM_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_PageErase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[ff]"></a>EFM_SectorErase</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hc32f46x_efm.o(i.EFM_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFM_SectorErase
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetErasePgmMode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_PageErase
</UL>

<P><STRONG><a name="[102]"></a>EFM_SetErasePgmMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_SetErasePgmMode))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[16f]"></a>EFM_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[103]"></a>EFM_SingleProgram</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, hc32f46x_efm.o(i.EFM_SingleProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EFM_SingleProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetErasePgmMode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
</UL>

<P><STRONG><a name="[115]"></a>EFM_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_PageErase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkIni
</UL>

<P><STRONG><a name="[10b]"></a>EXTFLASH_GetFlashSize</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, extflash.o(i.EXTFLASH_GetFlashSize))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Init
</UL>

<P><STRONG><a name="[10a]"></a>EXTFLASH_GetPageSize</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, extflash.o(i.EXTFLASH_GetPageSize))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Init
</UL>

<P><STRONG><a name="[104]"></a>EraseNewData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, upgrade.o(i.EraseNewData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EraseNewData &rArr; IFlash_PageErase &rArr; EFM_SectorErase
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>ExtFlash_GetFlashCheckSum</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, extflash.o(i.ExtFlash_GetFlashCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSum
</UL>

<P><STRONG><a name="[f2]"></a>ExtFlash_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, extflash.o(i.ExtFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ExtFlash_Init &rArr; W25QXX_Init &rArr; W25QXX_LowLevelInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTFLASH_GetPageSize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTFLASH_GetFlashSize
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[107]"></a>ExtFlash_Read</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, extflash.o(i.ExtFlash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_GetFlashCheckSum
</UL>

<P><STRONG><a name="[10d]"></a>ExtFlash_Write</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, extflash.o(i.ExtFlash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[110]"></a>FlashGetSum</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, upgrade.o(i.FlashGetSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_GetFlashCheckSum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_GetFlashCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDownloadProcess
</UL>

<P><STRONG><a name="[fb]"></a>FlashWrite</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, upgrade.o(i.FlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FlashWrite &rArr; ExtFlash_Write &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
</UL>

<P><STRONG><a name="[191]"></a>GetComIndex</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, uart.o(i.GetComIndex))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
</UL>

<P><STRONG><a name="[e5]"></a>GetNewDataDownloadAddr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, upgrade.o(i.GetNewDataDownloadAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetNewDataDownloadAddr &rArr; IFlash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNewData
</UL>

<P><STRONG><a name="[e6]"></a>GetNewDataFileCheck</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, upgrade.o(i.GetNewDataFileCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetNewDataFileCheck &rArr; IFlash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNewData
</UL>

<P><STRONG><a name="[e4]"></a>GetNewDataFileSize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, upgrade.o(i.GetNewDataFileSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetNewDataFileSize &rArr; IFlash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNewData
</UL>

<P><STRONG><a name="[e8]"></a>GetNewDataReplaceAddr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, upgrade.o(i.GetNewDataReplaceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetNewDataReplaceAddr &rArr; IFlash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNewData
</UL>

<P><STRONG><a name="[157]"></a>GetProtAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocal.o(i.GetProtAddr))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>

<P><STRONG><a name="[1a0]"></a>GetSysRunMilliSecond</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(i.GetSysRunMilliSecond))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Process
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
</UL>

<P><STRONG><a name="[154]"></a>IDParam_SetWMac</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, param.o(i.IDParam_SetWMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IDParam_SetWMac
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_SetDevMac
</UL>

<P><STRONG><a name="[114]"></a>IFLASH_GetFlashSize_HC32F460</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iflash.o(i.IFLASH_GetFlashSize_HC32F460))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Init
</UL>

<P><STRONG><a name="[113]"></a>IFLASH_GetPageSize_HC32F460</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iflash.o(i.IFLASH_GetPageSize_HC32F460))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Init
</UL>

<P><STRONG><a name="[111]"></a>IFlash_GetFlashCheckSum</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, iflash.o(i.IFlash_GetFlashCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IFlash_GetFlashCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSum
</UL>

<P><STRONG><a name="[f1]"></a>IFlash_Init</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, iflash.o(i.IFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IFlash_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFLASH_GetPageSize_HC32F460
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFLASH_GetFlashSize_HC32F460
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[105]"></a>IFlash_PageErase</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iflash.o(i.IFlash_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IFlash_PageErase &rArr; EFM_SectorErase
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewData
</UL>

<P><STRONG><a name="[112]"></a>IFlash_Read</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, iflash.o(i.IFlash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IFlash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewDataReplaceAddr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewDataFileSize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewDataFileCheck
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewDataDownloadAddr
</UL>

<P><STRONG><a name="[f8]"></a>IFlash_Write</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, iflash.o(i.IFlash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IFlash_Write &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDownloadProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReplace
</UL>

<P><STRONG><a name="[13]"></a>IRQ005_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleProcess
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_GetIrqFlag
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_ClearIrqFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ006_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ006_Handler &rArr; Uart_IrqHandle_EI
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ007_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ007_Handler &rArr; Uart_IrqHandle_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ008_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IRQ008_Handler &rArr; Uart_IrqHandle_RTO &rArr; TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ009_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ009_Handler &rArr; Uart_IrqHandle_TI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ010_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ010_Handler &rArr; Uart_IrqHandle_TCI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ011_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ011_Handler &rArr; Uart_IrqHandle_DMATC &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ012_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ012_Handler &rArr; Uart_IrqHandle_EI
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ013_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ013_Handler &rArr; Uart_IrqHandle_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ014_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IRQ014_Handler &rArr; Uart_IrqHandle_RTO &rArr; TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ015_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ015_Handler &rArr; Uart_IrqHandle_TI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ016_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ016_Handler &rArr; Uart_IrqHandle_TCI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ017_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ017_Handler &rArr; Uart_IrqHandle_DMATC &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ018_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ018_Handler &rArr; Uart_IrqHandle_EI
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ019_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ019_Handler &rArr; Uart_IrqHandle_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ020_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IRQ020_Handler &rArr; Uart_IrqHandle_RTO &rArr; TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ021_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ021_Handler &rArr; Uart_IrqHandle_TI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ022_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ022_Handler &rArr; Uart_IrqHandle_TCI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ023_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ023_Handler &rArr; Uart_IrqHandle_DMATC &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ024_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ024_Handler &rArr; Uart_IrqHandle_EI
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ025_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ025_Handler &rArr; Uart_IrqHandle_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ026_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IRQ026_Handler &rArr; Uart_IrqHandle_RTO &rArr; TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ027_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ027_Handler &rArr; Uart_IrqHandle_TI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ028_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ028_Handler &rArr; Uart_IrqHandle_TCI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ029_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ029_Handler &rArr; Uart_IrqHandle_DMATC &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>IWDG_Feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdt.o(i.IWDG_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_RefreshCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDownloadProcess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReplace
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffHandle
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToApp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootPowerOffTimedProcess
</UL>

<P><STRONG><a name="[123]"></a>IWDG_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iwdt.o(i.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IWDG_Init &rArr; WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>IsParamValid</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, param.o(i.IsParamValid))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_SetDevMac
</UL>

<P><STRONG><a name="[d9]"></a>Is_PwrKeyOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio.o(i.Is_PwrKeyOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Is_PwrKeyOn &rArr; PORT_GetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootPowerOffTimedProcess
</UL>

<P><STRONG><a name="[126]"></a>JumpToApp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, upgrade.o(i.JumpToApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JumpToApp &rArr; IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>LinkList_Create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, linklist.o(i.LinkList_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Create
</UL>

<P><STRONG><a name="[12b]"></a>LinkList_Delete</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, linklist.o(i.LinkList_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinkList_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Retrieve
</UL>

<P><STRONG><a name="[129]"></a>LinkList_Get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, linklist.o(i.LinkList_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinkList_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Header
</UL>

<P><STRONG><a name="[ec]"></a>LinkQueue_Create</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, linkqueue.o(i.LinkQueue_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LinkQueue_Create &rArr; LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_Init
</UL>

<P><STRONG><a name="[128]"></a>LinkQueue_Header</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, linkqueue.o(i.LinkQueue_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LinkQueue_Header &rArr; LinkList_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Process
</UL>

<P><STRONG><a name="[12a]"></a>LinkQueue_Retrieve</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, linkqueue.o(i.LinkQueue_Retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LinkQueue_Retrieve &rArr; sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Process
</UL>

<P><STRONG><a name="[d6]"></a>Motor_GpioInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gpio.o(i.Motor_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Motor_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[d7]"></a>Motor_GpioOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.Motor_GpioOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_GpioOff &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[da]"></a>Motor_GpioOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.Motor_GpioOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_GpioOn &rArr; PORT_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootPowerOffTimedProcess
</UL>

<P><STRONG><a name="[131]"></a>NewZigbee_GetLLMagHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new_zigbee.o(i.NewZigbee_GetLLMagHandle))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopSoftReset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopSetParam
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopGetParam
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartSoftReset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartGetParam
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_SetTxPwr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Send
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Reset
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelTimedProcess
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartSetParam
</UL>

<P><STRONG><a name="[133]"></a>NewZigbee_LL_GetParam</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, new_zigbee.o(i.NewZigbee_LL_GetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NewZigbee_LL_GetParam
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelTimedProcess
</UL>

<P><STRONG><a name="[136]"></a>NewZigbee_LL_Reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, new_zigbee.o(i.NewZigbee_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NewZigbee_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Reset
</UL>

<P><STRONG><a name="[12d]"></a>NewZigbee_LL_SetParam</STRONG> (Thumb, 240 bytes, Stack size 104 bytes, new_zigbee.o(i.NewZigbee_LL_SetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NewZigbee_LL_SetParam &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelTimedProcess
</UL>

<P><STRONG><a name="[134]"></a>NewZigbee_LL_SoftReset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, new_zigbee.o(i.NewZigbee_LL_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NewZigbee_LL_SoftReset
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelTimedProcess
</UL>

<P><STRONG><a name="[130]"></a>NewZigbee_LowLevelInit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, new_zigbee.o(i.NewZigbee_LowLevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NewZigbee_LowLevelInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
</UL>

<P><STRONG><a name="[132]"></a>NewZigbee_LowLevelTimedProcess</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, new_zigbee.o(i.NewZigbee_LowLevelTimedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NewZigbee_LowLevelTimedProcess &rArr; NewZigbee_LL_SetParam &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SoftReset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_SetParam
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_GetParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
</UL>

<P><STRONG><a name="[135]"></a>NewZigbee_Reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, new_zigbee.o(i.NewZigbee_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NewZigbee_Reset &rArr; NewZigbee_LL_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
</UL>

<P><STRONG><a name="[137]"></a>NewZigbee_Send</STRONG> (Thumb, 194 bytes, Stack size 288 bytes, new_zigbee.o(i.NewZigbee_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = NewZigbee_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigRetSend
</UL>

<P><STRONG><a name="[138]"></a>NewZigbee_SetTxPwr</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_SetTxPwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NewZigbee_SetTxPwr &rArr; NewZigbee_StartSetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartSetParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
</UL>

<P><STRONG><a name="[13a]"></a>NewZigbee_StartGetParam</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StartGetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StartGetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
</UL>

<P><STRONG><a name="[139]"></a>NewZigbee_StartSetParam</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StartSetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StartSetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_SetTxPwr
</UL>

<P><STRONG><a name="[13b]"></a>NewZigbee_StartSoftReset</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StartSoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StartSoftReset
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[13c]"></a>NewZigbee_StopGetParam</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StopGetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StopGetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[13d]"></a>NewZigbee_StopSetParam</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StopSetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StopSetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[13e]"></a>NewZigbee_StopSoftReset</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, new_zigbee.o(i.NewZigbee_StopSoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NewZigbee_StopSoftReset
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[13f]"></a>PORT_DebugPortSetting</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, hc32f46x_gpio.o(i.PORT_DebugPortSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PORT_DebugPortSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrKey_GpioInit
</UL>

<P><STRONG><a name="[125]"></a>PORT_GetBit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hc32f46x_gpio.o(i.PORT_GetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_PwrKeyOn
</UL>

<P><STRONG><a name="[cd]"></a>PORT_Init</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, hc32f46x_gpio.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrKey_GpioInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_GpioInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_GpioInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_GpioInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GpioInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS_GpioInit
</UL>

<P><STRONG><a name="[141]"></a>PORT_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>

<P><STRONG><a name="[cf]"></a>PORT_ResetBits</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f46x_gpio.o(i.PORT_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetOn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_Off
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_On
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioOff
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GpioOff
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS_RESET
</UL>

<P><STRONG><a name="[12c]"></a>PORT_SetBits</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f46x_gpio.o(i.PORT_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetOff
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_On
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Off
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_Off
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioOn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS_SET
</UL>

<P><STRONG><a name="[cc]"></a>PORT_SetFunc</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, hc32f46x_gpio.o(i.PORT_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrKey_GpioInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_GpioInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_GpioInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_GpioInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GpioInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GpioConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[15c]"></a>PORT_Toggle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f46x_gpio.o(i.PORT_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_Toggle
</UL>

<P><STRONG><a name="[140]"></a>PORT_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>

<P><STRONG><a name="[18c]"></a>PWC_Fcg0PeriphClockCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg0PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
</UL>

<P><STRONG><a name="[15e]"></a>PWC_Fcg1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableClock
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[171]"></a>PWC_Fcg2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
</UL>

<P><STRONG><a name="[dd]"></a>PowerOffHandle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main_task.o(i.PowerOffHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PowerOffHandle &rArr; PwrEnable_Off &rArr; PwrEnable_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_Off
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootPowerOffTimedProcess
</UL>

<P><STRONG><a name="[143]"></a>PowerOnHandle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main_task.o(i.PowerOnHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PowerOnHandle &rArr; PwrEnable_On &rArr; PwrEnable_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_On
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>PowerOnOffInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main_task.o(i.PowerOnOffInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PowerOnOffInit &rArr; PwrKey_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrKey_GpioInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[14e]"></a>Protocal_CmdProcess_GetAppVersion</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, upgrade.o(i.Protocal_CmdProcess_GetAppVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Protocal_CmdProcess_GetAppVersion &rArr; Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[159]"></a>Protocal_CmdProcess_GetDevID</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, upgrade.o(i.Protocal_CmdProcess_GetDevID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Protocal_CmdProcess_GetDevID
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[14f]"></a>Protocal_CmdProcess_GetDevMac</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, upgrade.o(i.Protocal_CmdProcess_GetDevMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Protocal_CmdProcess_GetDevMac &rArr; Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[152]"></a>Protocal_CmdProcess_SetDevMac</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, upgrade.o(i.Protocal_CmdProcess_SetDevMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Protocal_CmdProcess_SetDevMac &rArr; Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParamValid
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDParam_SetWMac
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[155]"></a>Protocal_Find55AAFrame</STRONG> (Thumb, 264 bytes, Stack size 28 bytes, protocal.o(i.Protocal_Find55AAFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Protocal_Find55AAFrame &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_MakeU8Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalParse
</UL>

<P><STRONG><a name="[1b1]"></a>Protocal_Find5AAAFrame</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, protocal.o(i.Protocal_Find5AAAFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocal_Find5AAAFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
</UL>

<P><STRONG><a name="[e7]"></a>Protocal_MakeU32Sum</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, protocal.o(i.Protocal_MakeU32Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Protocal_MakeU32Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNewData
</UL>

<P><STRONG><a name="[156]"></a>Protocal_MakeU8Sum</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, protocal.o(i.Protocal_MakeU8Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Protocal_MakeU8Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_Find55AAFrame
</UL>

<P><STRONG><a name="[14b]"></a>Protocal_ProtocolMakeShort55AA</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, protocal.o(i.Protocal_ProtocolMakeShort55AA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_MakeU8Sum
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDownloadProcess
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_SetDevMac
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetDevMac
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetAppVersion
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_Ret
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_RESET_REPLACE_ADDR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_RESET_DOWNLOAD_ADDR
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_START
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_END
</UL>

<P><STRONG><a name="[158]"></a>Protocal_UpgradeProcess</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, upgrade.o(i.Protocal_UpgradeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Protocal_UpgradeProcess &rArr; Protocal_CmdProcess_DOWNLOAD &rArr; Protocal_CmdProcess_Ret &rArr; Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_SetDevMac
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetDevMac
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetDevID
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_GetAppVersion
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_RESET_REPLACE_ADDR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_RESET_DOWNLOAD_ADDR
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_START
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_END
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalProcess
</UL>

<P><STRONG><a name="[146]"></a>PwrEnable_GpioInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gpio.o(i.PwrEnable_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PwrEnable_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_On
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_Off
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnOffInit
</UL>

<P><STRONG><a name="[142]"></a>PwrEnable_Off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.PwrEnable_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PwrEnable_Off &rArr; PwrEnable_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_GpioInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffHandle
</UL>

<P><STRONG><a name="[144]"></a>PwrEnable_On</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.PwrEnable_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PwrEnable_On &rArr; PwrEnable_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrEnable_GpioInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnHandle
</UL>

<P><STRONG><a name="[145]"></a>PwrKey_GpioInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpio.o(i.PwrKey_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PwrKey_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnOffInit
</UL>

<P><STRONG><a name="[d4]"></a>RLed_GpioInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gpio.o(i.RLed_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RLed_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[d5]"></a>RLed_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.RLed_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RLed_Off &rArr; PORT_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[15a]"></a>RLed_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.RLed_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RLed_On &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>RLed_Toggle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.RLed_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RLed_Toggle &rArr; PORT_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[d2]"></a>RunLed_GpioInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gpio.o(i.RunLed_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RunLed_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[d3]"></a>RunLed_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.RunLed_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RunLed_Off &rArr; PORT_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[15d]"></a>SPI2_Init</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, spi.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI2_Init &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_HardWareInit
</UL>

<P><STRONG><a name="[ac]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(i.SPI2_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extflash.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>SPI2_SetSpeed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(i.SPI2_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClockDiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_HardWareInit
</UL>

<P><STRONG><a name="[160]"></a>SPI_Cmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[161]"></a>SPI_GetFlag</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_GetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[15f]"></a>SPI_Init</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, hc32f46x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[163]"></a>SPI_ReceiveData8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[162]"></a>SPI_SendData8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_SendData8))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[165]"></a>SPI_SetClockDiv</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_SetClockDiv))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
</UL>

<P><STRONG><a name="[f4]"></a>SoftTimerInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(i.SoftTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[177]"></a>SoftTimerIntervalProcess</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, timer.o(i.SoftTimerIntervalProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SoftTimerIntervalProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
</UL>

<P><STRONG><a name="[16b]"></a>SoftTimerStop</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, timer.o(i.SoftTimerStop))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerInit
</UL>

<P><STRONG><a name="[14d]"></a>StartDownloadProcess</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, upgrade.o(i.StartDownloadProcess))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_START
</UL>

<P><STRONG><a name="[fe]"></a>StopDownloadProcess</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, upgrade.o(i.StopDownloadProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSum
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
</UL>

<P><STRONG><a name="[ee]"></a>SysClkIni</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, timer.o(i.SysClkIni))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysClkIni &rArr; CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[11a]"></a>SysScheduleProcess</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, timer.o(i.SysScheduleProcess))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ005_Handler
</UL>

<P><STRONG><a name="[170]"></a>SysScheduleTimerInit</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, timer.o(i.SysScheduleTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysScheduleTimerInit &rArr; IrqRegistration
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_ClearCountVal
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, system_hc32f46x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
</UL>

<P><STRONG><a name="[9e]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, system_hc32f46x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(.text)
</UL>
<P><STRONG><a name="[176]"></a>System_TimedTask</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, main.o(i.System_TimedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = System_TimedTask &rArr; BootPowerOffTimedProcess &rArr; PowerOffHandle &rArr; PwrEnable_Off &rArr; PwrEnable_GpioInit &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerIntervalProcess
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_Toggle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootPowerOffTimedProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>TIMER0_BaseInit</STRONG> (Thumb, 1524 bytes, Stack size 32 bytes, hc32f46x_timer0.o(i.TIMER0_BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
</UL>

<P><STRONG><a name="[179]"></a>TIMER0_ClearFlag</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER0_ClearFlag &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
</UL>

<P><STRONG><a name="[17a]"></a>TIMER0_Cmd</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
</UL>

<P><STRONG><a name="[17b]"></a>TIMER0_HardTriggerInit</STRONG> (Thumb, 1028 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_HardTriggerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER0_HardTriggerInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
</UL>

<P><STRONG><a name="[17c]"></a>TIMER0_WriteCntReg</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_WriteCntReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER0_WriteCntReg &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
</UL>

<P><STRONG><a name="[174]"></a>TIMER4_CNT_ClearCountVal</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_ClearCountVal))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
</UL>

<P><STRONG><a name="[11b]"></a>TIMER4_CNT_ClearIrqFlag</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_ClearIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ005_Handler
</UL>

<P><STRONG><a name="[119]"></a>TIMER4_CNT_GetIrqFlag</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_GetIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ005_Handler
</UL>

<P><STRONG><a name="[172]"></a>TIMER4_CNT_Init</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER4_CNT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
</UL>

<P><STRONG><a name="[175]"></a>TIMER4_CNT_Start</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_Start))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
</UL>

<P><STRONG><a name="[189]"></a>USART_ClearStatus</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RTO
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>

<P><STRONG><a name="[182]"></a>USART_DeInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[18a]"></a>USART_FuncCmd</STRONG> (Thumb, 562 bytes, Stack size 20 bytes, hc32f46x_usart.o(i.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_DMATC
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_Interrupt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
</UL>

<P><STRONG><a name="[198]"></a>USART_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TCI
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_EI
</UL>

<P><STRONG><a name="[199]"></a>USART_RecData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_RecData))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_RI
</UL>

<P><STRONG><a name="[19b]"></a>USART_SendData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IrqHandle_TI
</UL>

<P><STRONG><a name="[17d]"></a>USART_SetBaudrate</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hc32f46x_usart.o(i.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USART_SetBaudrate &rArr; SetScBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[183]"></a>USART_UART_Init</STRONG> (Thumb, 672 bytes, Stack size 24 bytes, hc32f46x_usart.o(i.USART_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[17e]"></a>Uart_ComConfiguration</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, uart.o(i.Uart_ComConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart_ComConfiguration &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpCom_ComInit
</UL>

<P><STRONG><a name="[17f]"></a>Uart_ComInit</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, uart.o(i.Uart_ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxTimeoutConfig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GpioConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableClock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpCom_ComInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
</UL>

<P><STRONG><a name="[18b]"></a>Uart_EnableIntError</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uart.o(i.Uart_EnableIntError))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart_EnableIntError &rArr; IrqRegistration
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[187]"></a>Uart_EnableIntRx</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, uart.o(i.Uart_EnableIntRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Uart_EnableIntRx &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[184]"></a>Uart_EnableIntTx</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, uart.o(i.Uart_EnableIntTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart_EnableIntTx &rArr; IrqRegistration
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[11c]"></a>Uart_IrqHandle_EI</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart.o(i.Uart_IrqHandle_EI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_IrqHandle_EI
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ024_Handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ018_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ012_Handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
</UL>

<P><STRONG><a name="[11d]"></a>Uart_IrqHandle_RI</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart.o(i.Uart_IrqHandle_RI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_IrqHandle_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ025_Handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ019_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ013_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ007_Handler
</UL>

<P><STRONG><a name="[11e]"></a>Uart_IrqHandle_RTO</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, uart.o(i.Uart_IrqHandle_RTO))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Uart_IrqHandle_RTO &rArr; TIMER0_Cmd &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransferCnt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDesAddress
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ026_Handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ020_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ014_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ008_Handler
</UL>

<P><STRONG><a name="[120]"></a>Uart_IrqHandle_TCI</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.Uart_IrqHandle_TCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Uart_IrqHandle_TCI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ028_Handler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ022_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ016_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ010_Handler
</UL>

<P><STRONG><a name="[11f]"></a>Uart_IrqHandle_TI</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uart.o(i.Uart_IrqHandle_TI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Uart_IrqHandle_TI &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ027_Handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ021_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ015_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ009_Handler
</UL>

<P><STRONG><a name="[19c]"></a>Uart_SendBuf</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uart.o(i.Uart_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Uart_SendBuf &rArr; Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_Poll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_Interrupt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComWrite
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpCom_ComWrite
</UL>

<P><STRONG><a name="[19f]"></a>Uart_SendBuf_DMA</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, uart.o(i.Uart_SendBuf_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransferCnt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSrcAddress
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>

<P><STRONG><a name="[19e]"></a>Uart_SendBuf_Interrupt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uart.o(i.Uart_SendBuf_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Uart_SendBuf_Interrupt &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttcpy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>

<P><STRONG><a name="[19d]"></a>Uart_SendBuf_Poll</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, uart.o(i.Uart_SendBuf_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_SendBuf_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>

<P><STRONG><a name="[1a2]"></a>UpComTask_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, upcom_task.o(i.UpComTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UpComTask_Init &rArr; ComTask_Init &rArr; LinkQueue_Create &rArr; LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpCom_GetLLMagHandle
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>UpComTask_Process</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, upcom_task.o(i.UpComTask_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UpComTask_Process &rArr; Update_ProtocalProcess &rArr; DownloadProcess_Sync &rArr; StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Retrieve
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Header
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalProcess
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalParse
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ConfigSendFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>UpCom_ComInit</STRONG> (Thumb, 60 bytes, Stack size 72 bytes, upcom_task.o(i.UpCom_ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = UpCom_ComInit &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComConfiguration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> upcom_task.o(i.UpComTask_Init)
</UL>
<P><STRONG><a name="[a1]"></a>UpCom_ComRead</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, upcom_task.o(i.UpCom_ComRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpCom_ComRead
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> upcom_task.o(i.UpComTask_Init)
</UL>
<P><STRONG><a name="[a2]"></a>UpCom_ComWrite</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, upcom_task.o(i.UpCom_ComWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = UpCom_ComWrite &rArr; Uart_SendBuf &rArr; Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> upcom_task.o(i.UpComTask_Init)
</UL>
<P><STRONG><a name="[1a3]"></a>UpCom_GetLLMagHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, upcom_task.o(i.UpCom_GetLLMagHandle))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Init
</UL>

<P><STRONG><a name="[1a6]"></a>Update_ConfigSendFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, upgrade.o(i.Update_ConfigSendFunc))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Process
</UL>

<P><STRONG><a name="[f3]"></a>Update_MagInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, upgrade.o(i.Update_MagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Update_MagInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[1a5]"></a>Update_ProtocalParse</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, upgrade.o(i.Update_ProtocalParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Update_ProtocalParse &rArr; Protocal_Find55AAFrame &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_Find55AAFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Process
</UL>

<P><STRONG><a name="[1a7]"></a>Update_ProtocalProcess</STRONG> (Thumb, 58 bytes, Stack size 72 bytes, upgrade.o(i.Update_ProtocalProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Update_ProtocalProcess &rArr; DownloadProcess_Sync &rArr; StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Process
</UL>

<P><STRONG><a name="[1a8]"></a>Update_SetDevMac</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, upgrade.o(i.Update_SetDevMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Update_SetDevMac
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
</UL>

<P><STRONG><a name="[1a9]"></a>W25QXX_CS_GpioInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio.o(i.W25QXX_CS_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25QXX_CS_GpioInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_HardWareInit
</UL>

<P><STRONG><a name="[ab]"></a>W25QXX_CS_RESET</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(i.W25QXX_CS_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25QXX_CS_RESET &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extflash.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>W25QXX_CS_SET</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(i.W25QXX_CS_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25QXX_CS_SET &rArr; PORT_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extflash.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>W25QXX_Erase_Page</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Erase_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W25QXX_Erase_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
</UL>

<P><STRONG><a name="[a9]"></a>W25QXX_HardWareInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, extflash.o(i.W25QXX_HardWareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = W25QXX_HardWareInit &rArr; SPI2_Init &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS_GpioInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extflash.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>W25QXX_Init</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, extflash.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = W25QXX_Init &rArr; W25QXX_LowLevelInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_LowLevelInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Init
</UL>

<P><STRONG><a name="[1ac]"></a>W25QXX_LowLevelInit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, extflash.o(i.W25QXX_LowLevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = W25QXX_LowLevelInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[10c]"></a>W25QXX_Read</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Read
</UL>

<P><STRONG><a name="[1ad]"></a>W25QXX_ReadID</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[1ae]"></a>W25QXX_ReadSR</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[1ab]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Page
</UL>

<P><STRONG><a name="[1aa]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Write_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Page
</UL>

<P><STRONG><a name="[10f]"></a>W25QXX_Write_Page</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
</UL>

<P><STRONG><a name="[124]"></a>WDT_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hc32f46x_wdt.o(i.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[122]"></a>WDT_RefreshCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_wdt.o(i.WDT_RefreshCounter))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[1af]"></a>ZigComTask_Init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, zigcom_task.o(i.ZigComTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ZigComTask_Init &rArr; ComTask_Init &rArr; LinkQueue_Create &rArr; LinkList_Create &rArr; sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartGetParam
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_SetTxPwr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_GetLLMagHandle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>ZigComTask_Process</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, zigcom_task.o(i.ZigComTask_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ZigComTask_Process &rArr; ZigCom_Analysis &rArr; Update_ProtocalProcess &rArr; DownloadProcess_Sync &rArr; StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_Find5AAAFrame
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_LowLevelTimedProcess
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Retrieve
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Header
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunMilliSecond
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_Analysis
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>ZigCom_Analysis</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, zigcom_task.o(i.ZigCom_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ZigCom_Analysis &rArr; Update_ProtocalProcess &rArr; DownloadProcess_Sync &rArr; StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopSoftReset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopSetParam
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StopGetParam
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartSoftReset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_StartGetParam
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_SetDevMac
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalProcess
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ProtocalParse
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ConfigSendFunc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
</UL>

<P><STRONG><a name="[a4]"></a>ZigCom_ComInit</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, zigcom_task.o(i.ZigCom_ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ZigCom_ComInit &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComConfiguration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>ZigCom_ComRead</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, zigcom_task.o(i.ZigCom_ComRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ZigCom_ComRead
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>ZigCom_ComWrite</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, zigcom_task.o(i.ZigCom_ComWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ZigCom_ComWrite &rArr; Uart_SendBuf &rArr; Uart_SendBuf_DMA &rArr; Uart_ComInit &rArr; Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>ZigRetSend</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, zigcom_task.o(i.ZigRetSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ZigRetSend &rArr; NewZigbee_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewZigbee_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(i.ZigCom_Analysis)
</UL>
<P><STRONG><a name="[1b3]"></a>Zigbee_GpioResetInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gpio.o(i.Zigbee_GpioResetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Zigbee_GpioResetInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetOn
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetOff
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigCom_ComInit
</UL>

<P><STRONG><a name="[a8]"></a>Zigbee_GpioResetOff</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.Zigbee_GpioResetOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Zigbee_GpioResetOff &rArr; Zigbee_GpioResetInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>Zigbee_GpioResetOn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.Zigbee_GpioResetOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Zigbee_GpioResetOn &rArr; Zigbee_GpioResetInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zigbee_GpioResetInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zigcom_task.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>main</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = main &rArr; ZigComTask_Process &rArr; ZigCom_Analysis &rArr; Update_ProtocalProcess &rArr; DownloadProcess_Sync &rArr; StopDownloadProcess &rArr; FlashGetSum &rArr; ExtFlash_GetFlashCheckSum &rArr; ExtFlash_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Process
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLed_On
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnHandle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioOn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GpioOff
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToApp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_PwrKeyOn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNewData
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_TimedTask
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b5]"></a>my_mem_free</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_free
</UL>

<P><STRONG><a name="[ad]"></a>my_mem_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[1b6]"></a>my_mem_malloc</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_malloc
</UL>

<P><STRONG><a name="[ae]"></a>my_mem_perused</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[1b4]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.mymemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[108]"></a>sdram_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, malloc.o(i.sdram_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdram_free &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkQueue_Retrieve
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_GetFlashCheckSum
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigComTask_Process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpComTask_Process
</UL>

<P><STRONG><a name="[ef]"></a>sdram_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, malloc.o(i.sdram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>

<P><STRONG><a name="[eb]"></a>sdram_malloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, malloc.o(i.sdram_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdram_malloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_Write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtFlash_GetFlashCheckSum
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkList_Create
</UL>

<P><STRONG><a name="[1a1]"></a>ttcpy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart.o(i.ttcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ttcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuf_Interrupt
</UL>

<P><STRONG><a name="[b7]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1ea]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1eb]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[148]"></a>GetLastUpdateFrameIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, upgrade.o(i.GetLastUpdateFrameIndex))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD
</UL>

<P><STRONG><a name="[147]"></a>Protocal_CmdProcess_DOWNLOAD</STRONG> (Thumb, 150 bytes, Stack size 144 bytes, upgrade.o(i.Protocal_CmdProcess_DOWNLOAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Protocal_CmdProcess_DOWNLOAD &rArr; Protocal_CmdProcess_Ret &rArr; Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLastUpdateFrame
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_Ret
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastUpdateFrameIndex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[14a]"></a>Protocal_CmdProcess_DOWNLOAD_END</STRONG> (Thumb, 106 bytes, Stack size 136 bytes, upgrade.o(i.Protocal_CmdProcess_DOWNLOAD_END))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Protocal_CmdProcess_DOWNLOAD_END &rArr; Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLastUpdateFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[14c]"></a>Protocal_CmdProcess_DOWNLOAD_START</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, upgrade.o(i.Protocal_CmdProcess_DOWNLOAD_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Protocal_CmdProcess_DOWNLOAD_START &rArr; Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDownloadProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[150]"></a>Protocal_CmdProcess_RESET_DOWNLOAD_ADDR</STRONG> (Thumb, 120 bytes, Stack size 136 bytes, upgrade.o(i.Protocal_CmdProcess_RESET_DOWNLOAD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Protocal_CmdProcess_RESET_DOWNLOAD_ADDR &rArr; Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[151]"></a>Protocal_CmdProcess_RESET_REPLACE_ADDR</STRONG> (Thumb, 120 bytes, Stack size 136 bytes, upgrade.o(i.Protocal_CmdProcess_RESET_REPLACE_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Protocal_CmdProcess_RESET_REPLACE_ADDR &rArr; Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_UpgradeProcess
</UL>

<P><STRONG><a name="[fd]"></a>Protocal_CmdProcess_Ret</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, upgrade.o(i.Protocal_CmdProcess_Ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Protocal_CmdProcess_Ret &rArr; Protocal_ProtocolMakeShort55AA &rArr; Protocal_MakeU8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_ProtocolMakeShort55AA
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadProcess_Sync
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD
</UL>

<P><STRONG><a name="[149]"></a>SaveLastUpdateFrame</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, upgrade.o(i.SaveLastUpdateFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveLastUpdateFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD_END
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocal_CmdProcess_DOWNLOAD
</UL>

<P><STRONG><a name="[c9]"></a>AsyncDelay</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, hc32f46x_timer0.o(i.AsyncDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_GetClkMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_WriteCntReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_HardTriggerInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ClearFlag
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
</UL>

<P><STRONG><a name="[ca]"></a>TIMER0_GetClkMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i.TIMER0_GetClkMode))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>

<P><STRONG><a name="[166]"></a>SetClkSyncBaudrate</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, hc32f46x_usart.o(i.SetClkSyncBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetClkSyncBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[169]"></a>SetScBaudrate</STRONG> (Thumb, 340 bytes, Stack size 80 bytes, hc32f46x_usart.o(i.SetScBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SetScBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[16a]"></a>SetUartBaudrate</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, hc32f46x_usart.o(i.SetUartBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetUartBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[167]"></a>UsartGetClk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hc32f46x_usart.o(i.UsartGetClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsartGetClk
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>

<P><STRONG><a name="[173]"></a>IrqRegistration</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timer.o(i.IrqRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysScheduleTimerInit
</UL>

<P><STRONG><a name="[192]"></a>IrqRegistration</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart.o(i.IrqRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
</UL>

<P><STRONG><a name="[180]"></a>Uart_EnableClock</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uart.o(i.Uart_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[188]"></a>Uart_EnableDmaRx</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, uart.o(i.Uart_EnableDmaRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Uart_EnableDmaRx &rArr; DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableIrq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[185]"></a>Uart_EnableDmaTx</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, uart.o(i.Uart_EnableDmaTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Uart_EnableDmaTx &rArr; DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqRegistration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[181]"></a>Uart_GpioConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart.o(i.Uart_GpioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart_GpioConfig &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[121]"></a>Uart_IrqHandle_DMATC</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uart.o(i.Uart_IrqHandle_DMATC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Uart_IrqHandle_DMATC &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransferCnt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSrcAddress
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ029_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ023_Handler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ017_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ011_Handler
</UL>

<P><STRONG><a name="[186]"></a>Uart_RxTimeoutConfig</STRONG> (Thumb, 218 bytes, Stack size 80 bytes, uart.o(i.Uart_RxTimeoutConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Uart_RxTimeoutConfig &rArr; TIMER0_BaseInit &rArr; AsyncDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_WriteCntReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_HardTriggerInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ClearFlag
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ComInit
</UL>

<P><STRONG><a name="[194]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
</UL>

<P><STRONG><a name="[195]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
</UL>

<P><STRONG><a name="[193]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaTx
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableDmaRx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntTx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIntRx
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
